digraph G {
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)" [label="org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#min(int,int)" [label="org.apache.commons.math3.util$FastMath#min(int,int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()" [label="org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sqrt(double)" [label="org.apache.commons.math3.util$FastMath#sqrt(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()" [label="org.apache.commons.math3.geometry.partitioning$Characterization#getIn()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()" [label="org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#floor(double)" [label="org.apache.commons.math3.util$FastMath#floor(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math3.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#<clinit>()" [label="org.apache.commons.math3.util$FastMath#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()" [label="org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()" [label="org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()" [label="org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" [label="org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#<clinit>()" [label="org.apache.commons.math3.util$Precision#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#condense()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" [label="org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sin(double)" [label="org.apache.commons.math3.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)" [label="org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()" [label="org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#polySine(double)" [label="org.apache.commons.math3.util$FastMath#polySine(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()" [label="org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math3.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()" [label="org.apache.commons.math3.geometry.partitioning$Characterization#getOut()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" [label="org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polyCosine(double)" [label="org.apache.commons.math3.util$FastMath#polyCosine(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()" [label="org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning$Side#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#abs(double)" [label="org.apache.commons.math3.util$FastMath#abs(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()" [label="org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" [label="org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()" [label="org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(double,double)" [label="org.apache.commons.math3.util$FastMath#max(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()" [label="org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()" [label="org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math3.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tan(double)" [label="org.apache.commons.math3.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(double,int)" [label="org.apache.commons.math3.util$Precision#round(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(double,int,int)" [label="org.apache.commons.math3.util$Precision#round(double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cbrt(double)" [label="org.apache.commons.math3.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(int)" [label="org.apache.commons.math3.util$FastMath#abs(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" [label="org.apache.commons.math3.util$Precision#equals(float,float,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" [label="org.apache.commons.math3.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math3.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cos(double)" [label="org.apache.commons.math3.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asin(double)" [label="org.apache.commons.math3.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(double,double)" [label="org.apache.commons.math3.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acos(double)" [label="org.apache.commons.math3.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double)" [label="org.apache.commons.math3.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" [label="org.apache.commons.math3.util$MathArrays#equals(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" [label="org.apache.commons.math3.util$Precision#equals(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(double,double)" [label="org.apache.commons.math3.util$Precision#equals(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(long)" [label="org.apache.commons.math3.util$FastMath#abs(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#boxBoundary(double,double,double,double)" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#boxBoundary(double,double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" [label="org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays$2#<clinit>()" [label="org.apache.commons.math3.util$MathArrays$2#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()" [label="org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" [label="org.apache.commons.math3.util$MathArrays#distance1(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" [label="org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" [label="org.apache.commons.math3.util$Precision#compareTo(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" [label="org.apache.commons.math3.util$Precision#equals(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log10(double)" [label="org.apache.commons.math3.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math3.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double[])" [label="org.apache.commons.math3.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(float)" [label="org.apache.commons.math3.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atanh(double)" [label="org.apache.commons.math3.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double)" [label="org.apache.commons.math3.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" [label="org.apache.commons.math3.util$MathArrays#copyOf(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" [label="org.apache.commons.math3.util$MathArrays#copyOf(int[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(double)" [label="org.apache.commons.math3.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(double)" [label="org.apache.commons.math3.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toRadians(double)" [label="org.apache.commons.math3.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#revertSelf()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#revertSelf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" [label="org.apache.commons.math3.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" [label="org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" [label="org.apache.commons.math3.util$MathArrays#equals(float[],float[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(float,float)" [label="org.apache.commons.math3.util$Precision#equals(float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(float,int)" [label="org.apache.commons.math3.util$Precision#round(float,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(float,int,int)" [label="org.apache.commons.math3.util$Precision#round(float,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" [label="org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ceil(double)" [label="org.apache.commons.math3.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,double)" [label="org.apache.commons.math3.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(float,float)" [label="org.apache.commons.math3.util$FastMath#copySign(float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" [label="org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" [label="org.apache.commons.math3.util$Precision#equals(float,float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(float)" [label="org.apache.commons.math3.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getLargest()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getLargest()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" [label="org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" [label="org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" [label="org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#size()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#size()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#size()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#size()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeSpace()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeSpace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" [label="org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double)" [label="org.apache.commons.math3.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math3.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" [label="org.apache.commons.math3.util$MathArrays#copyOf(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" [label="org.apache.commons.math3.util$MathArrays#copyOf(double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" [label="org.apache.commons.math3.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#scalb(double,int)" [label="org.apache.commons.math3.util$FastMath#scalb(double,int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(double)" [label="org.apache.commons.math3.util$FastMath#getExponent(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" [label="org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acosh(double)" [label="org.apache.commons.math3.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asinh(double)" [label="org.apache.commons.math3.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(float)" [label="org.apache.commons.math3.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getPrevious()" [label="org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getPrevious()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" [label="org.apache.commons.math3.util$MathArrays#distance(int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#hash(double)" [label="org.apache.commons.math3.util$MathUtils#hash(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double)" [label="org.apache.commons.math3.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" [label="org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()" [label="org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosh(double)" [label="org.apache.commons.math3.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" [label="org.apache.commons.math3.util$MathArrays#distance1(int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#rint(double)" [label="org.apache.commons.math3.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" [label="org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#revert()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinh(double)" [label="org.apache.commons.math3.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(float)" [label="org.apache.commons.math3.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" [label="org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanh(double)" [label="org.apache.commons.math3.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" [label="org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log1p(double)" [label="org.apache.commons.math3.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" [label="org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double)" [label="org.apache.commons.math3.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" [label="org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(double)" [label="org.apache.commons.math3.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math3.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" [label="org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#getSize()" [label="org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#getSize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" [label="org.apache.commons.math3.util$Precision#compareTo(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" [label="org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#hashCode()" [label="org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" [label="org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" [label="org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" [label="org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" [label="org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(int,int)" [label="org.apache.commons.math3.util$FastMath#max(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" [label="org.apache.commons.math3.util$MathUtils#reduce(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" [label="org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" [label="org.apache.commons.math3.util$MathArrays#distance(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" [label="org.apache.commons.math3.util$MathArrays#checkOrder(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()" [label="org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)" [label="org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()" [label="org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#round(double,int,int)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#boxBoundary(double,double,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$2#<clinit>()" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#revertSelf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#revertSelf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#round(float,int,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getLargest()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#size()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#size()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeSpace()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getPrevious()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#hypot(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#hashCode()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)" -> "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
}
