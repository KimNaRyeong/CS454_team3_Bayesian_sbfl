digraph G {
  "org.apache.commons.math.complex$Complex#tan()" [label="org.apache.commons.math.complex$Complex#tan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sin(double)" [label="org.apache.commons.math.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#<clinit>()" [label="org.apache.commons.math.util$FastMath#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cosh(double)" [label="org.apache.commons.math.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#<clinit>()" [label="org.apache.commons.math.complex$Complex#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cos(double)" [label="org.apache.commons.math.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#createComplex(double,double)" [label="org.apache.commons.math.complex$Complex#createComplex(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sinh(double)" [label="org.apache.commons.math.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextUp(double)" [label="org.apache.commons.math.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#toRadians(double)" [label="org.apache.commons.math.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" [label="org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#getImaginary()" [label="org.apache.commons.math.complex$Complex#getImaginary()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#isInfinite()" [label="org.apache.commons.math.complex$Complex#isInfinite()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#getReal()" [label="org.apache.commons.math.complex$Complex#getReal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#abs(double)" [label="org.apache.commons.math.util$FastMath#abs(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#multiply(double)" [label="org.apache.commons.math.complex$Complex#multiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log(double,double[])" [label="org.apache.commons.math.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#readResolve()" [label="org.apache.commons.math.complex$Complex#readResolve()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#asinh(double)" [label="org.apache.commons.math.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log(double)" [label="org.apache.commons.math.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sqrt(double)" [label="org.apache.commons.math.util$FastMath#sqrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#nthRoot(int)" [label="org.apache.commons.math.complex$Complex#nthRoot(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#pow(double,double)" [label="org.apache.commons.math.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#getArgument()" [label="org.apache.commons.math.complex$Complex#getArgument()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#abs()" [label="org.apache.commons.math.complex$Complex#abs()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()" [label="org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMathLiteralArrays#loadLnMant()" [label="org.apache.commons.math.util$FastMathLiteralArrays#loadLnMant()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#tan(double)" [label="org.apache.commons.math.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#sin()" [label="org.apache.commons.math.complex$Complex#sin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#exp(double)" [label="org.apache.commons.math.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#acos()" [label="org.apache.commons.math.complex$Complex#acos()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#log()" [label="org.apache.commons.math.complex$Complex#log()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#sqrt1z()" [label="org.apache.commons.math.complex$Complex#sqrt1z()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#negate()" [label="org.apache.commons.math.complex$Complex#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" [label="org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" [label="org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atan2(double,double)" [label="org.apache.commons.math.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracB()" [label="org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracA()" [label="org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#cos()" [label="org.apache.commons.math.complex$Complex#cos()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#copySign(double,double)" [label="org.apache.commons.math.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#atan()" [label="org.apache.commons.math.complex$Complex#atan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" [label="org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log10(double)" [label="org.apache.commons.math.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#toDegrees(double)" [label="org.apache.commons.math.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#tanh(double)" [label="org.apache.commons.math.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" [label="org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#exp()" [label="org.apache.commons.math.complex$Complex#exp()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntB()" [label="org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntA()" [label="org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#asin(double)" [label="org.apache.commons.math.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#tanh()" [label="org.apache.commons.math.complex$Complex#tanh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#expm1(double)" [label="org.apache.commons.math.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#sinh()" [label="org.apache.commons.math.complex$Complex#sinh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#sqrt()" [label="org.apache.commons.math.complex$Complex#sqrt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#ceil(double)" [label="org.apache.commons.math.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#floor(double)" [label="org.apache.commons.math.util$FastMath#floor(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#polyCosine(double)" [label="org.apache.commons.math.util$FastMath#polyCosine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#polySine(double)" [label="org.apache.commons.math.util$FastMath#polySine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextUp(float)" [label="org.apache.commons.math.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#cosh()" [label="org.apache.commons.math.complex$Complex#cosh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#divide(double)" [label="org.apache.commons.math.complex$Complex#divide(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#reciprocal()" [label="org.apache.commons.math.complex$Complex#reciprocal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#asin()" [label="org.apache.commons.math.complex$Complex#asin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cbrt(double)" [label="org.apache.commons.math.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#acos(double)" [label="org.apache.commons.math.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#subtract(double)" [label="org.apache.commons.math.complex$Complex#subtract(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#multiply(int)" [label="org.apache.commons.math.complex$Complex#multiply(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#acosh(double)" [label="org.apache.commons.math.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#hypot(double,double)" [label="org.apache.commons.math.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#scalb(double,int)" [label="org.apache.commons.math.util$FastMath#scalb(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#getExponent(double)" [label="org.apache.commons.math.util$FastMath#getExponent(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#valueOf(double)" [label="org.apache.commons.math.complex$Complex#valueOf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#ulp(float)" [label="org.apache.commons.math.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#abs(float)" [label="org.apache.commons.math.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atanh(double)" [label="org.apache.commons.math.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#round(float)" [label="org.apache.commons.math.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log1p(double)" [label="org.apache.commons.math.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atan(double)" [label="org.apache.commons.math.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#pow(double)" [label="org.apache.commons.math.complex$Complex#pow(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#rint(double)" [label="org.apache.commons.math.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#ulp(double)" [label="org.apache.commons.math.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#conjugate()" [label="org.apache.commons.math.complex$Complex#conjugate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log(double,double)" [label="org.apache.commons.math.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#add(double)" [label="org.apache.commons.math.complex$Complex#add(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#round(double)" [label="org.apache.commons.math.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#valueOf(double,double)" [label="org.apache.commons.math.complex$Complex#valueOf(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#tan()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.complex$Complex#createComplex(double,double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#multiply(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#multiply(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#readResolve()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#pow(double,double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#getArgument()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#nthRoot(int)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#getArgument()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#abs()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sin()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#sqrt1z()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#negate()";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#acos()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#atan2(double,double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#log()" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sqrt1z()" -> "org.apache.commons.math.complex$Complex#sqrt()";
  "org.apache.commons.math.complex$Complex#negate()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#negate()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.complex$Complex#cos()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#divide(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#atan()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getReal()";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#subtract(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#getImaginary()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#exp()";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#pow(org.apache.commons.math.complex.Complex)" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#exp()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#tanh()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sinh()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#abs()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#sqrt()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#sin(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#sinh(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#cos(double)";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#cosh()" -> "org.apache.commons.math.util$FastMath#cosh(double)";
  "org.apache.commons.math.complex$Complex#divide(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#divide(double)" -> "org.apache.commons.math.complex$Complex#isInfinite()";
  "org.apache.commons.math.complex$Complex#divide(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#reciprocal()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.complex$Complex#reciprocal()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#reciprocal()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#reciprocal()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#add(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#multiply(org.apache.commons.math.complex.Complex)";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#sqrt1z()";
  "org.apache.commons.math.complex$Complex#asin()" -> "org.apache.commons.math.complex$Complex#negate()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.complex$Complex#subtract(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#subtract(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#multiply(int)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.complex$Complex#multiply(int)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.complex$Complex#valueOf(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#exp()";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#multiply(double)";
  "org.apache.commons.math.complex$Complex#pow(double)" -> "org.apache.commons.math.complex$Complex#log()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#conjugate()" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#conjugate()" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.complex$Complex#add(double)" -> "org.apache.commons.math.complex$Complex#createComplex(double,double)";
  "org.apache.commons.math.complex$Complex#add(double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.complex$Complex#valueOf(double,double)" -> "org.apache.commons.math.complex$Complex#<clinit>()";
}
