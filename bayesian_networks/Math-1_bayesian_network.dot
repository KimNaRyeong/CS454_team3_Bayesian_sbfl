digraph G {
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" [label="org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()" [label="org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)" [label="org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" [label="org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" [label="org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" [label="org.apache.commons.math3.fraction$BigFraction#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()" [label="org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#reduce()" [label="org.apache.commons.math3.fraction$BigFraction#reduce()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acosh(double)" [label="org.apache.commons.math3.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sqrt(double)" [label="org.apache.commons.math3.util$FastMath#sqrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double[])" [label="org.apache.commons.math3.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math3.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double)" [label="org.apache.commons.math3.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#<clinit>()" [label="org.apache.commons.math3.util$FastMath#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asinh(double)" [label="org.apache.commons.math3.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" [label="org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" [label="org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" [label="org.apache.commons.math3.fraction$BigFraction#reciprocal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#negate()" [label="org.apache.commons.math3.fraction$Fraction#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(int)" [label="org.apache.commons.math3.util$FastMath#abs(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" [label="org.apache.commons.math3.fraction$Fraction#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" [label="org.apache.commons.math3.fraction$Fraction#Fraction(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math3.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" [label="org.apache.commons.math3.util$MathUtils#checkFinite(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()" [label="org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" [label="org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,double)" [label="org.apache.commons.math3.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" [label="org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" [label="org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#getContext()" [label="org.apache.commons.math3.exception$MathIllegalStateException#getContext()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" [label="org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(double,double)" [label="org.apache.commons.math3.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" [label="org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ceil(double)" [label="org.apache.commons.math3.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#floor(double)" [label="org.apache.commons.math3.util$FastMath#floor(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sin(double)" [label="org.apache.commons.math3.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polySine(double)" [label="org.apache.commons.math3.util$FastMath#polySine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)" [label="org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polyCosine(double)" [label="org.apache.commons.math3.util$FastMath#polyCosine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getK()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getK()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math3.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math3.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanh(double)" [label="org.apache.commons.math3.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math3.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)" [label="org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosh(double)" [label="org.apache.commons.math3.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double)" [label="org.apache.commons.math3.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" [label="org.apache.commons.math3.fraction$BigFraction#subtract(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" [label="org.apache.commons.math3.exception$ZeroException#ZeroException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cbrt(double)" [label="org.apache.commons.math3.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#floatValue()" [label="org.apache.commons.math3.fraction$BigFraction#floatValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(float)" [label="org.apache.commons.math3.util$FastMath#getExponent(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" [label="org.apache.commons.math3.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#scalb(double,int)" [label="org.apache.commons.math3.util$FastMath#scalb(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(double)" [label="org.apache.commons.math3.util$FastMath#getExponent(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(double)" [label="org.apache.commons.math3.util$FastMath#abs(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(int,int)" [label="org.apache.commons.math3.util$MathUtils#copySign(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(long,long)" [label="org.apache.commons.math3.util$MathUtils#copySign(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" [label="org.apache.commons.math3.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math3.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" [label="org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)" [label="org.apache.commons.math3.util$MathUtils#copySign(byte,byte)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(long)" [label="org.apache.commons.math3.util$FastMath#abs(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" [label="org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" [label="org.apache.commons.math3.fraction$BigFraction#divide(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(float)" [label="org.apache.commons.math3.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(float)" [label="org.apache.commons.math3.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#floatValue()" [label="org.apache.commons.math3.fraction$Fraction#floatValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#doubleValue()" [label="org.apache.commons.math3.fraction$Fraction#doubleValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asin(double)" [label="org.apache.commons.math3.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#doubleValue()" [label="org.apache.commons.math3.fraction$BigFraction#doubleValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double)" [label="org.apache.commons.math3.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" [label="org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" [label="org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double)" [label="org.apache.commons.math3.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" [label="org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" [label="org.apache.commons.math3.fraction$BigFraction#divide(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" [label="org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#add(int)" [label="org.apache.commons.math3.fraction$BigFraction#add(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" [label="org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double)" [label="org.apache.commons.math3.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" [label="org.apache.commons.math3.fraction$BigFraction#multiply(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" [label="org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#percentageValue()" [label="org.apache.commons.math3.fraction$Fraction#percentageValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(double)" [label="org.apache.commons.math3.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#intValue()" [label="org.apache.commons.math3.fraction$Fraction#intValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" [label="org.apache.commons.math3.util$MathUtils#reduce(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" [label="org.apache.commons.math3.util$MathUtils#checkFinite(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#longValue()" [label="org.apache.commons.math3.fraction$Fraction#longValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" [label="org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" [label="org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cos(double)" [label="org.apache.commons.math3.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" [label="org.apache.commons.math3.fraction$Fraction#Fraction(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#divide(int)" [label="org.apache.commons.math3.fraction$Fraction#divide(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" [label="org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" [label="org.apache.commons.math3.fraction$Fraction#subtract(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(float)" [label="org.apache.commons.math3.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" [label="org.apache.commons.math3.fraction$Fraction#Fraction(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" [label="org.apache.commons.math3.fraction$Fraction#multiply(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" [label="org.apache.commons.math3.fraction$BigFraction#percentageValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log10(double)" [label="org.apache.commons.math3.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log1p(double)" [label="org.apache.commons.math3.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(double)" [label="org.apache.commons.math3.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(double)" [label="org.apache.commons.math3.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(short,short)" [label="org.apache.commons.math3.util$MathUtils#copySign(short,short)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math3.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acos(double)" [label="org.apache.commons.math3.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(float)" [label="org.apache.commons.math3.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" [label="org.apache.commons.math3.fraction$Fraction#Fraction(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" [label="org.apache.commons.math3.fraction$BigFraction#pow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" [label="org.apache.commons.math3.fraction$Fraction#reciprocal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#add(int)" [label="org.apache.commons.math3.fraction$Fraction#add(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" [label="org.apache.commons.math3.fraction$BigFraction#multiply(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" [label="org.apache.commons.math3.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" [label="org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#negate()" [label="org.apache.commons.math3.fraction$BigFraction#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#rint(double)" [label="org.apache.commons.math3.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" [label="org.apache.commons.math3.fraction$BigFraction#subtract(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#abs()" [label="org.apache.commons.math3.fraction$BigFraction#abs()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toRadians(double)" [label="org.apache.commons.math3.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" [label="org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinh(double)" [label="org.apache.commons.math3.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#add(long)" [label="org.apache.commons.math3.fraction$BigFraction#add(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#abs()" [label="org.apache.commons.math3.fraction$Fraction#abs()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" [label="org.apache.commons.math3.fraction$BigFraction#BigFraction(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" [label="org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tan(double)" [label="org.apache.commons.math3.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" [label="org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" [label="org.apache.commons.math3.fraction$BigFraction#pow(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atanh(double)" [label="org.apache.commons.math3.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" [label="org.apache.commons.math3.fraction$BigFraction#pow(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#reduce()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.fraction$BigFraction#reduce()";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#<clinit>()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reduce()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#reciprocal()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#negate()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#floatValue()" -> "org.apache.commons.math3.util$FastMath#getExponent(float)";
  "org.apache.commons.math3.fraction$BigFraction#floatValue()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#copySign(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$MathUtils#copySign(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#copySign(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.fraction$Fraction#negate()";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)" -> "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#divide(long)" -> "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#floatValue()" -> "org.apache.commons.math3.fraction$Fraction#doubleValue()";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#doubleValue()" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.fraction$BigFraction#doubleValue()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.fraction$BigFraction#reduce()";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#divide(int)" -> "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#percentageValue()" -> "org.apache.commons.math3.fraction$Fraction#doubleValue()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#intValue()" -> "org.apache.commons.math3.fraction$Fraction#doubleValue()";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#longValue()" -> "org.apache.commons.math3.fraction$Fraction#doubleValue()";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#divide(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#negate()";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#subtract(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#multiply(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.fraction$BigFraction#doubleValue()";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(short,short)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#copySign(short,short)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(short,short)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#reciprocal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#add(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(double)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#reciprocal()";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#negate()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.fraction$BigFraction#negate()";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#abs()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#add(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.fraction$Fraction#negate()";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#abs()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#negate()";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)" -> "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.fraction$BigFraction#pow(long)" -> "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)";
}
