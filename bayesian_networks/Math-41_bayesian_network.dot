digraph G {
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy()" [label="org.apache.commons.math.stat.descriptive.summary$Sum#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)" [label="org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextUp(double)" [label="org.apache.commons.math.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#<clinit>()" [label="org.apache.commons.math.util$FastMath#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#toRadians(double)" [label="org.apache.commons.math.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" [label="org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()" [label="org.apache.commons.math.stat.descriptive.moment$Variance#getResult()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()" [label="org.apache.commons.math.stat.descriptive.summary$Sum#getResult()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#getN()" [label="org.apache.commons.math.stat.descriptive.summary$Sum#getN()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()" [label="org.apache.commons.math.stat.descriptive.moment$Mean#getResult()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()" [label="org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#getN()" [label="org.apache.commons.math.stat.descriptive.moment$Mean#getN()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()" [label="org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()" [label="org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#getN()" [label="org.apache.commons.math.stat.descriptive.moment$Variance#getN()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log(double,double[])" [label="org.apache.commons.math.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" [label="org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[])" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)" [label="org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)" [label="org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" [label="org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#asinh(double)" [label="org.apache.commons.math.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log(double)" [label="org.apache.commons.math.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sqrt(double)" [label="org.apache.commons.math.util$FastMath#sqrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#tan(double)" [label="org.apache.commons.math.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cos(double)" [label="org.apache.commons.math.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()" [label="org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" [label="org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#clear()" [label="org.apache.commons.math.stat.descriptive.moment$Variance#clear()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#clear()" [label="org.apache.commons.math.stat.descriptive.summary$Sum#clear()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()" [label="org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#clear()" [label="org.apache.commons.math.stat.descriptive.moment$Mean#clear()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log10(double)" [label="org.apache.commons.math.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)" [label="org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)" [label="org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)" [label="org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#toDegrees(double)" [label="org.apache.commons.math.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#tanh(double)" [label="org.apache.commons.math.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()" [label="org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()" [label="org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)" [label="org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy(org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.SecondMoment)" [label="org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy(org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.SecondMoment)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atan2(double,double)" [label="org.apache.commons.math.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#copySign(double,double)" [label="org.apache.commons.math.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#increment(double)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#increment(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#increment(double)" [label="org.apache.commons.math.stat.descriptive.summary$Sum#increment(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#asin(double)" [label="org.apache.commons.math.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#expm1(double)" [label="org.apache.commons.math.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cosh(double)" [label="org.apache.commons.math.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#exp(double)" [label="org.apache.commons.math.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#ceil(double)" [label="org.apache.commons.math.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#floor(double)" [label="org.apache.commons.math.util$FastMath#floor(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sinh(double)" [label="org.apache.commons.math.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#polyCosine(double)" [label="org.apache.commons.math.util$FastMath#polyCosine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#polySine(double)" [label="org.apache.commons.math.util$FastMath#polySine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextUp(float)" [label="org.apache.commons.math.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[])" [label="org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)" [label="org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#sin(double)" [label="org.apache.commons.math.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" [label="org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" [label="org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)" [label="org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#cbrt(double)" [label="org.apache.commons.math.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy()" [label="org.apache.commons.math.stat.descriptive.moment$Variance#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#acos(double)" [label="org.apache.commons.math.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#acosh(double)" [label="org.apache.commons.math.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#pow(double,double)" [label="org.apache.commons.math.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#hypot(double,double)" [label="org.apache.commons.math.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#abs(double)" [label="org.apache.commons.math.util$FastMath#abs(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#scalb(double,int)" [label="org.apache.commons.math.util$FastMath#scalb(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#getExponent(double)" [label="org.apache.commons.math.util$FastMath#getExponent(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#ulp(float)" [label="org.apache.commons.math.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#abs(float)" [label="org.apache.commons.math.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atanh(double)" [label="org.apache.commons.math.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#round(float)" [label="org.apache.commons.math.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log1p(double)" [label="org.apache.commons.math.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#atan(double)" [label="org.apache.commons.math.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#rint(double)" [label="org.apache.commons.math.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#ulp(double)" [label="org.apache.commons.math.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#log(double,double)" [label="org.apache.commons.math.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[])" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[])" [label="org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" [label="org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy()" [label="org.apache.commons.math.stat.descriptive.moment$Mean#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double)" [label="org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$FastMath#round(double)" [label="org.apache.commons.math.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[])" [label="org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy()" -> "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getN()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#getN()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[])";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#increment(double)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#clear()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#clear()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#clear()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy(org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.SecondMoment)";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy(org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.SecondMoment)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[])" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[])" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy()" -> "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)";
}
