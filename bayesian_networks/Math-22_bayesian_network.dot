digraph G {
  "org.apache.commons.math3.util$FastMath#log10(double)" [label="org.apache.commons.math3.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math3.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double[])" [label="org.apache.commons.math3.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#<clinit>()" [label="org.apache.commons.math3.util$FastMath#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$Well19937c#next(int)" [label="org.apache.commons.math3.random$Well19937c#next(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()" [label="org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()" [label="org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma$1#getA(int,double)" [label="org.apache.commons.math3.special$Gamma$1#getA(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double)" [label="org.apache.commons.math3.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)" [label="org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()" [label="org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta$1#getB(int,double)" [label="org.apache.commons.math3.special$Beta$1#getB(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)" [label="org.apache.commons.math3.special$Gamma#invGamma1pm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma$1#getB(int,double)" [label="org.apache.commons.math3.special$Gamma$1#getB(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log1p(double)" [label="org.apache.commons.math3.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" [label="org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" [label="org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sqrt(double)" [label="org.apache.commons.math3.util$FastMath#sqrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double)" [label="org.apache.commons.math3.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#initRan()" [label="org.apache.commons.math3.random$RandomDataGenerator#initRan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#sample()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#floor(double)" [label="org.apache.commons.math3.util$FastMath#floor(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#<clinit>()" [label="org.apache.commons.math3.special$Gamma#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#lanczos(double)" [label="org.apache.commons.math3.special$Gamma#lanczos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()" [label="org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(double)" [label="org.apache.commons.math3.util$FastMath#abs(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()" [label="org.apache.commons.math3.distribution$FDistribution#getNumericalMean()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()" [label="org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#logGamma(double)" [label="org.apache.commons.math3.special$Gamma#logGamma(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" [label="org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math3.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()" [label="org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta$1#getA(int,double)" [label="org.apache.commons.math3.special$Beta$1#getA(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" [label="org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" [label="org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()" [label="org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#getRan()" [label="org.apache.commons.math3.random$RandomDataGenerator#getRan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()" [label="org.apache.commons.math3.distribution$FDistribution#isSupportConnected()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" [label="org.apache.commons.math3.special$Gamma#logGamma1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)" [label="org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)" [label="org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" [label="org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(float)" [label="org.apache.commons.math3.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" [label="org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)" [label="org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getK()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getK()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polyCosine(double)" [label="org.apache.commons.math3.util$FastMath#polyCosine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polySine(double)" [label="org.apache.commons.math3.util$FastMath#polySine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cos(double)" [label="org.apache.commons.math3.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math3.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sin(double)" [label="org.apache.commons.math3.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math3.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" [label="org.apache.commons.math3.util$ContinuedFraction#evaluate(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" [label="org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()" [label="org.apache.commons.math3.random$RandomDataGenerator#getSecRan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" [label="org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" [label="org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" [label="org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" [label="org.apache.commons.math3.random$RandomDataImpl#reSeed(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#clear()" [label="org.apache.commons.math3.random$BitsStreamGenerator#clear()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" [label="org.apache.commons.math3.random$AbstractWell#setSeed(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" [label="org.apache.commons.math3.random$AbstractWell#setSeed(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeed()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" [label="org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" [label="org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinh(double)" [label="org.apache.commons.math3.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math3.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,double)" [label="org.apache.commons.math3.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextT(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" [label="org.apache.commons.math3.random$RandomDataImpl#reSeed()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" [label="org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextInt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(float)" [label="org.apache.commons.math3.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(float)" [label="org.apache.commons.math3.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$FDistribution#density(double)" [label="org.apache.commons.math3.distribution$FDistribution#density(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" [label="org.apache.commons.math3.special$Beta#logBeta(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#rint(double)" [label="org.apache.commons.math3.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(double)" [label="org.apache.commons.math3.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" [label="org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MaxCountExceededException#getMax()" [label="org.apache.commons.math3.exception$MaxCountExceededException#getMax()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" [label="org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()" [label="org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getRelativeAccuracy()" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getRelativeAccuracy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMinimalIterationCount()" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMinimalIterationCount()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(int,int)" [label="org.apache.commons.math3.util$FastMath#max(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#min(double,double)" [label="org.apache.commons.math3.util$FastMath#min(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(double,double)" [label="org.apache.commons.math3.util$FastMath#max(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)" [label="org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(double,double)" [label="org.apache.commons.math3.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" [label="org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" [label="org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math3.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(float)" [label="org.apache.commons.math3.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" [label="org.apache.commons.math3.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math3.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" [label="org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(double)" [label="org.apache.commons.math3.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" [label="org.apache.commons.math3.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#trigamma(double)" [label="org.apache.commons.math3.special$Gamma#trigamma(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double)" [label="org.apache.commons.math3.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" [label="org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ceil(double)" [label="org.apache.commons.math3.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#gamma(double)" [label="org.apache.commons.math3.special$Gamma#gamma(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" [label="org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double)" [label="org.apache.commons.math3.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$UniformRealDistribution#sample()" [label="org.apache.commons.math3.distribution$UniformRealDistribution#sample()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanh(double)" [label="org.apache.commons.math3.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextT(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" [label="org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acosh(double)" [label="org.apache.commons.math3.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cbrt(double)" [label="org.apache.commons.math3.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosh(double)" [label="org.apache.commons.math3.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asin(double)" [label="org.apache.commons.math3.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextLong()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" [label="org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atanh(double)" [label="org.apache.commons.math3.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" [label="org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" [label="org.apache.commons.math3.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(double)" [label="org.apache.commons.math3.util$FastMath#getExponent(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#scalb(double,int)" [label="org.apache.commons.math3.util$FastMath#scalb(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" [label="org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" [label="org.apache.commons.math3.random$AbstractWell#setSeed(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asinh(double)" [label="org.apache.commons.math3.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.special$Gamma#digamma(double)" [label="org.apache.commons.math3.special$Gamma#digamma(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acos(double)" [label="org.apache.commons.math3.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double)" [label="org.apache.commons.math3.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tan(double)" [label="org.apache.commons.math3.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(double)" [label="org.apache.commons.math3.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toRadians(double)" [label="org.apache.commons.math3.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#lanczos(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#getRan()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#logGamma1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)" -> "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$FDistribution#density(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#logBeta(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMinimalIterationCount()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()";
  "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getRelativeAccuracy()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMinimalIterationCount()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)" -> "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#trigamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.special$Gamma#gamma(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$UniformRealDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$UniformRealDistribution#sample()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Beta$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma$1#getB(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma#lanczos(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Beta$1#getA(int,double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.special$Gamma#logGamma1p(double)";
  "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.special$Gamma#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.special$Gamma#digamma(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
}
