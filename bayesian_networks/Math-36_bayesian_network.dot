digraph G {
  "org.apache.commons.math.fraction$BigFraction#add(org.apache.commons.math.fraction.BigFraction)" [label="org.apache.commons.math.fraction$BigFraction#add(org.apache.commons.math.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#equals(java.lang.Object)" [label="org.apache.commons.math.fraction$BigFraction#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#<clinit>()" [label="org.apache.commons.math.fraction$BigFraction#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()" [label="org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#reduce()" [label="org.apache.commons.math.fraction$BigFraction#reduce()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#divide(int)" [label="org.apache.commons.math.fraction$BigFraction#divide(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#divide(java.math.BigInteger)" [label="org.apache.commons.math.fraction$BigFraction#divide(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#pow(java.math.BigInteger)" [label="org.apache.commons.math.fraction$BigFraction#pow(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#reciprocal()" [label="org.apache.commons.math.fraction$BigFraction#reciprocal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#percentageValue()" [label="org.apache.commons.math.fraction$BigFraction#percentageValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#doubleValue()" [label="org.apache.commons.math.fraction$BigFraction#doubleValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#multiply(java.math.BigInteger)" [label="org.apache.commons.math.fraction$BigFraction#multiply(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#pow(long)" [label="org.apache.commons.math.fraction$BigFraction#pow(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#add(java.math.BigInteger)" [label="org.apache.commons.math.fraction$BigFraction#add(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)" [label="org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#add(int)" [label="org.apache.commons.math.fraction$BigFraction#add(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#multiply(int)" [label="org.apache.commons.math.fraction$BigFraction#multiply(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#negate()" [label="org.apache.commons.math.fraction$BigFraction#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#subtract(long)" [label="org.apache.commons.math.fraction$BigFraction#subtract(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#subtract(java.math.BigInteger)" [label="org.apache.commons.math.fraction$BigFraction#subtract(java.math.BigInteger)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$MathUtils#checkFinite(double[])" [label="org.apache.commons.math.util$MathUtils#checkFinite(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#getReducedFraction(int,int)" [label="org.apache.commons.math.fraction$BigFraction#getReducedFraction(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#multiply(org.apache.commons.math.fraction.BigFraction)" [label="org.apache.commons.math.fraction$BigFraction#multiply(org.apache.commons.math.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#divide(org.apache.commons.math.fraction.BigFraction)" [label="org.apache.commons.math.fraction$BigFraction#divide(org.apache.commons.math.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#subtract(org.apache.commons.math.fraction.BigFraction)" [label="org.apache.commons.math.fraction$BigFraction#subtract(org.apache.commons.math.fraction.BigFraction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#divide(long)" [label="org.apache.commons.math.fraction$BigFraction#divide(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#pow(int)" [label="org.apache.commons.math.fraction$BigFraction#pow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$MathUtils#copySign(short,short)" [label="org.apache.commons.math.util$MathUtils#copySign(short,short)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#multiply(long)" [label="org.apache.commons.math.fraction$BigFraction#multiply(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#add(long)" [label="org.apache.commons.math.fraction$BigFraction#add(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#subtract(int)" [label="org.apache.commons.math.fraction$BigFraction#subtract(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$MathUtils#copySign(byte,byte)" [label="org.apache.commons.math.util$MathUtils#copySign(byte,byte)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#abs()" [label="org.apache.commons.math.fraction$BigFraction#abs()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$MathUtils#copySign(int,int)" [label="org.apache.commons.math.util$MathUtils#copySign(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.util$MathUtils#copySign(long,long)" [label="org.apache.commons.math.util$MathUtils#copySign(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math.fraction$BigFraction#add(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#equals(java.lang.Object)";
  "org.apache.commons.math.fraction$BigFraction#add(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#add(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#equals(java.lang.Object)" -> "org.apache.commons.math.fraction$BigFraction#reduce()";
  "org.apache.commons.math.fraction$BigFraction#reduce()" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#divide(int)" -> "org.apache.commons.math.fraction$BigFraction#divide(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#divide(java.math.BigInteger)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#pow(java.math.BigInteger)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#reciprocal()" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math.fraction$BigFraction#doubleValue()";
  "org.apache.commons.math.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#percentageValue()" -> "org.apache.commons.math.fraction$BigFraction#multiply(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#multiply(java.math.BigInteger)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#pow(long)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math.fraction$BigFraction#add(java.math.BigInteger)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#add(int)" -> "org.apache.commons.math.fraction$BigFraction#add(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#multiply(int)" -> "org.apache.commons.math.fraction$BigFraction#multiply(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#negate()" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#subtract(long)" -> "org.apache.commons.math.fraction$BigFraction#subtract(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#subtract(java.math.BigInteger)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#getReducedFraction(int,int)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#multiply(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#multiply(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#divide(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#multiply(org.apache.commons.math.fraction.BigFraction)";
  "org.apache.commons.math.fraction$BigFraction#divide(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#reciprocal()";
  "org.apache.commons.math.fraction$BigFraction#divide(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#subtract(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#subtract(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#subtract(org.apache.commons.math.fraction.BigFraction)" -> "org.apache.commons.math.fraction$BigFraction#equals(java.lang.Object)";
  "org.apache.commons.math.fraction$BigFraction#divide(long)" -> "org.apache.commons.math.fraction$BigFraction#divide(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#pow(int)" -> "org.apache.commons.math.fraction$BigFraction#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copySign(short,short)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#multiply(long)" -> "org.apache.commons.math.fraction$BigFraction#multiply(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#add(long)" -> "org.apache.commons.math.fraction$BigFraction#add(java.math.BigInteger)";
  "org.apache.commons.math.fraction$BigFraction#subtract(int)" -> "org.apache.commons.math.fraction$BigFraction#subtract(java.math.BigInteger)";
  "org.apache.commons.math.util$MathUtils#copySign(byte,byte)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.fraction$BigFraction#abs()" -> "org.apache.commons.math.fraction$BigFraction#negate()";
  "org.apache.commons.math.util$MathUtils#copySign(int,int)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
  "org.apache.commons.math.util$MathUtils#copySign(long,long)" -> "org.apache.commons.math.exception.util$LocalizedFormats#<clinit>()";
}
