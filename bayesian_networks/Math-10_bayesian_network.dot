digraph G {
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#min(int,int)" [label="org.apache.commons.math3.util$FastMath#min(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,int)" [label="org.apache.commons.math3.util$FastMath#pow(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#<clinit>()" [label="org.apache.commons.math3.util$FastMath#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sqrt(double)" [label="org.apache.commons.math3.util$FastMath#sqrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acos(double)" [label="org.apache.commons.math3.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math3.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(double,double)" [label="org.apache.commons.math3.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double)" [label="org.apache.commons.math3.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double[])" [label="org.apache.commons.math3.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math3.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanh(double)" [label="org.apache.commons.math3.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math3.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math3.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asin(double)" [label="org.apache.commons.math3.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log1p(double)" [label="org.apache.commons.math3.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sin(double)" [label="org.apache.commons.math3.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polyCosine(double)" [label="org.apache.commons.math3.util$FastMath#polyCosine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polySine(double)" [label="org.apache.commons.math3.util$FastMath#polySine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getK()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getK()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math3.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math3.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double)" [label="org.apache.commons.math3.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosh(double)" [label="org.apache.commons.math3.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinh(double)" [label="org.apache.commons.math3.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tan(double)" [label="org.apache.commons.math3.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cbrt(double)" [label="org.apache.commons.math3.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double)" [label="org.apache.commons.math3.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#rint(double)" [label="org.apache.commons.math3.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#floor(double)" [label="org.apache.commons.math3.util$FastMath#floor(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double)" [label="org.apache.commons.math3.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" [label="org.apache.commons.math3.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cos(double)" [label="org.apache.commons.math3.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log10(double)" [label="org.apache.commons.math3.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(double)" [label="org.apache.commons.math3.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atanh(double)" [label="org.apache.commons.math3.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double)" [label="org.apache.commons.math3.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(double)" [label="org.apache.commons.math3.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math3.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asinh(double)" [label="org.apache.commons.math3.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,double)" [label="org.apache.commons.math3.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#scalb(double,int)" [label="org.apache.commons.math3.util$FastMath#scalb(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(float)" [label="org.apache.commons.math3.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ceil(double)" [label="org.apache.commons.math3.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(double)" [label="org.apache.commons.math3.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(double)" [label="org.apache.commons.math3.util$FastMath#abs(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#signum(double)" [label="org.apache.commons.math3.util$FastMath#signum(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(int,int)" [label="org.apache.commons.math3.util$FastMath#max(int,int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" [label="org.apache.commons.math3.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(double)" [label="org.apache.commons.math3.util$FastMath#getExponent(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toRadians(double)" [label="org.apache.commons.math3.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acosh(double)" [label="org.apache.commons.math3.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(float)" [label="org.apache.commons.math3.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(float)" [label="org.apache.commons.math3.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" [label="org.apache.commons.math3.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(float)" [label="org.apache.commons.math3.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#tanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#tan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#expm1(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log10(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#atanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#asinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#asinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#signum(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#acosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#toRadians(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log10(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#acosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#toDegrees(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
}
