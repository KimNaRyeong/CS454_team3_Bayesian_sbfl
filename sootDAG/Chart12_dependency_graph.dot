digraph G {
  "org.jfree.chart$util.StrokeList#clone()" -> "java.text.Normalizer$Form#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "com.sun.org$apache.xalan.internal.utils.XMLSecurityPropertyManager$Property#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.lang.reflect$Constructor#getExceptionTypes()";
  "org.jfree.chart$util.StrokeList#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#setColorMap(char[])";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.security.cert$X509CertSelector#cloneAndCheckNames(java.util.Collection)";
  "org.jfree.chart$util.StrokeList#clone()" -> "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$util.StrokeList#clone()" -> "javax.imageio.spi$ImageWriterSpi#<init(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.Class[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])";
  "org.jfree.chart$util.StrokeList#clone()" -> "javax.print.attribute$standard.PrintQuality#getEnumValueTable()";
  "org.jfree.chart$util.StrokeList#clone()" -> "javax.print.attribute$standard.MediaTray#getEnumValueTable()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.security.cert$X509CertSelector#setSubjectPublicKey(byte[])";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.lang.reflect$Method#getParameterTypes()";
  "org.jfree.chart$util.StrokeList#clone()" -> "sun.security.util$NamedCurve#getEncoded()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.lang.reflect$Proxy#getProxyConstructor(java.lang.Class,java.lang.ClassLoader,java.lang.Class[])";
  "org.jfree.chart$util.StrokeList#clone()" -> "jdk.xml.internal$JdkProperty$ImplPropMap#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageWriteParam#getCompressionQualityValues()";
  "org.jfree.chart$util.StrokeList#clone()" -> "javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator$Type#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.security.CodeSource#<init(java.net.URL,java.security.CodeSigner[])";
  "org.jfree.chart$util.StrokeList#clone()" -> "sun.security.util$BitArray#<init(sun.security.util.BitArray)";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.security.cert$X509CertSelector#getKeyUsage()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.security.Provider$OPType#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "org.jfree.chart$annotations.XYPolygonAnnotation#getPolygonCoordinates()";
  "org.jfree.chart$util.StrokeList#clone()" -> "XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$util.StrokeList#clone()" -> "sun.invoke.util$Wrapper#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#setSourceBands(int[])";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.awt.image$DataBuffer#getOffsets()";
  "org.jfree.chart$util.StrokeList#clone()" -> "sun.security.x509$X509CertImpl#getEncoded()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.nio.file$attribute.AclEntryFlag#values()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.nio.channels$spi.AbstractSelectableChannel#implCloseChannel()";
  "org.jfree.chart$util.StrokeList#clone()" -> "sun.security.x509$X509Key#getEncoded()";
  "org.jfree.chart$util.StrokeList#clone()" -> "java.util.IdentityHashMap#clone()";
  "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[])";
  "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint)" -> "XYPolygonAnnotation#<init(double[])";
  "org.jfree.chart$annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint)" -> "annotations.XYPolygonAnnotation#<init(double[])";
  "java.util.IdentityHashMap#clone()" -> "org.jfree.chart$plot.ThermometerPlot#clone()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.security.cert$X509CRLSelector#cloneAndCheckIssuerNames(java.util.Collection)";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.util.Locale$IsoCountryCode#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.awt.Component$BaselineResizeBehavior#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "sun.reflect.generics$repository.ConstructorRepository#getExceptionTypes()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "sun.security.x509$IPAddressName#getBytes()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "jdk.internal.math$FDBigInteger#leftInplaceSub(jdk.internal.math.FDBigInteger)";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "sun.nio.fs$AbstractPoller$RequestType#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "jdk.internal.jimage$decompressor.StringSharingDecompressor#getSizes()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.awt.Taskbar$Feature#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.awt.MultipleGradientPaint$CycleMethod#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.util.concurrent$CopyOnWriteArrayList#toArray()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.time.temporal$ChronoUnit#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageWriteParam#getQTables()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.lang.constant$DynamicConstantDesc#bootstrapArgs()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.security.spec$EncodedKeySpec#getEncoded()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.util.concurrent$CompletableFuture#anyOf(java.util.concurrent.CompletableFuture[])";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "sun.util.logging$PlatformLogger$Level#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLErrorReporter#getRecognizedFeatures()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.awt.image$SinglePixelPackedSampleModel#<init(int,int,int,int,int[])";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.util.stream$StreamSpliterators$UnorderedSliceSpliterator$PermitStatus#values()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "sun.net.www$protocol.jar.URLJarFile$URLJarFileEntry#getCertificates()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.net.Inet6Address#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "java.net.Inet6Address#getAddress()";
  "org.jfree.chart$plot.ThermometerPlot#clone()" -> "sun.security.provider$DigestBase#clone()";
  "sun.security.provider$DigestBase#clone()" -> "org.jfree.data$general.SubSeriesDataset#getMap()";
  "sun.security.provider$DigestBase#clone()" -> "org.jfree.chart$plot.CompassPlot#clone()";
  "org.jfree.data$general.SubSeriesDataset#getMap()" -> "org.jfree.data$general.CombinedDataset#getMap()";
  "org.jfree.data$general.CombinedDataset#getMap()" -> "CombinedDataset#getMap()";
  "org.jfree.data$general.CombinedDataset#getMap()" -> "general.CombinedDataset#getMap()";
  "org.jfree.chart$plot.CompassPlot#clone()" -> "sun.awt.image$ByteInterleavedRaster#getDataOffsets()";
  "org.jfree.chart$plot.CompassPlot#clone()" -> "java.util.stream$StreamOpFlag#values()";
  "org.jfree.chart$plot.CompassPlot#clone()" -> "java.util.stream$StreamShape#values()";
  "org.jfree.chart$plot.CompassPlot#clone()" -> "java.math.BigInteger#getRadixConversionCache(int,int)";
  "org.jfree.chart$plot.CompassPlot#clone()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "jdk.internal.icu$text.UnicodeSet$SpanCondition#values()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "javax.print.attribute$standard.JobSheets#getEnumValueTable()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "category.ScatterRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "category.LineAndShapeRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "AreaRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "renderer.category.ScatterRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "org.jfree.chart$renderer.category.ScatterRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "org.jfree.chart$renderer.category.AreaRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "renderer.category.LineAndShapeRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "ScatterRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "category.AreaRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "renderer.category.AreaRenderer#clone()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#clone()" -> "LineAndShapeRenderer#clone()";
  "category.ScatterRenderer#clone()" -> "org.jfree.chart$plot.XYPlot#clone()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.lang.System$Logger$Level#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.util.stream$Collector$Characteristics#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "javax.imageio.ImageReadParam#getDestinationBands()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "com.sun.imageio$plugins.jpeg.COMMarkerSegment#getNativeNode()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.lang.invoke$VarHandle$AccessType#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.sql.RowIdLifetime#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "sun.security.x509$X509CertImpl#get(java.lang.String)";
  "org.jfree.chart$plot.XYPlot#clone()" -> "com.sun.imageio$plugins.png.PNGMetadata#getNativeTree()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.beans.EventSetDescriptor#<init(java.lang.String,java.lang.Class,java.beans.MethodDescriptor[],java.lang.reflect.Method,java.lang.reflect.Method)";
  "org.jfree.chart$plot.XYPlot#clone()" -> "com.sun.org$apache.xerces.internal.utils.XMLLimitAnalyzer$NameMap#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "sun.security.x509$AlgorithmId#getEncodedParams()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "com.sun.org$apache.xerces.internal.xinclude.XIncludeHandler#getRecognizedProperties()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "javax.xml.catalog$CatalogFeatures$State#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.lang.invoke$MethodTypeForm#<init(java.lang.invoke.MethodType)";
  "org.jfree.chart$plot.XYPlot#clone()" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator#getRecognizedFeatures()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.lang.invoke$MethodHandles$Lookup#defineHiddenClass(byte[],boolean,java.lang.invoke.MethodHandles$Lookup$ClassOption[])";
  "org.jfree.chart$plot.XYPlot#clone()" -> "sun.security.util$ObjectIdentifier#pack(byte[],int,int,int,int)";
  "org.jfree.chart$plot.XYPlot#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageReadParam#getQTables()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "sun.invoke.util$BytecodeName#unparseBytecodeName(java.lang.Object[])";
  "org.jfree.chart$plot.XYPlot#clone()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLDTDValidator#getRecognizedProperties()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "javax.swing.JTable$PrintMode#values()";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.security.spec$EncodedKeySpec#<init(byte[],java.lang.String)";
  "org.jfree.chart$plot.XYPlot#clone()" -> "java.util.BitSet#clone()";
  "java.util.BitSet#clone()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "sun.awt.image$IntegerInterleavedRaster#getDataOffsets()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "javax.imageio.ImageIO$SpiInfo#values()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "java.awt.image$DataBufferInt#<init(int[][],int,int[])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "java.lang.invoke$MethodHandles$Lookup#defineHiddenClassWithClassData(byte[],java.lang.Object,boolean,java.lang.invoke.MethodHandles$Lookup$ClassOption[])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "java.lang.invoke$LambdaForm$Kind#values()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "javax.imageio.spi$ImageWriterSpi#getImageReaderSpiNames()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "java.security.CodeSource#getCertificates()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "sun.awt.windows$EHTMLReadMode#values()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "java.time.temporal$ChronoField#values()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "sun.font.StandardGlyphVector#setGlyphPositions(float[])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "com.sun.beans$finder.InstanceFinder#getPackages()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "java.lang.ProcessBuilder$Redirect$Type#values()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#clone()" -> "plot.XYPlot#clone()";
  "plot.XYPlot#clone()" -> "org.jfree.chart$block.AbstractBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "java.nio.file$Files#readString(java.nio.file.Path,java.nio.charset.Charset)";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "java.time.Month#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "java.time.temporal$IsoFields$Field#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "com.sun.org$apache.xerces.internal.utils.XMLSecurityPropertyManager$Property#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "com.sun.org$apache.bcel.internal.generic.MethodGen#getArgumentNames()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "sun.awt.image$ByteComponentRaster#getDataOffsets()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "com.sun.imageio$plugins.tiff.TIFFIFD#getShallowClone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "java.lang.ProcessBuilder#start(java.lang.ProcessBuilder$Redirect[])";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "java.security.cert$CRLReason#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "java.util.Formatter$BigDecimalLayoutForm#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "javax.swing.text$PlainView$FPMethodArgs#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "sun.nio.fs$AbstractWatchKey$State#values()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "LabelBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "org.jfree.chart$block.EmptyBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "block.EmptyBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "BlockContainer#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "Title#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "org.jfree.chart$title.Title#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "block.BlockContainer#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "org.jfree.chart$block.LabelBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "block.LabelBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "EmptyBlock#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "title.Title#clone()";
  "org.jfree.chart$block.AbstractBlock#clone()" -> "org.jfree.chart$block.BlockContainer#clone()";
  "LabelBlock#clone()" -> "org.jfree.data$xy.XYBarDataset#clone()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.beans.ChangeListenerMap#getListeners(java.lang.String)";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "javax.crypto.spec$PBEParameterSpec#getSalt()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.util.concurrent$CopyOnWriteArrayList#addAllAbsent(java.util.Collection)";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.lang.Throwable#setStackTrace(java.lang.StackTraceElement[])";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.awt.image$SinglePixelPackedSampleModel#getBitOffsets()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "javax.imageio.spi$ImageReaderSpi#<init(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.Class[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "javax.imageio.ImageReadParam#setDestinationBands(int[])";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.awt.image$DataBufferFloat#<init(float[][],int,int[])";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "sun.net.www$protocol.http.AuthScheme#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "javax.imageio.spi$ImageReaderWriterSpi#getExtraStreamMetadataFormatNames()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.lang.invoke$LambdaForm$BasicType#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "sun.font.EAttribute#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.lang.invoke$LambdaForm$Name#replaceNames(java.lang.invoke.LambdaForm$Name[],java.lang.invoke.LambdaForm$Name[],int,int)";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "sun.reflect.'annotation'$AnnotationInvocationHandler#cloneArray(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.lang.invoke$LambdaForm#normalize()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.time.chrono$IsoEra#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "com.sun.org$apache.xerces.internal.impl.xs.ElementPSVImpl#<init(boolean,com.sun.org.apache.xerces.internal.xs.ElementPSVI)";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageReadParam#setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[])";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "sun.security.util$DerValue#<init(byte,byte[])";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.util.Locale$Category#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "sun.security.x509$X509CertInfo#getEncodedInfo()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.security.CryptoPrimitive#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.util.EnumMap#clone()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "sun.util.locale$provider.JRELocaleProviderAdapter#getAvailableLocales()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "com.sun.beans$introspect.PropertyInfo$Name#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.nio.file$FileTreeWalker$EventType#values()";
  "org.jfree.data$xy.XYBarDataset#clone()" -> "java.text.CompactNumberFormat#clone()";
  "java.text.CompactNumberFormat#clone()" -> "org.jfree.chart$util.LogFormat#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "javax.imageio.spi$ImageReaderWriterSpi#getExtraImageMetadataFormatNames()";
  "org.jfree.chart$util.LogFormat#clone()" -> "javax.imageio.ImageWriter#getAvailableLocales()";
  "org.jfree.chart$util.LogFormat#clone()" -> "sun.security.x509$X509CRLImpl#getTBSCertList()";
  "org.jfree.chart$util.LogFormat#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageWriteParam#getCompressionQualityDescriptions()";
  "org.jfree.chart$util.LogFormat#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#beginDecoding()";
  "org.jfree.chart$util.LogFormat#clone()" -> "javax.print.attribute$standard.MediaTray#getStringTable()";
  "org.jfree.chart$util.LogFormat#clone()" -> "plot.MeterPlot#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "labels.AbstractPieItemLabelGenerator#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "java.text.SimpleDateFormat#initialize(java.util.Locale)";
  "org.jfree.chart$util.LogFormat#clone()" -> "util.RelativeDateFormat#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "NumberAxis#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "RelativeDateFormat#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "axis.NumberAxis#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "util.LogFormat#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "LogFormat#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "AbstractPieItemLabelGenerator#clone()";
  "org.jfree.chart$util.LogFormat#clone()" -> "java.text.DateFormat#clone()";
  "plot.MeterPlot#clone()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "javax.crypto.spec$SecretKeySpec#<init(byte[],java.lang.String)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "javax.imageio.ImageTypeSpecifier$Indexed#<init(byte[],byte[],byte[],byte[],int,int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "com.sun.imageio$plugins.jpeg.JPEGImageWriter#getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam,javax.imageio.metadata.IIOMetadata,javax.imageio.metadata.IIOMetadata)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.WindItemRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.CandlestickRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.XYStepAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "HighLowRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "CandlestickRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "XYStepAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.VectorRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.HighLowRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.YIntervalRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "YIntervalRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.CandlestickRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.XYBubbleRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.VectorRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.XYBubbleRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "XYBubbleRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.HighLowRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.XYBubbleRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.XYDotRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.HighLowRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.XYBoxAndWhiskerRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "VectorRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.YIntervalRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.XYStepAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.WindItemRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "XYBoxAndWhiskerRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.YIntervalRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "org.jfree.chart$renderer.xy.WindItemRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.XYDotRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.XYBoxAndWhiskerRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "XYDotRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "WindItemRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "renderer.xy.XYDotRenderer#clone()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#clone()" -> "xy.VectorRenderer#clone()";
  "renderer.xy.WindItemRenderer#clone()" -> "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#clone()";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "xy.XYBarRenderer#clone()";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "org.jfree.chart$plot.Plot#clone()";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "ShapeUtilities#clone(java.awt.Shape)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "ObjectUtilities#deepClone(java.util.Collection)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "util.ShapeUtilities#clone(java.awt.Shape)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "plot.Plot#clone()";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "util.ObjectUtilities#deepClone(java.util.Collection)";
  "org.jfree.chart$util.ObjectUtilities#clone(java.lang.Object)" -> "Plot#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.security.spec$ECFieldF2m#<init(int,int[])";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "DefaultIntervalCategoryDataset#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.net.www$protocol.http.AuthCacheValue$Type#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "javax.xml.catalog$BaseEntry$CatalogEntryType#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.security.x509$KeyIdentifier#<init(byte[])";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLErrorReporter#getRecognizedProperties()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.security.spec$EllipticCurve#getSeed()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.security.x509$X509CertImpl#encode(java.io.OutputStream)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.util.JumboEnumSet#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.lang.reflect$AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[],boolean)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.security.cert$PolicyQualifierInfo#getPolicyQualifier()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.reflect.generics$repository.ConstructorRepository#getParameterTypes()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.imageio$plugins.bmp.BMPCompressionTypes#getCompressionTypes()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.reflect.generics$reflectiveObjects.ParameterizedTypeImpl#getActualTypeArguments()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.awt.image$DataBufferShort#getBankData()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.security.x509$X509CertImpl#getSignature()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.lang.invoke$MethodTypeForm#canonicalizeAll(java.lang.Class[],int)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.lang.invoke$MethodType#parameterArray()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "jdk.internal.math$FDBigInteger#rightInplaceSub(jdk.internal.math.FDBigInteger)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.imageio$plugins.jpeg.MarkerSegment#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.net.ProgressSource$State#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "jdk.xml.internal$XMLSecurityManager$Limit#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.lang.constant$DirectMethodHandleDesc$Kind#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.awt.image$ColorModel#getComponentSize()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.imageio$plugins.tiff.TIFFImageMetadata#getStandardDimensionNode()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "javax.security.auth$callback.PasswordCallback#setPassword(char[])";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "javax.imageio.spi$ImageReaderWriterSpi#getMIMETypes()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaLoader#getRecognizedProperties()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.org$apache.xerces.internal.utils.XMLSecurityManager$Limit#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "sun.net.www$protocol.http.HttpURLConnection$TunnelState#values()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.imageio$plugins.jpeg.SOFMarkerSegment#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "javax.swing.SortingFocusTraversalPolicy#legacySort(java.util.List,java.util.Comparator)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#setDestinationBands(int[])";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "com.sun.beans$WildcardTypeImpl#getLowerBounds()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "javax.crypto.spec$PBEParameterSpec#<init(byte[],int)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "java.text.ChoiceFormat#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "xy.ClusteredXYBarRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "ClusteredXYBarRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#clone()" -> "renderer.xy.ClusteredXYBarRenderer#clone()";
  "java.text.ChoiceFormat#clone()" -> "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()";
  "java.text.ChoiceFormat#clone()" -> "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()";
  "java.text.ChoiceFormat#clone()" -> "org.jfree.chart$plot.MeterPlot#clone()";
  "java.text.ChoiceFormat#clone()" -> "org.jfree.chart$util.RelativeDateFormat#clone()";
  "java.text.ChoiceFormat#clone()" -> "org.jfree.chart$axis.NumberAxis#clone()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.event$FocusEvent$Cause#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLDTDScannerImpl#getRecognizedFeatures()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$DataBufferUShort#<init(short[][],int)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.util.concurrent$CopyOnWriteArrayList#sortRange(java.util.Comparator,int,int)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.text.MessageFormat#clone()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$DataBuffer#<init(sun.java2d.StateTrackable$State,int,int,int,int[])";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.lang.Character$UnicodeScript#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaLoader#getRecognizedFeatures()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.time.format$TextStyle#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.lang.invoke$LambdaForm$Name#cloneWithIndex(int)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$ComponentSampleModel#getBankIndices()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "sun.security.x509$KeyUsageExtension#getBits()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "sun.font.StandardGlyphVector#clone()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.beans.EventSetDescriptor#getListenerMethodDescriptors()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "javax.imageio.spi$ImageReaderWriterSpi#getFormatNames()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "javax.swing.LayoutStyle$ComponentPlacement#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.security.cert$X509CertSelector#setNameConstraints(byte[])";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "jdk.internal.jmod$JmodFile$Section#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "ObjectUtilities#clone(java.lang.Object)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.util.jar$JarFile$JarFileEntry#getCertificates()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.lang.Throwable#getStackTrace()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.security.cert$X509CertSelector#setAuthorityKeyIdentifier(byte[])";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.security.cert$X509CertSelector#getNameConstraints()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.datatransfer$StringSelection#getTransferDataFlavors()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$DataBufferUShort#<init(short[][],int,int[])";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.net.Proxy$Type#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "javax.crypto.spec$PBEParameterSpec#<init(byte[],int,java.security.spec.AlgorithmParameterSpec)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "com.sun.imageio$plugins.png.PNGMetadata#initialize(javax.imageio.ImageTypeSpecifier,int)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.font$NumericShaper$Range#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$ComponentSampleModel#getBandOffsets()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "javax.swing.JFileChooser#getSelectedFiles()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$ComponentSampleModel#<init(int,int,int,int,int,int[])";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "jdk.xml.internal$XMLSecurityManager$Processor#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.awt.image$SinglePixelPackedSampleModel#getBitMasks()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "sun.security.util$DomainName$Rule$Type#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "sun.font.StandardGlyphVector$GlyphTransformInfo#<init(sun.font.StandardGlyphVector,sun.font.StandardGlyphVector$GlyphTransformInfo)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "com.sun.beans$editors.EnumEditor#getTags()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.lang.invoke$VarHandle$AccessMode#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "javax.imageio.ImageWriteParam#getCompressionTypes()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "com.sun.org$apache.bcel.internal.generic.MethodGen#getArgumentTypes()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.net.Authenticator$RequestorType#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.time.zone$ZoneOffsetTransitionRule$TimeDefinition#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "com.sun.org$apache.xpath.internal.VariableStack#clone()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.lang.'annotation'$ElementType#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "java.time.DayOfWeek#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "javax.swing.DropMode#values()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#clone()" -> "ThermometerPlot#clone()";
  "ThermometerPlot#clone()" -> "org.jfree.data$KeyedObject#clone()";
  "org.jfree.data$KeyedObject#clone()" -> "javax.imageio.metadata$IIOMetadata#<init(boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])";
  "org.jfree.data$KeyedObject#clone()" -> "javax.print.attribute$standard.PrinterStateReason#getEnumValueTable()";
  "org.jfree.data$KeyedObject#clone()" -> "javax.swing.SwingWorker$StateValue#values()";
  "org.jfree.data$KeyedObject#clone()" -> "com.sun.beans$finder.InstanceFinder#<init(java.lang.Class,boolean,java.lang.String,java.lang.String[])";
  "org.jfree.data$KeyedObject#clone()" -> "java.time.chrono$HijrahEra#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.lang.StackWalker$Option#values()";
  "org.jfree.data$KeyedObject#clone()" -> "sun.security.x509$X509CRLImpl#getEncoded()";
  "org.jfree.data$KeyedObject#clone()" -> "java.util.stream$MatchOps$MatchKind#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.nio.file$attribute.AclEntryPermission#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.lang.module$ModuleDescriptor$Requires$Modifier#values()";
  "org.jfree.data$KeyedObject#clone()" -> "sun.security.provider$PolicyFile$SelfPermission#<init(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])";
  "org.jfree.data$KeyedObject#clone()" -> "sun.text.IntHashtable#clone()";
  "org.jfree.data$KeyedObject#clone()" -> "java.awt.FileDialog#getFiles()";
  "org.jfree.data$KeyedObject#clone()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLDTDValidator#getRecognizedFeatures()";
  "org.jfree.data$KeyedObject#clone()" -> "java.awt.image$IndexColorModel#getComponentSize()";
  "org.jfree.data$KeyedObject#clone()" -> "java.lang.module$ModuleDescriptor$Exports$Modifier#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.io.File$PathStatus#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.awt.image$DataBufferByte#<init(byte[][],int,int[])";
  "org.jfree.data$KeyedObject#clone()" -> "sun.security.x509$X509Key#encode()";
  "org.jfree.data$KeyedObject#clone()" -> "java.nio.file$StandardOpenOption#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.lang.invoke$LambdaForm#<init(int,java.lang.invoke.LambdaForm$Name[],int,boolean,java.lang.invoke.MethodHandle,java.lang.invoke.LambdaForm$Kind)";
  "org.jfree.data$KeyedObject#clone()" -> "javax.imageio.spi$ImageReaderWriterSpi#getFileSuffixes()";
  "org.jfree.data$KeyedObject#clone()" -> "java.math.BigInteger#oddModPow(java.math.BigInteger,java.math.BigInteger)";
  "org.jfree.data$KeyedObject#clone()" -> "sun.security.util$RegisteredDomain$Type#values()";
  "org.jfree.data$KeyedObject#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#setSampleFormat(int[])";
  "org.jfree.data$KeyedObject#clone()" -> "com.sun.imageio$plugins.tiff.TIFFImageWriter#setupMetadata(java.awt.image.ColorModel,java.awt.image.SampleModel,int,int)";
  "org.jfree.data$KeyedObject#clone()" -> "java.util.regex$Pattern$Qtype#values()";
  "org.jfree.data$KeyedObject#clone()" -> "sun.security.x509$X509CRLImpl#derEncode(java.io.OutputStream)";
  "org.jfree.data$KeyedObject#clone()" -> "jdk.xml.internal$XMLSecurityManager$NameMap#values()";
  "org.jfree.data$KeyedObject#clone()" -> "java.lang.reflect$Executable#getParameters()";
  "org.jfree.data$KeyedObject#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl#getRecognizedFeatures()";
  "org.jfree.data$KeyedObject#clone()" -> "category.AbstractCategoryItemRenderer#clone()";
  "org.jfree.data$KeyedObject#clone()" -> "org.jfree.data$KeyedObjects#clone()";
  "org.jfree.data$KeyedObject#clone()" -> "KeyedObjects#clone()";
  "category.AbstractCategoryItemRenderer#clone()" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "com.sun.beans$finder.InstanceFinder#setPackages(java.lang.String[])";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "java.nio.file$FileVisitOption#values()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "java.awt.GraphicsDevice$WindowTranslucency#values()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "java.lang.constant$MethodTypeDescImpl#changeParameterType(int,java.lang.constant.ClassDesc)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#setExtraSamples(int[])";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "java.security.UnresolvedPermission#getUnresolvedCerts()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clone()" -> "plot.ThermometerPlot#clone()";
  "plot.ThermometerPlot#clone()" -> "org.jfree.chart$ChartRenderingInfo#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$X509CertSelector#getSubjectKeyIdentifier()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.invoke$MethodHandles#filterRepeatedArgument(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.awt.OSInfo$OSType#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.image$RescaleOp#getOffsets(float[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.imageio$plugins.png.PNGImageWriteParam#getCompressionQualityDescriptions()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.crypto.spec$RC2ParameterSpec#getIV()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$X509CRLSelector#addIssuerName(byte[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.spi$ImageReaderSpi#getInputTypes()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.util$DerValue#<init(byte[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.swing.SortOrder#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.nio.file$LinkOption#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.invoke$MethodType#asSpreaderType(java.lang.Class,int,int)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageReadParam#getDCHuffmanTables()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.awt.image$ShortBandedRaster#getDataOffsets()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "category.DefaultIntervalCategoryDataset#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xalan.internal.utils.FeaturePropertyBase$State#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.Class#getEnumConstants()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$PKIXRevocationChecker#setOcspResponses(java.util.Map)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.invoke$MethodHandles$Lookup$ClassOption#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.KeyStore$PasswordProtection#<init(char[],java.lang.String,java.security.spec.AlgorithmParameterSpec)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.TrayIcon$MessageType#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$PKIXRevocationChecker#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.time.temporal$JulianFields$Field#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.pkcs$PKCS7#getCRLs()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.swing.JFileChooser#setSelectedFiles(java.io.File[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.EnumMap#<init(java.util.Map)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.imageio$plugins.jpeg.JFIFMarkerSegment$ICCMarkerSegment#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.xml.catalog$CatalogFeatures$Feature#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.validator$CADistrustPolicy#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.ImageReader#getAvailableLocales()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$TrustAnchor#setNameConstraints(byte[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.invoke$VarHandle$VarHandleDesc$Kind#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.Comparators$NaturalOrderComparator#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "XYPolygonAnnotation#getPolygonCoordinates()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.beans$util.Cache$Kind#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.Vector#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator#getRecognizedProperties()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageWriteParam#getDCHuffmanTables()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.EnumMap#<init(java.util.EnumMap)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.nio.file$attribute.PosixFilePermission#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.io.ObjectStreamClass#getFields(boolean)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.print.attribute$standard.PrinterStateReason#getStringTable()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.StackStreamFactory$WalkerState#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.ImageTypeSpecifier$Interleaved#<init(java.awt.color.ColorSpace,int[],int,boolean,boolean)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.awt.datatransfer$ClipboardTransferable#getTransferDataFlavors()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.swing.UIDefaults$ProxyLazyValue#<init(java.lang.String,java.lang.String,java.lang.Object[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.reflect.generics$repository.GenericDeclRepository#getTypeParameters()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.EventFilter$FilterAction#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.time.temporal$IsoFields$Unit#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$CertPathValidatorException$BasicReason#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.timestamp$TSRequest#getHashedMessage()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.util$DisabledAlgorithmConstraints$Constraint$Operator#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.jar$JarFile$JarFileEntry#getCodeSigners()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.concurrent$TimeUnit#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLDTDLoader#getRecognizedProperties()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.crypto.SealedObject#<init(javax.crypto.SealedObject)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xerces.internal.utils.XMLSecurityPropertyManager$State#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.spi$ImageWriterSpi#getOutputTypes()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.Thread$State#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "jdk.internal.reflect$ConstantPool$Tag#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.imageio$plugins.png.PNGImageWriteParam#getCompressionQualityValues()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.util$KnownOIDs#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.java2d.pipe$hw.ExtendedBufferCapabilities$VSyncType#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.reflect.generics$repository.ClassRepository#getSuperInterfaces()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.print.attribute$standard.JobSheets#getStringTable()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.x509$X500Name#getEncoded()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xerces.internal.utils.XMLSecurityManager$NameMap#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "jdk.xml.internal$XMLLimitAnalyzer$NameMap#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.font.LayoutPathImpl$EndType#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.zip$ZipEntry#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$PKIXReason#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.image$DataBufferUShort#getBankData()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.MultipleGradientPaint$ColorSpaceType#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.List#getSelectedIndexes()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "jdk.internal.module$ModulePath#<init(java.lang.Runtime$Version,boolean,jdk.internal.module.ModulePatcher,java.nio.file.Path[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.provider$SHA3#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.KeyStore$PasswordProtection#<init(char[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.constant$DynamicConstantDesc#<init(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.cert$PolicyQualifierInfo#getEncoded()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.Desktop$Action#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.font.FontLineMetrics#getBaselineOffsets()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.x509$X509CertImpl#cloneAltNames(java.util.Collection)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLDTDProcessor#getRecognizedFeatures()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.nio.file$AccessMode#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl#getRecognizedProperties()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "annotations.XYPolygonAnnotation#getPolygonCoordinates()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.font.ExtendedTextSourceLabel#applyJustificationDeltas(float[],int,boolean[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.imageio.plugins$tiff.TIFFField#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.awt.image$IntegerComponentRaster#getDataOffsets()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.module$ModuleDescriptor$Opens$Modifier#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.invoke$SerializedLambda#<init(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.image$DataBufferDouble#<init(double[][],int)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.color$ICC_Profile#getData(int)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.KeyStore$PrivateKeyEntry#<init(java.security.PrivateKey,java.security.cert.Certificate[],java.util.Set)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.xml.catalog$GroupEntry$PreferType#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.spec$ECFieldF2m#getMidTermsOfReductionPolynomial()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "com.sun.imageio$plugins.jpeg.DQTMarkerSegment$Qtable#clone()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.security.CodeSource#<init(java.net.URL,java.security.cert.Certificate[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.image$DataBufferInt#getBankData()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.BasicStroke#getDashArray()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.lang.invoke$LambdaForm$Name#replaceName(java.lang.invoke.LambdaForm$Name,java.lang.invoke.LambdaForm$Name)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "jdk.xml.internal$JdkXmlFeatures$XmlFeature#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.net.ssl$SNIServerName#<init(int,byte[])";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "jdk.internal.icu$text.UnicodeSet#set(jdk.internal.icu.text.UnicodeSet)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "sun.security.x509$X509CRLEntryImpl#getEncoded()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.awt.Window$Type#values()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.jar$JarEntry#getCodeSigners()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.concurrent$CopyOnWriteArrayList#replaceAllRange(java.util.function.UnaryOperator,int,int)";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.crypto.spec$RC5ParameterSpec#getIV()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "javax.print.attribute$standard.MediaSizeName#getStringTable()";
  "org.jfree.chart$ChartRenderingInfo#clone()" -> "java.util.concurrent$CopyOnWriteArrayList#set(int,java.lang.Object)";
  "java.awt.BasicStroke#getDashArray()" -> "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "Plot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "axis.CyclicNumberAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.XYPolygonAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "dial.DialValueIndicator#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.RingPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.XYBoxAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "PiePlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.DialValueIndicator#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "renderer.AbstractRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.MeterInterval#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.XYPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "dial.StandardDialScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "AbstractRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.XYPointerAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.dial.DialValueIndicator#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.Marker#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "StandardDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "JFreeChart#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.ThermometerPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "dial.DialCap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.dial.StandardDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "MeterInterval#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.dial.DialPointer$Pin#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.PiePlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.SpiderWebPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$LegendItem#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "XYPointerAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.PeriodAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "StatisticalBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "axis.Axis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$title.LegendGraphic#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "ThermometerPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "RingPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "axis.PeriodAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "LegendGraphic#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.XYPolygonAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.AbstractRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.CategoryLineAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "MinMaxCategoryRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$StrokeMap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "xy.StackedXYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "dial.StandardDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$util.StrokeList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$block.LineBorder#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$needle.MeterNeedle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "XYPolygonAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.StandardDialScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.PolarPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.MeterInterval#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.dial.DialCap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "category.StatisticalBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$title.PaintScaleLegend#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "CategoryPointerAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.ThermometerPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "StrokeList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.CategoryPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "util.StrokeList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "XYBoxAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "category.MinMaxCategoryRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.Plot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.XYLineAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.ArcDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.PiePlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "title.PaintScaleLegend#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "LineBorder#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "XYPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.XYLineAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "dial.ArcDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "MeterNeedle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "CyclicNumberAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.dial.ArcDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "Marker#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.XYPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "CategoryLineAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.XYShapeAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "FastScatterPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.XYBoxAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.FastScatterPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "renderer.category.StatisticalBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "title.LegendGraphic#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "DialValueIndicator#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "renderer.xy.StackedXYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$text.TextBox#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "StrokeMap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.RingPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "CategoryPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "DialCap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.StandardDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.Marker#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "renderer.category.MinMaxCategoryRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.CategoryPointerAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "LegendItem#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "PeriodAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "PeriodAxisLabelInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "annotations.XYShapeAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "dial.DialPointer$Pin#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.CyclicNumberAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "block.LineBorder#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "XYShapeAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "TextBox#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.Axis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.PolarPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.FastScatterPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.Plot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.SpiderWebPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "Axis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "StandardDialScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.XYPointerAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "StackedXYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "SpiderWebPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "PaintScaleLegend#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "DialPointer$Pin#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.dial.StandardDialScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "text.TextBox#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "PolarPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "axis.PeriodAxisLabelInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.DialCap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "needle.MeterNeedle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "XYLineAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "ArcDialFrame#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" -> "plot.CategoryPlot#writeObject(java.io.ObjectOutputStream)";
  "java.util.concurrent$CopyOnWriteArrayList#set(int,java.lang.Object)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#clone()";
  "java.util.concurrent$CopyOnWriteArrayList#set(int,java.lang.Object)" -> "org.jfree.chart$renderer.LookupPaintScale#add(double,java.awt.Paint)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "javax.swing.text$DefaultEditorKit#getActions()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.java2d.cmm$lcms.LCMSImageLayout$BandOrder#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.util.Vector#readObject(java.io.ObjectInputStream)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.nio.file$StandardCopyOption#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.security.ProtectionDomain#getPrincipals()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "javax.imageio.metadata$IIOMetadata#getExtraMetadataFormatNames()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.security.x509$X509CertImpl#derEncode(java.io.OutputStream)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.awt.desktop$UserSessionEvent$Reason#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.reflect.generics$reflectiveObjects.WildcardTypeImpl#getUpperBounds()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.org$apache.bcel.internal.generic.SWITCH#<init(int[],com.sun.org.apache.bcel.internal.generic.InstructionHandle[],com.sun.org.apache.bcel.internal.generic.InstructionHandle,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.nio.file$FileVisitResult#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLScanner$NameType#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.security.cert$X509CertSelector#addPathToName(int,byte[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.imageio$plugins.jpeg.DHTMarkerSegment$Htable#clone()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.lang.module$ModuleDescriptor$Modifier#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.awt.Win32GraphicsDevice#getConfigurations()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.org$apache.xerces.internal.xinclude.XIncludeHandler#getRecognizedFeatures()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "javax.crypto.spec$SecretKeySpec#getEncoded()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.util.jar$JarEntry#getCertificates()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "jdk.internal.logger$BootstrapLogger$LoggingBackend#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.util.stream$StreamOpFlag$Type#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.time.format$ResolverStyle#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.net.PasswordAuthentication#<init(java.lang.String,char[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.java2d.d3d$D3DGraphicsDevice#getConfigurations()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.util.locale$provider.LocaleProviderAdapter$Type#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.awt.image$DataBufferInt#<init(int[][],int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.beans.MethodDescriptor#getParameterDescriptors()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.security.rsa$RSAUtil$KeyType#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.security.UnresolvedPermission#<init(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.awt.image$RescaleOp#getScaleFactors(float[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.time.chrono$ThaiBuddhistEra#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.net.www$protocol.jar.URLJarFile$URLJarFileEntry#getCodeSigners()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "javax.print.attribute$standard.PrintQuality#getStringTable()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "jdk.internal.icu$util.CodePointTrie$Type#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.net.StandardProtocolFamily#values()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.security.x509$RDN#toRFC2253StringInternal(boolean,java.util.Map)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.util.Collections$CheckedCollection#checkedCopyOf(java.util.Collection)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.security.cert$X509CertSelector#setSubjectKeyIdentifier(byte[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "sun.security.x509$KeyIdentifier#getIdentifier()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.imageio$plugins.jpeg.SOSMarkerSegment#clone()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.lang.invoke$MethodHandleImpl#makePairwiseConvertByEditor(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLDTDProcessor#getRecognizedProperties()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.security.cert$X509CertSelector#addSubjectAlternativeName(int,byte[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "com.sun.org$apache.bcel.internal.generic.Select#clone()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.awt.image$DataBufferShort#<init(short[][],int,int[])";
  "org.jfree.data$xy.XYIntervalSeriesCollection#clone()" -> "java.awt.BasicStroke#<init(float,int,int,float,float[],float)";
  "java.awt.BasicStroke#<init(float,int,int,float,float[],float)" -> "org.jfree.chart$plot.CategoryPlot#<clinit()";
  "java.awt.BasicStroke#<init(float,int,int,float,float[],float)" -> "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)";
  "java.awt.BasicStroke#<init(float,int,int,float,float[],float)" -> "org.jfree.chart$plot.WaferMapPlot#<clinit()";
  "java.awt.BasicStroke#<init(float,int,int,float,float[],float)" -> "org.jfree.chart$plot.FastScatterPlot#<clinit()";
  "java.awt.BasicStroke#<init(float,int,int,float,float[],float)" -> "org.jfree.chart$plot.XYPlot#<clinit()";
  "java.awt.BasicStroke#<init(float,int,int,float,float[],float)" -> "org.jfree.chart$plot.PolarPlot#<clinit()";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "category.AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "renderer.category.AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "CategoryPlot#<clinit()";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$plot.CategoryPlot#getPlotType()";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "plot.CategoryPlot#<clinit()";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "ChartFactory#createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "category.AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "plot.CategoryPlot#getPlotType()";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "renderer.category.AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.CategoryPlot#<clinit()" -> "CategoryPlot#getPlotType()";
  "category.AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" -> "org.jfree.chart$plot.CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$plot.CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)" -> "org.jfree.chart$plot.CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)" -> "CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)" -> "plot.CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedRangeCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedRangeCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedDomainCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "plot.CombinedRangeCategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeScaledChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,int,int)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeScaledChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,int,int)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartPanel#print(java.awt.Graphics,java.awt.print.PageFormat,int)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "ChartPanel#paintComponent(java.awt.Graphics)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartPanel#paintComponent(java.awt.Graphics)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" -> "ChartPanel#print(java.awt.Graphics,java.awt.print.PageFormat,int)";
  "org.jfree.chart$ChartPanel#print(java.awt.Graphics,java.awt.print.PageFormat,int)" -> "sun.swing.PrintingStatus$NotificationPrintable#print(java.awt.Graphics,java.awt.print.PageFormat,int)";
  "org.jfree.chart$ChartPanel#print(java.awt.Graphics,java.awt.print.PageFormat,int)" -> "sun.print.RasterPrinterJob#printPage(java.awt.print.Pageable,int)";
  "org.jfree.chart$ChartPanel#print(java.awt.Graphics,java.awt.print.PageFormat,int)" -> "sun.awt.windows$WPathGraphics#redrawRegion(java.awt.geom.Rectangle2D,double,double,java.awt.Shape,java.awt.geom.AffineTransform)";
  "org.jfree.chart$ChartPanel#print(java.awt.Graphics,java.awt.print.PageFormat,int)" -> "javax.swing.JTable$ThreadSafePrintable$1#run()";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)" -> "XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.XYDrawableAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)" -> "JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$JFreeChart#createBufferedImage(int,int)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "JFreeChart#createBufferedImage(int,int)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" -> "servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" -> "ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" -> "org.jfree.chart$servlet.ServletUtilities#saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)" -> "org.jfree.chart$ChartPanel#doSaveAs()";
  "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)" -> "ChartPanel#doSaveAs()";
  "org.jfree.chart$ChartPanel#doSaveAs()" -> "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#doSaveAs()" -> "ChartPanel#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "java.awt.TextField#processActionEvent(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.JFileChooser#fireActionPerformed(java.lang.String)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.JComboBox#fireActionEvent()";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "java.awt.TrayIcon#processActionEvent(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "PolarChartPanel#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "java.awt.List#processActionEvent(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.AbstractButton#fireActionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.JTextField#fireActionPerformed()";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "java.awt.Button#processActionEvent(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "java.awt.MenuItem#processActionEvent(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.Timer#fireActionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.JComponent$ActionStandin#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "org.jfree.chart$PolarChartPanel#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$PolarChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "javax.swing.DefaultButtonModel#fireActionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$PolarChartPanel#actionPerformed(java.awt.event.ActionEvent)" -> "java.awt.AWTEventMulticaster#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" -> "org.jfree.chart$servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" -> "ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" -> "servlet.ServletUtilities#saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "ChartUtilities#saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartUtilities#saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)" -> "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,boolean,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)" -> "org.jfree.chart$ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)" -> "ChartUtilities#saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)";
  "org.jfree.chart$ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)" -> "ChartUtilities#writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,boolean,int)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$plot.MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)" -> "plot.MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)" -> "MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$ChartPanel#paintComponent(java.awt.Graphics)" -> "javax.swing.JComponent#paintToOffscreen(java.awt.Graphics,int,int,int,int,int,int)";
  "org.jfree.chart$ChartPanel#paintComponent(java.awt.Graphics)" -> "javax.swing.JComponent#printComponent(java.awt.Graphics)";
  "org.jfree.chart$ChartPanel#paintComponent(java.awt.Graphics)" -> "javax.swing.JComponent#paint(java.awt.Graphics)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" -> "CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" -> "plot.CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "renderer.category.AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" -> "org.jfree.chart$plot.CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#getPlotType()" -> "org.jfree.chart$editor.DefaultPlotEditor#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$plot.CategoryPlot#getPlotType()" -> "DefaultPlotEditor#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$plot.CategoryPlot#getPlotType()" -> "editor.DefaultPlotEditor#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$editor.DefaultPlotEditor#<init(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$editor.DefaultChartEditor#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultPlotEditor#<init(org.jfree.chart.plot.Plot)" -> "editor.DefaultChartEditor#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultPlotEditor#<init(org.jfree.chart.plot.Plot)" -> "DefaultChartEditor#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultChartEditor#<init(org.jfree.chart.JFreeChart)" -> "editor.DefaultChartEditorFactory#createEditor(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultChartEditor#<init(org.jfree.chart.JFreeChart)" -> "org.jfree.chart$editor.DefaultChartEditorFactory#createEditor(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultChartEditor#<init(org.jfree.chart.JFreeChart)" -> "DefaultChartEditorFactory#createEditor(org.jfree.chart.JFreeChart)";
  "editor.DefaultChartEditorFactory#createEditor(org.jfree.chart.JFreeChart)" -> "org.jfree.chart$editor.ChartEditorManager#getChartEditor(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.ChartEditorManager#getChartEditor(org.jfree.chart.JFreeChart)" -> "org.jfree.chart$ChartPanel#doEditChartProperties()";
  "org.jfree.chart$editor.ChartEditorManager#getChartEditor(org.jfree.chart.JFreeChart)" -> "ChartPanel#doEditChartProperties()";
  "org.jfree.chart$editor.DefaultChartEditorFactory#createEditor(org.jfree.chart.JFreeChart)" -> "ChartEditorManager#getChartEditor(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultChartEditorFactory#createEditor(org.jfree.chart.JFreeChart)" -> "editor.ChartEditorManager#getChartEditor(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "plot.CombinedRangeCategoryPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "ChartFactory#createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "CombinedDomainCategoryPlot#<init(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "plot.CombinedDomainCategoryPlot#<init(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$ChartFactory#createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "plot.CategoryPlot#<init()";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "CombinedRangeCategoryPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$ChartFactory#createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "ChartFactory#createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "CategoryPlot#<init()";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$ChartFactory#createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$ChartFactory#createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$plot.CategoryPlot#<init()";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#<init(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "ChartFactory#createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CategoryPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" -> "ChartFactory#createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#<init()";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedRangeCategoryPlot#<init()";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "CombinedRangeCategoryPlot#<init()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#<init(org.jfree.chart.axis.CategoryAxis)" -> "CombinedDomainCategoryPlot#<init()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#<init(org.jfree.chart.axis.CategoryAxis)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#<init()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#<init(org.jfree.chart.axis.CategoryAxis)" -> "plot.CombinedDomainCategoryPlot#<init()";
  "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" -> "BarChartDemo1#createChart(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" -> "demo.BarChartDemo1#createChart(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" -> "org.jfree.chart$demo.BarChartDemo1#createChart(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$demo.BarChartDemo1#createChart(org.jfree.data.category.CategoryDataset)" -> "demo.BarChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.BarChartDemo1#createChart(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$demo.BarChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.BarChartDemo1#createChart(org.jfree.data.category.CategoryDataset)" -> "BarChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.BarChartDemo1#<init(java.lang.String)" -> "demo.BarChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$demo.BarChartDemo1#<init(java.lang.String)" -> "BarChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$demo.BarChartDemo1#<init(java.lang.String)" -> "org.jfree.chart$demo.BarChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" -> "plot.CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" -> "CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "block.LineBorder#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "dial.ArcDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "DialCap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "Axis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "PeriodAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "MeterInterval#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.AbstractRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.PolarPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "dial.StandardDialScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "axis.PeriodAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.PolarPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "category.MinMaxCategoryRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.RingPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.dial.DialPointer$Pin#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.XYShapeAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.Marker#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.Axis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "TextBox#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "StatisticalBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "FastScatterPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.SpiderWebPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "StackedXYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.Marker#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "ThermometerPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "PaintScaleLegend#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.FastScatterPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "StrokeList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$block.LineBorder#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.PeriodAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "XYShapeAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$title.LegendGraphic#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.Plot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "CategoryLineAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.StandardDialScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.dial.StandardDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.dial.DialValueIndicator#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "Plot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "title.PaintScaleLegend#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "SpiderWebPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$LegendItem#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.ThermometerPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "dial.DialValueIndicator#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "MinMaxCategoryRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.dial.ArcDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.XYShapeAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "XYPointerAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "dial.StandardDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "PolarPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "DialValueIndicator#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.XYPointerAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "CategoryPointerAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "axis.Axis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.CyclicNumberAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "axis.PeriodAxisLabelInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.XYPointerAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.XYLineAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "LegendGraphic#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$StrokeMap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "MeterNeedle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "AbstractRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.DialCap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "renderer.AbstractRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.PiePlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.CategoryPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "StandardDialScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "XYPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "util.StrokeList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "dial.DialPointer$Pin#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.MeterInterval#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "RingPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "text.TextBox#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$needle.MeterNeedle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.XYBoxAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.StandardDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "dial.DialCap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "DialPointer$Pin#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "renderer.xy.StackedXYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "LegendItem#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "renderer.category.StatisticalBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "CategoryPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "JFreeChart#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.Plot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.FastScatterPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "PiePlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$title.PaintScaleLegend#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.XYPolygonAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "axis.CyclicNumberAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "XYBoxAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.ArcDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "StandardDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.XYPolygonAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "xy.StackedXYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "StrokeMap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "PeriodAxisLabelInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.ThermometerPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.SpiderWebPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.XYPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "XYPolygonAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "Marker#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$util.StrokeList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "title.LegendGraphic#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.RingPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.PiePlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$text.TextBox#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "renderer.category.MinMaxCategoryRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "LineBorder#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "XYLineAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.XYLineAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "ArcDialFrame#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.DialValueIndicator#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.CategoryLineAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.XYPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.CategoryPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.XYBoxAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "annotations.CategoryPointerAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.MeterInterval#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "category.StatisticalBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.dial.DialCap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "CyclicNumberAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "needle.MeterNeedle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readStroke(java.io.ObjectInputStream)" -> "plot.dial.StandardDialScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$plot.WaferMapPlot#<clinit()" -> "WaferMapPlot#<clinit()";
  "org.jfree.chart$plot.WaferMapPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.WaferMapPlot#<clinit()" -> "plot.WaferMapPlot#<clinit()";
  "org.jfree.chart$plot.WaferMapPlot#<clinit()" -> "ChartFactory#createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "plot.FastScatterPlot#<clinit()";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "org.jfree.chart$plot.FastScatterPlot#getPlotType()";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "plot.FastScatterPlot#getPlotType()";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "org.jfree.chart$plot.FastScatterPlot#<init(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "FastScatterPlot#getPlotType()";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "FastScatterPlot#<init(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "plot.FastScatterPlot#<init(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.FastScatterPlot#<clinit()" -> "FastScatterPlot#<clinit()";
  "org.jfree.chart$plot.FastScatterPlot#<init(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.FastScatterPlot#<init()";
  "org.jfree.chart$plot.FastScatterPlot#<init(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)" -> "FastScatterPlot#<init()";
  "org.jfree.chart$plot.FastScatterPlot#<init(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)" -> "plot.FastScatterPlot#<init()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "CombinedRangeXYPlot#getPlotType()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "ChartFactory#createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$ChartFactory#createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "plot.XYPlot#<clinit()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$plot.XYPlot#getPlotType()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "plot.XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "XYPlot#<clinit()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "plot.XYPlot#getPlotType()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "XYPlot#getPlotType()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$plot.XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "plot.XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$plot.XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "plot.CombinedRangeXYPlot#getPlotType()";
  "org.jfree.chart$plot.XYPlot#<clinit()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#getPlotType()";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "plot.CombinedDomainXYPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "plot.CombinedRangeXYPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$plot.XYPlot#<init()";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "CombinedDomainXYPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "ChartFactory#createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "CombinedRangeXYPlot#<init(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "plot.XYPlot#<init()";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "XYPlot#<init()";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#<init()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "CombinedDomainXYPlot#<init()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedDomainXYPlot#<init()";
  "org.jfree.chart$plot.CombinedRangeXYPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "CombinedRangeXYPlot#<init()";
  "org.jfree.chart$plot.CombinedRangeXYPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#<init()";
  "org.jfree.chart$plot.CombinedRangeXYPlot#<init(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedRangeXYPlot#<init()";
  "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" -> "TimeSeriesChartDemo1#createChart(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" -> "org.jfree.chart$demo.TimeSeriesChartDemo1#createChart(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" -> "XYTitleAnnotationDemo1#createChart(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" -> "demo.TimeSeriesChartDemo1#createChart(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" -> "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createChart(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#createChart(org.jfree.data.xy.XYDataset)" -> "org.jfree.chart$demo.TimeSeriesChartDemo1#createDemoPanel()";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#createChart(org.jfree.data.xy.XYDataset)" -> "demo.TimeSeriesChartDemo1#createDemoPanel()";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#createChart(org.jfree.data.xy.XYDataset)" -> "TimeSeriesChartDemo1#createDemoPanel()";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#createDemoPanel()" -> "org.jfree.chart$demo.TimeSeriesChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#createDemoPanel()" -> "demo.TimeSeriesChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#createDemoPanel()" -> "TimeSeriesChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#<init(java.lang.String)" -> "TimeSeriesChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#<init(java.lang.String)" -> "demo.TimeSeriesChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$demo.TimeSeriesChartDemo1#<init(java.lang.String)" -> "org.jfree.chart$demo.TimeSeriesChartDemo1#main(java.lang.String[])";
  "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createChart(org.jfree.data.xy.XYDataset)" -> "XYTitleAnnotationDemo1#createDemoPanel()";
  "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createChart(org.jfree.data.xy.XYDataset)" -> "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createDemoPanel()";
  "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createDemoPanel()" -> "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#<init(java.lang.String)";
  "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createDemoPanel()" -> "XYTitleAnnotationDemo1#<init(java.lang.String)";
  "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#<init(java.lang.String)" -> "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#main(java.lang.String[])";
  "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#<init(java.lang.String)" -> "XYTitleAnnotationDemo1#main(java.lang.String[])";
  "org.jfree.chart$plot.XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)" -> "XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)" -> "plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)" -> "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()";
  "XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$axis.NumberAxis#autoAdjustRange()";
  "XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$axis.LogAxis#autoAdjustRange()";
  "XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$axis.PeriodAxis#autoAdjustRange()";
  "XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$axis.DateAxis#autoAdjustRange()";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.ValueAxis#setLowerMargin(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.ValueAxis#setLowerMargin(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "ValueAxis#setFixedAutoRange(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.ValueAxis#setUpperMargin(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.ValueAxis#setUpperMargin(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.NumberAxis#setAutoRangeIncludesZero(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.ValueAxis#setFixedAutoRange(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "ValueAxis#setLowerMargin(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "ValueAxis#setUpperMargin(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "NumberAxis#setAutoRangeStickyZero(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.NumberAxis#configure()";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.ValueAxis#setFixedAutoRange(double)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "NumberAxis#configure()";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "NumberAxis#setAutoRangeIncludesZero(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.NumberAxis#configure()";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.NumberAxis#setAutoRangeStickyZero(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.NumberAxis#setAutoRangeIncludesZero(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "ValueAxis#setAutoRangeMinimumSize(double,boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean,boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "ValueAxis#setAutoRange(boolean,boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.ValueAxis#setAutoRange(boolean,boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#autoAdjustRange()" -> "axis.NumberAxis#setAutoRangeStickyZero(boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)" -> "axis.ValueAxis#setAutoRangeMinimumSize(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)" -> "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)" -> "ValueAxis#setAutoRangeMinimumSize(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)" -> "org.jfree.chart$axis.CyclicNumberAxis#setAutoRangeMinimumSize(double,boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)" -> "CyclicNumberAxis#setAutoRangeMinimumSize(double,boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double,boolean)" -> "axis.CyclicNumberAxis#setAutoRangeMinimumSize(double,boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double)" -> "DateAxis#<init(java.lang.String,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double)" -> "org.jfree.chart$axis.DateAxis#<init(java.lang.String,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#setAutoRangeMinimumSize(double)" -> "axis.DateAxis#<init(java.lang.String,java.util.TimeZone)";
  "org.jfree.chart$axis.DateAxis#<init(java.lang.String,java.util.TimeZone)" -> "DateAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.DateAxis#<init(java.lang.String,java.util.TimeZone)" -> "axis.DateAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.DateAxis#<init(java.lang.String,java.util.TimeZone)" -> "org.jfree.chart$axis.DateAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.DateAxis#<init(java.lang.String)" -> "DateAxis#<init()";
  "org.jfree.chart$axis.DateAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.DateAxis#<init()";
  "org.jfree.chart$axis.DateAxis#<init(java.lang.String)" -> "axis.DateAxis#<init()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.CombinedRangeCategoryPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.XYPlot#configureDomainAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.CategoryPlot#configureRangeAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.XYPlot#configureRangeAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#clone()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.XYPlot#configureDomainAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.XYPlot#configureRangeAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "XYPlot#configureRangeAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "CombinedRangeCategoryPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "axis.Axis#setPlot(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#remove(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.CombinedDomainXYPlot#clone()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "Axis#setPlot(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#remove(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.CombinedRangeXYPlot#clone()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#clone()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "CategoryPlot#configureRangeAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "CombinedDomainXYPlot#remove(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "CombinedRangeCategoryPlot#remove(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.CombinedRangeCategoryPlot#remove(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "CombinedDomainXYPlot#clone()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "CombinedRangeXYPlot#clone()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "org.jfree.chart$plot.CategoryPlot#configureRangeAxes()";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "plot.CombinedDomainXYPlot#remove(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$axis.NumberAxis#configure()" -> "XYPlot#configureDomainAxes()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "XYPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "FastScatterPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "XYPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "PolarPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.FastScatterPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.PolarPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "ThermometerPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.PolarPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.ThermometerPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.FastScatterPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.ThermometerPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.ThermometerPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.PolarPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "ThermometerPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "PolarPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.PolarPlot#clone()";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.ThermometerPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)";
  "org.jfree.chart$axis.Axis#setPlot(org.jfree.chart.plot.Plot)" -> "PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)";
  "XYPlot#clone()" -> "org.jfree.chart$JFreeChart#clone()";
  "org.jfree.chart$JFreeChart#clone()" -> "sun.net.www$MessageHeader#print(java.io.PrintStream)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.lang.invoke$MethodHandleImpl$Intrinsic#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "sun.font.TextLabelFactory#<init(java.awt.font.FontRenderContext,char[],java.text.Bidi,int)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.security.AccessControlContext#<init(java.security.ProtectionDomain[])";
  "org.jfree.chart$JFreeChart#clone()" -> "com.sun.org$apache.xerces.internal.util.Status#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.security.cert$PKIXRevocationChecker$Option#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.lang.invoke$InvokerBytecodeGenerator#emitSelectAlternative(java.lang.invoke.LambdaForm$Name,java.lang.invoke.LambdaForm$Name)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.time.format$SignStyle#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.text.AttributedString$AttributedStringIterator#<init(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute[],int,int)";
  "org.jfree.chart$JFreeChart#clone()" -> "sun.security.x509$OtherName#getNameValue()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.awt.Dialog$ModalityType#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.lang.Class#getInterfaces(boolean)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.awt.image$DataBufferShort#<init(short[][],int)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.security.ProtectionDomain#<init(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])";
  "org.jfree.chart$JFreeChart#clone()" -> "java.util.logging$LogManager$ModType#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.awt.image$SinglePixelPackedSampleModel#getSampleSize()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.beans.MethodDescriptor#<init(java.lang.reflect.Method,java.beans.ParameterDescriptor[])";
  "org.jfree.chart$JFreeChart#clone()" -> "java.text.NumberFormat$Style#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.nio.file$Files#writeString(java.nio.file.Path,java.lang.CharSequence,java.nio.charset.Charset,java.nio.file.OpenOption[])";
  "org.jfree.chart$JFreeChart#clone()" -> "java.util.Arrays#legacyMergeSort(java.lang.Object[])";
  "org.jfree.chart$JFreeChart#clone()" -> "java.awt.Taskbar$State#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "sun.awt.image$ShortComponentRaster#getDataOffsets()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.lang.Throwable#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$JFreeChart#clone()" -> "javax.swing.ClientPropertyKey#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "com.sun.imageio$plugins.png.PNGMetadata#mergeNativeTree(org.w3c.dom.Node)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.lang.'annotation'$RetentionPolicy#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.awt.image$DataBufferFloat#<init(float[][],int)";
  "org.jfree.chart$JFreeChart#clone()" -> "java.security.cert$X509CertSelector#getAuthorityKeyIdentifier()";
  "org.jfree.chart$JFreeChart#clone()" -> "sun.security.x509$RDN#<init(sun.security.x509.AVA[])";
  "org.jfree.chart$JFreeChart#clone()" -> "sun.awt.AppContext$State#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "java.nio.file$attribute.AclEntryType#values()";
  "org.jfree.chart$JFreeChart#clone()" -> "plot.CompassPlot#clone()";
  "plot.CompassPlot#clone()" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.x509$X500Name#<init(sun.security.x509.RDN[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.swing.SwingUtilities2$Section#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "jdk.internal.logger$LoggerFinderLoader$ErrorPolicy#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.CodeSource#getCodeSigners()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.net.InetAddress#getAllByName0(java.lang.String,boolean,boolean)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.spec$EllipticCurve#<init(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$ComponentSampleModel#<init(int,int,int,int,int,int[],int[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.Class#copyConstructors(java.lang.reflect.Constructor[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.print.attribute$standard.MediaSizeName#getEnumValueTable()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "CompassPlot#clone()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.java2d.StateTrackable$State#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.swing.text$html.StyleSheet$BoxPainter$HorizontalMargin#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.xs.AttributePSVImpl#<init(boolean,com.sun.org.apache.xerces.internal.xs.AttributePSVI)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.cert$PolicyQualifierInfo#<init(byte[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageReadParam#getACHuffmanTables()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.KeyStore$PrivateKeyEntry#getCertificateChain()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.invoke$MethodHandleImpl$ArrayAccess#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.swing.text$html.FormSubmitEvent$MethodType#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.Dialog$ModalExclusionType#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.io.ObjectInputStream#cloneArray(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "SubSeriesDataset#getMap()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "jdk.xml.internal$JdkProperty$State#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.util.Locale$FilteringMode#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.x509$X509CRLImpl#getSignature()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.time.format$FormatStyle#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "general.SubSeriesDataset#getMap()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.bcel.internal.classfile.JavaClass#copy()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.swing.event$RowSorterEvent$Type#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.x509$X509CertInfo#encode(java.io.OutputStream)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.util.regex$Matcher#toMatchResult(java.lang.String)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.util$BitArray#toByteArray()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.net.ssl$SNIServerName#getEncoded()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.cert$PKIXRevocationChecker#getOcspResponses()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.pkcs$PKCS7#getCertificates()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.reflect.generics$reflectiveObjects.TypeVariableImpl#getBounds()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.reflect$Method#getExceptionTypes()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "jdk.internal.icu$util.CodePointTrie$ValueWidth#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.io.ObjectInputFilter$Status#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLDTDScannerImpl#getRecognizedProperties()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.CodeSource#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.spi$ImageReaderSpi#getImageWriterSpiNames()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.x509$AlgorithmId#decodeParams()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.beans$WildcardTypeImpl#getUpperBounds()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.time.chrono$MinguoEra#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageWriteParam#setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[],javax.imageio.plugins.jpeg.JPEGHuffmanTable[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.reflect.generics$reflectiveObjects.WildcardTypeImpl#getLowerBounds()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.bcel.internal.ExceptionConst$EXCS#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.swing.RowFilter$ComparisonType#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.imageio$plugins.jpeg.JPEGImageWriter$CallBackLock$State#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.awt.image$ByteBandedRaster#getDataOffsets()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.desktop$QuitStrategy#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.cert$TrustAnchor#getNameConstraints()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.invoke$MethodHandles#tableSwitch(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.nio.fs$WindowsPathType#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "annotations.XYPolygonAnnotation#<init(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.util.locale$provider.LocaleServiceProviderPool#getAllAvailableLocales()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.cert$X509CertSelector#setKeyUsage(boolean[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.font$TextMeasurer#clone()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$DataBufferDouble#getBankData()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.util.Arrays#legacyMergeSort(java.lang.Object[],java.util.Comparator)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$DataBufferDouble#<init(double[][],int,int[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.StackWalker$ExtendedOption#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLEntityManager#getRecognizedProperties()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.reflect.'annotation'$TypeAnnotation$TypeAnnotationTarget#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.security.spec$EncodedKeySpec#<init(byte[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "jdk.internal.icu$util.CodePointMap$RangeOption#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$DataBufferByte#<init(byte[][],int)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.imageio$plugins.gif.GIFImageMetadata#getNativeTree()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#getGDVs()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.x509$Extension#getValue()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.invoke$MethodHandles$Lookup#defineClass(byte[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.spi$ImageReaderWriterSpi#<init(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.imageio$plugins.tiff.TIFFDecompressor#setBitsPerSample(int[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.util.logging$LogManager$ConfigProperty#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.time.format$DateTimeFormatterBuilder$SettingsParser#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.math.RoundingMode#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.ImageTypeSpecifier$Banded#<init(java.awt.color.ColorSpace,int[],int[],int,boolean,boolean)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$PackedColorModel#getMasks()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.security.auth$callback.PasswordCallback#getPassword()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.constant$MethodTypeDescImpl#parameterArray()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.reflect$Constructor#getParameterTypes()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.invoke$MethodType#changeParameterType(int,java.lang.Class)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.plugins$jpeg.JPEGImageWriteParam#getACHuffmanTables()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "jdk.internal.math$FormattedFloatingDecimal$Form#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.IIOParam#getSourceBands()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.lang.invoke$MethodHandles#permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.xml.catalog$GroupEntry$ResolveType#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.util.SymbolHash#makeClone()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.imageio$plugins.png.PNGMetadata#cloneBytesArrayList(java.util.ArrayList)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$DataBufferFloat#getBankData()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.imageio.IIOParam#setSourceBands(int[])";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.XMLEntityManager#getRecognizedFeatures()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLDTDLoader#getRecognizedFeatures()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "javax.crypto.SealedObject#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.awt.image$ShortInterleavedRaster#getDataOffsets()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.security.pkcs$PKCS9Attributes#getDerEncoding()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "com.sun.imageio$plugins.jpeg.JPEGImageReader$CallBackLock$State#values()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "sun.text.CompactByteArray#clone()";
  "org.jfree.chart$renderer.xy.XYBlockRenderer#clone()" -> "java.awt.image$DataBufferByte#getBankData()";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "plot.XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "org.jfree.chart$plot.XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)" -> "plot.XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)" -> "XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)" -> "CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)";
  "org.jfree.chart$plot.XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)" -> "CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)" -> "plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.PolarPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)" -> "org.jfree.chart$plot.PolarPlot#<init()";
  "org.jfree.chart$plot.PolarPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)" -> "plot.PolarPlot#<init()";
  "org.jfree.chart$plot.PolarPlot#<init(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)" -> "PolarPlot#<init()";
  "org.jfree.chart$plot.PolarPlot#<init()" -> "ChartFactory#createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.PolarPlot#<init()" -> "org.jfree.chart$ChartFactory#createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)" -> "CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)" -> "plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)" -> "CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "MultipleXYSeriesLabelGenerator#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "AbstractCategoryItemRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "block.AbstractBlock#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "xy.XYBarDataset#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "XYBlockRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "renderer.xy.XYBlockRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "ChartRenderingInfo#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "renderer.category.AbstractCategoryItemRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "KeyedObject#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "XYBarDataset#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "xy.AbstractXYItemRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "xy.XYBlockRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "AbstractXYItemRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "renderer.xy.AbstractXYItemRenderer#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "util.ObjectUtilities#clone(java.lang.Object)";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "JFreeChart#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "labels.MultipleXYSeriesLabelGenerator#clone()";
  "org.jfree.chart$plot.FastScatterPlot#clone()" -> "AbstractBlock#clone()";
  "org.jfree.chart$plot.ThermometerPlot#<init(org.jfree.data.general.ValueDataset)" -> "ThermometerPlot#<init()";
  "org.jfree.chart$plot.ThermometerPlot#<init(org.jfree.data.general.ValueDataset)" -> "plot.ThermometerPlot#<init()";
  "org.jfree.chart$plot.ThermometerPlot#<init(org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.ThermometerPlot#<init()";
  "org.jfree.chart$plot.ThermometerPlot#<init()" -> "plot.JThermometer#<init()";
  "org.jfree.chart$plot.ThermometerPlot#<init()" -> "org.jfree.chart$plot.JThermometer#<init()";
  "org.jfree.chart$plot.ThermometerPlot#<init()" -> "JThermometer#<init()";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" -> "plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" -> "plot.CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" -> "CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" -> "CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" -> "CategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" -> "plot.CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" -> "CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" -> "org.jfree.chart$plot.CategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" -> "plot.CategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CategoryPlot#clone()" -> "CombinedDomainCategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#clone()" -> "plot.CombinedDomainCategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#clone()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#clone()" -> "CombinedRangeCategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#clone()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#clone()" -> "plot.CombinedRangeCategoryPlot#clone()";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)" -> "CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)" -> "plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)" -> "plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)" -> "CombinedDomainCategoryPlot#add(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "plot.CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)" -> "plot.CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)" -> "CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)" -> "CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)" -> "CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)" -> "plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot,int)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#add(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "plot.XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "org.jfree.chart$plot.XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" -> "org.jfree.chart$plot.XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)";
  "PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)";
  "PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultKeyedValueDataset#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "time.TimeSeriesCollection#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultXYZDataset#removeSeries(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "general.CombinedDataset#add(org.jfree.data.general.SeriesDataset[])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "general.DefaultValueDataset#setValue(java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "CombinedDataset#add(org.jfree.data.general.SeriesDataset[])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "SimpleHistogramDataset#removeAllBins()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultIntervalXYDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "AbstractDataset#fireDatasetChanged()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$general.DefaultKeyedValueDataset#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.XYBarDataset#setBarWidth(double)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "statistics.HistogramDataset#setType(org.jfree.data.statistics.HistogramType)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.XYBarDataset#setBarWidth(double)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.DefaultXYZDataset#removeSeries(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "TimeSeriesCollection#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$general.AbstractDataset#fireDatasetChanged()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$statistics.SimpleHistogramDataset#removeAllBins()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$general.DefaultValueDataset#setValue(java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$statistics.SimpleHistogramDataset#setAdjustForBinSize(boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "general.CombinedDataset#add(org.jfree.data.general.SeriesDataset)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.DefaultIntervalXYDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "TimeTableXYDataset#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "SimpleHistogramDataset#addObservation(double,boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultValueDataset#setValue(java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "SimpleHistogramDataset#setAdjustForBinSize(boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$time.TimeTableXYDataset#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$statistics.SimpleHistogramDataset#clearObservations()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "TimeTableXYDataset#setDomainIsPointsInTime(boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultXYDataset#removeSeries(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$time.TimeTableXYDataset#setDomainIsPointsInTime(boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.DefaultXYZDataset#removeSeries(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "CombinedDataset#add(org.jfree.data.general.SeriesDataset)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.DefaultXYDataset#removeSeries(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.DefaultXYDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.XYBarDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "statistics.SimpleHistogramDataset#clearObservations()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "XYBarDataset#setBarWidth(double)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "statistics.SimpleHistogramDataset#removeAllBins()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultXYDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "time.TimeTableXYDataset#setDomainIsPointsInTime(boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$time.TimeSeriesCollection#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "general.AbstractDataset#fireDatasetChanged()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "DefaultXYZDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.DefaultXYDataset#removeSeries(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset[])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$statistics.HistogramDataset#setType(org.jfree.data.statistics.HistogramType)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.DefaultXYZDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "time.TimeTableXYDataset#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.DefaultXYDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "xy.DefaultXYZDataset#addSeries(java.lang.Comparable,double[][])";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "SimpleHistogramDataset#clearObservations()";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "HistogramDataset#setType(org.jfree.data.statistics.HistogramType)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "general.DefaultKeyedValueDataset#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "statistics.SimpleHistogramDataset#addObservation(double,boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "statistics.SimpleHistogramDataset#setAdjustForBinSize(boolean)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "XYBarDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.data$xy.XYBarDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)" -> "statistics.SimpleHistogramDataset#addObservation(double)";
  "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)" -> "org.jfree.data$statistics.SimpleHistogramDataset#addObservations(double[])";
  "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)" -> "statistics.SimpleHistogramDataset#addObservations(double[])";
  "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)" -> "SimpleHistogramDataset#addObservation(double)";
  "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)" -> "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double)";
  "org.jfree.data$statistics.SimpleHistogramDataset#addObservation(double,boolean)" -> "SimpleHistogramDataset#addObservations(double[])";
  "org.jfree.data$general.DefaultKeyedValueDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValueDataset#updateValue(java.lang.Number)";
  "org.jfree.data$general.DefaultKeyedValueDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DefaultKeyedValueDataset#updateValue(java.lang.Number)";
  "org.jfree.data$general.DefaultKeyedValueDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "general.DefaultKeyedValueDataset#updateValue(java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#setSeriesKeys(java.lang.Comparable[])";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XIntervalSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultIntervalCategoryDataset#setEndValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$gantt.TaskSeriesCollection#removeAll()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#removeSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.VectorSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultIntervalCategoryDataset#setStartValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultIntervalCategoryDataset#setEndValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimeSeriesCollection#addSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYIntervalSeriesCollection#addSeries(org.jfree.data.xy.XYIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "AbstractDataset#validateObject()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultIntervalCategoryDataset#setSeriesKeys(java.lang.Comparable[])";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.DefaultTableXYDataset#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.DefaultTableXYDataset#removeSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimeTableXYDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "gantt.TaskSeriesCollection#removeAll()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$gantt.TaskSeriesCollection#remove(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "gantt.TaskSeriesCollection#remove(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#removeSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#addSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#setStartValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "CategoryTableXYDataset#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.VectorSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.CategoryTableXYDataset#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "gantt.TaskSeriesCollection#remove(org.jfree.data.gantt.TaskSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.YIntervalSeriesCollection#addSeries(org.jfree.data.xy.YIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.CategoryToPieDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TaskSeriesCollection#removeAll()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.MatrixSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "CategoryTableXYDataset#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimeSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultIntervalCategoryDataset#setSeriesKeys(java.lang.Comparable[])";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.MatrixSeriesCollection#removeSeries(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultPieDataset#remove(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "gantt.TaskSeriesCollection#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.DefaultTableXYDataset#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimePeriodValuesCollection#removeSeries(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TaskSeriesCollection#remove(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.CategoryTableXYDataset#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#remove(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.VectorSeriesCollection#removeSeries(org.jfree.data.xy.VectorSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "ohlc.OHLCSeriesCollection#addSeries(org.jfree.data.time.ohlc.OHLCSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimePeriodValuesCollection#removeSeries(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimePeriodValuesCollection#addSeries(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.DefaultPieDataset#sortByKeys(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.YIntervalSeriesCollection#addSeries(org.jfree.data.xy.YIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "gantt.TaskSeriesCollection#add(org.jfree.data.gantt.TaskSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#removeSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimeSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.DefaultPieDataset#sortByValues(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#remove(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.VectorSeriesCollection#removeSeries(org.jfree.data.xy.VectorSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.MatrixSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimePeriodValuesCollection#addSeries(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimeSeriesCollection#addSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimeSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimeTableXYDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.AbstractDataset#validateObject()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XIntervalSeriesCollection#addSeries(org.jfree.data.xy.XIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XIntervalSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#remove(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "VectorSeriesCollection#addSeries(org.jfree.data.xy.VectorSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "CategoryTableXYDataset#add(java.lang.Number,java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "JDBCXYDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.DefaultPieDataset#remove(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.DefaultPieDataset#sortByKeys(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.CategoryTableXYDataset#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.DefaultTableXYDataset#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.CategoryTableXYDataset#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "MatrixSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultMultiValueCategoryDataset#add(java.util.List,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.CategoryTableXYDataset#remove(java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XIntervalSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XIntervalSeriesCollection#removeSeries(org.jfree.data.xy.XIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#remove(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.DefaultPieDataset#remove(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimeTableXYDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TaskSeriesCollection#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.CategoryTableXYDataset#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XIntervalSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.DefaultTableXYDataset#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.VectorSeriesCollection#addSeries(org.jfree.data.xy.VectorSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.MatrixSeriesCollection#addSeries(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYIntervalSeriesCollection#addSeries(org.jfree.data.xy.XYIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#setCategoryKeys(java.lang.Comparable[])";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#remove(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.DefaultTableXYDataset#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimeSeriesCollection#addSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "CategoryTableXYDataset#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#remove(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.DefaultPieDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.DefaultTableXYDataset#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultIntervalCategoryDataset#setCategoryKeys(java.lang.Comparable[])";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$gantt.TaskSeriesCollection#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XIntervalSeriesCollection#removeSeries(org.jfree.data.xy.XIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#removeSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#add(java.util.List,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimePeriodValuesCollection#removeSeries(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.MatrixSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.DefaultTableXYDataset#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "jdbc.JDBCXYDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.CategoryTableXYDataset#add(java.lang.Number,java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultIntervalCategoryDataset#setCategoryKeys(java.lang.Comparable[])";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.CategoryTableXYDataset#remove(java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultPieDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$gantt.TaskSeriesCollection#remove(org.jfree.data.gantt.TaskSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.MatrixSeriesCollection#removeSeries(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.DefaultTableXYDataset#removeSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XIntervalSeriesCollection#addSeries(org.jfree.data.xy.XIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultMultiValueCategoryDataset#add(java.util.List,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.CategoryTableXYDataset#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.MatrixSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultTableXYDataset#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "YIntervalSeriesCollection#addSeries(org.jfree.data.xy.YIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultPieDataset#sortByKeys(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$gantt.TaskSeriesCollection#add(org.jfree.data.gantt.TaskSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYIntervalSeriesCollection#addSeries(org.jfree.data.xy.XYIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.CategoryToPieDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.DefaultPieDataset#sortByValues(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#addSeries(org.jfree.data.time.ohlc.OHLCSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "MatrixSeriesCollection#removeSeries(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.DefaultTableXYDataset#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#setEndValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "MatrixSeriesCollection#addSeries(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XIntervalSeriesCollection#addSeries(org.jfree.data.xy.XIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultPieDataset#sortByValues(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "VectorSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "OHLCSeriesCollection#addSeries(org.jfree.data.time.ohlc.OHLCSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#removeRow(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "XYSeriesCollection#addSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$general.DefaultPieDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultStatisticalCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#setAutoWidth(boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultBoxAndWhiskerCategoryDataset#add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultStatisticalCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XYSeriesCollection#setIntervalPositionFactor(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "VectorSeriesCollection#removeSeries(org.jfree.data.xy.VectorSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TimePeriodValuesCollection#addSeries(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.XIntervalSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "MatrixSeriesCollection#removeAllSeries()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "time.ohlc.OHLCSeriesCollection#addSeries(org.jfree.data.time.ohlc.OHLCSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#addSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.MatrixSeriesCollection#addSeries(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XIntervalSeriesCollection#removeSeries(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TaskSeriesCollection#add(org.jfree.data.gantt.TaskSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XIntervalSeriesCollection#removeSeries(org.jfree.data.xy.XIntervalSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.CategoryTableXYDataset#add(java.lang.Number,java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#removeRow(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#clear()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "CategoryTableXYDataset#remove(java.lang.Number,java.lang.String,boolean)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#removeColumn(java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "CategoryToPieDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "DefaultIntervalCategoryDataset#setStartValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "xy.XYSeriesCollection#setIntervalWidth(double)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "TaskSeriesCollection#remove(org.jfree.data.gantt.TaskSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "general.AbstractDataset#validateObject()";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "org.jfree.data$xy.VectorSeriesCollection#addSeries(org.jfree.data.xy.VectorSeries)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#removeColumn(int)";
  "org.jfree.data$general.AbstractDataset#fireDatasetChanged()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#clear()";
  "DefaultTableXYDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)" -> "org.jfree.data$general.Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$general.Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)" -> "general.Series#fireSeriesChanged()";
  "org.jfree.data$general.Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)" -> "org.jfree.data$general.Series#fireSeriesChanged()";
  "org.jfree.data$general.Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)" -> "Series#fireSeriesChanged()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimePeriodValues#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#update(java.lang.Number,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.MatrixSeries#zeroAll()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#update(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#updateByIndex(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#removeAgedItems(boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "gantt.TaskSeries#removeAll()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "MatrixSeries#zeroAll()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#setMaximumItemCount(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#setMaximumItemCount(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimePeriodValues#update(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$gantt.TaskSeries#add(org.jfree.data.gantt.Task)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TaskSeries#add(org.jfree.data.gantt.Task)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#update(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimePeriodValues#update(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#removeAgedItems(boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.MatrixSeries#update(int,int,double)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$general.Series#setNotify(boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "gantt.TaskSeries#add(org.jfree.data.gantt.Task)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "gantt.TaskSeries#remove(org.jfree.data.gantt.Task)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#removeAgedItems(long,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "Series#setNotify(boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TaskSeries#removeAll()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "MatrixSeries#update(int,int,double)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "VectorSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimePeriodValues#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "general.Series#setNotify(boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimePeriodValues#update(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "XYSeries#update(java.lang.Number,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$time.TimeSeries#removeAgedItems(boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$gantt.TaskSeries#removeAll()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.MatrixSeries#zeroAll()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$gantt.TaskSeries#remove(org.jfree.data.gantt.Task)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimePeriodValues#delete(int,int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#updateByIndex(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.VectorSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#updateByIndex(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.XYSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "org.jfree.data$xy.VectorSeries#remove(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#setMaximumItemCount(int)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "ComparableObjectSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#update(java.lang.Number,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.MatrixSeries#update(int,int,double)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#removeAgedItems(long,boolean)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "time.TimeSeries#update(int,java.lang.Number)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TaskSeries#remove(org.jfree.data.gantt.Task)";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "xy.XYSeries#clear()";
  "org.jfree.data$general.Series#fireSeriesChanged()" -> "TimeSeries#removeAgedItems(long,boolean)";
  "org.jfree.data$xy.MatrixSeries#zeroAll()" -> "xy.MatrixSeries#<init(java.lang.String,int,int)";
  "org.jfree.data$xy.MatrixSeries#zeroAll()" -> "org.jfree.data$xy.NormalizedMatrixSeries#zeroAll()";
  "org.jfree.data$xy.MatrixSeries#zeroAll()" -> "xy.NormalizedMatrixSeries#zeroAll()";
  "org.jfree.data$xy.MatrixSeries#zeroAll()" -> "NormalizedMatrixSeries#zeroAll()";
  "org.jfree.data$xy.NormalizedMatrixSeries#zeroAll()" -> "org.jfree.data$xy.MatrixSeries#<init(java.lang.String,int,int)";
  "org.jfree.data$xy.NormalizedMatrixSeries#zeroAll()" -> "MatrixSeries#<init(java.lang.String,int,int)";
  "org.jfree.data$xy.MatrixSeries#<init(java.lang.String,int,int)" -> "NormalizedMatrixSeries#<init(java.lang.String,int,int)";
  "org.jfree.data$xy.MatrixSeries#<init(java.lang.String,int,int)" -> "org.jfree.data$xy.NormalizedMatrixSeries#<init(java.lang.String,int,int)";
  "org.jfree.data$xy.MatrixSeries#<init(java.lang.String,int,int)" -> "xy.NormalizedMatrixSeries#<init(java.lang.String,int,int)";
  "org.jfree.data$time.TimeSeries#update(int,java.lang.Number)" -> "time.TimeSeriesTableModel#setValueAt(java.lang.Object,int,int)";
  "org.jfree.data$time.TimeSeries#update(int,java.lang.Number)" -> "TimeSeriesTableModel#setValueAt(java.lang.Object,int,int)";
  "org.jfree.data$time.TimeSeries#update(int,java.lang.Number)" -> "org.jfree.data$time.TimeSeriesTableModel#setValueAt(java.lang.Object,int,int)";
  "org.jfree.data$time.TimeSeriesTableModel#setValueAt(java.lang.Object,int,int)" -> "javax.swing.JTable#setValueAt(java.lang.Object,int,int)";
  "org.jfree.data$time.TimeSeries#delete(int,int)" -> "org.jfree.data$time.TimeSeries#setMaximumItemCount(int)";
  "org.jfree.data$time.TimeSeries#delete(int,int)" -> "TimeSeries#setMaximumItemCount(int)";
  "org.jfree.data$time.TimeSeries#delete(int,int)" -> "time.TimeSeries#setMaximumItemCount(int)";
  "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "time.TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "org.jfree.data$time.TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$xy.MatrixSeries#update(int,int,double)" -> "org.jfree.data$xy.NormalizedMatrixSeries#update(int,int,double)";
  "org.jfree.data$xy.MatrixSeries#update(int,int,double)" -> "NormalizedMatrixSeries#update(int,int,double)";
  "org.jfree.data$xy.MatrixSeries#update(int,int,double)" -> "xy.NormalizedMatrixSeries#update(int,int,double)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)" -> "xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)" -> "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)" -> "XYSeries#add(org.jfree.data.xy.XYDataItem)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)" -> "XYSeries#add(java.lang.Number,java.lang.Number,boolean)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)" -> "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)" -> "xy.XYSeries#add(org.jfree.data.xy.XYDataItem)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "XYSeries#add(double,java.lang.Number,boolean)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "XYSeries#add(double,double)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "org.jfree.data$xy.XYSeries#add(double,double)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "org.jfree.data$xy.XYSeries#add(double,java.lang.Number,boolean)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "XYSeries#add(java.lang.Number,java.lang.Number)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "xy.XYSeries#add(java.lang.Number,java.lang.Number)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "xy.XYSeries#add(double,java.lang.Number,boolean)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "org.jfree.data$xy.XYSeries#add(double,double,boolean)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "xy.XYSeries#add(double,double)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "xy.XYSeries#add(double,double,boolean)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number,boolean)" -> "XYSeries#add(double,double,boolean)";
  "org.jfree.data$xy.XYSeries#add(double,double)" -> "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)";
  "org.jfree.data$xy.XYSeries#add(double,double)" -> "DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)";
  "org.jfree.data$xy.XYSeries#add(double,double)" -> "time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)";
  "org.jfree.data$xy.XYSeries#add(double,double)" -> "org.jfree.data$general.DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)";
  "org.jfree.data$xy.XYSeries#add(double,double)" -> "MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)";
  "org.jfree.data$xy.XYSeries#add(double,double)" -> "general.DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)" -> "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)" -> "time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)" -> "MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)" -> "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,long,long)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)" -> "time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,long,long)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)" -> "MovingAverage#createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,long,long)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)" -> "DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)" -> "org.jfree.data$xy.XYSeries#add(double,java.lang.Number)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)" -> "XYSeries#add(double,java.lang.Number)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)" -> "xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)" -> "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.XYSeries#add(java.lang.Number,java.lang.Number)" -> "xy.XYSeries#add(double,java.lang.Number)";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)" -> "xy.DefaultTableXYDataset#updateXPoints()";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)" -> "org.jfree.data$xy.DefaultTableXYDataset#addSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)" -> "DefaultTableXYDataset#updateXPoints()";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)" -> "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints()";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)" -> "DefaultTableXYDataset#addSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints(org.jfree.data.xy.XYSeries)" -> "xy.DefaultTableXYDataset#addSeries(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints()" -> "xy.DefaultTableXYDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$xy.DefaultTableXYDataset#updateXPoints()" -> "org.jfree.data$xy.DefaultTableXYDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$xy.DefaultTableXYDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)" -> "general.Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$xy.DefaultTableXYDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)" -> "Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem)" -> "XYSeries#createCopy(int,int)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem)" -> "xy.XYSeries#createCopy(int,int)";
  "org.jfree.data$xy.XYSeries#add(org.jfree.data.xy.XYDataItem)" -> "org.jfree.data$xy.XYSeries#createCopy(int,int)";
  "org.jfree.data$ComparableObjectSeries#remove(int)" -> "ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#remove(int)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)" -> "time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)" -> "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)" -> "time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)" -> "TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)" -> "MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)" -> "time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)";
  "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)" -> "org.jfree.data$time.MovingAverage#createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)" -> "org.jfree.data$time.TimeSeries#createCopy(int,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)" -> "time.TimeSeries#createCopy(int,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)" -> "TimeSeries#createCopy(int,int)";
  "org.jfree.data$time.TimeSeries#createCopy(int,int)" -> "time.TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#createCopy(int,int)" -> "org.jfree.data$time.TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#createCopy(int,int)" -> "TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)" -> "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)" -> "TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)" -> "time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "org.jfree.data$time.MovingAverage#createPointMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "MovingAverage#createPointMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#createDataset()";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "TimeSeriesChartDemo1#createDataset()";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "XYTitleAnnotationDemo1#createDataset()";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "time.MovingAverage#createPointMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int)";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "org.jfree.chart$demo.TimeSeriesChartDemo1#createDataset()";
  "org.jfree.data$time.TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)" -> "demo.TimeSeriesChartDemo1#createDataset()";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriod,double)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "TimePeriodValues#createCopy(int,int)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "org.jfree.data$time.TimePeriodValues#createCopy(int,int)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "TimePeriodValues#add(org.jfree.data.time.TimePeriod,double)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "time.TimePeriodValues#add(org.jfree.data.time.TimePeriod,java.lang.Number)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "time.TimePeriodValues#add(org.jfree.data.time.TimePeriod,double)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "time.TimePeriodValues#createCopy(int,int)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "TimePeriodValues#add(org.jfree.data.time.TimePeriod,java.lang.Number)";
  "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)" -> "org.jfree.data$time.TimePeriodValues#add(org.jfree.data.time.TimePeriod,java.lang.Number)";
  "org.jfree.data$time.TimePeriodValues#createCopy(int,int)" -> "time.TimePeriodValues#clone()";
  "org.jfree.data$time.TimePeriodValues#createCopy(int,int)" -> "org.jfree.data$time.TimePeriodValues#clone()";
  "org.jfree.data$time.TimePeriodValues#createCopy(int,int)" -> "TimePeriodValues#clone()";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$xy.VectorSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "ohlc.OHLCSeries#add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$xy.XYIntervalSeries#add(double,double,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$xy.XIntervalSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "OHLCSeries#add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "xy.VectorSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "xy.YIntervalSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "YIntervalSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "time.ohlc.OHLCSeries#add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "VectorSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "XYIntervalSeries#add(double,double,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "xy.XIntervalSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$time.ohlc.OHLCSeries#add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "xy.XYIntervalSeries#add(double,double,double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "XIntervalSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$xy.YIntervalSeries#add(double,double,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)" -> "ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$time.TimeSeries#removeAgedItems(boolean)" -> "TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)";
  "org.jfree.data$time.TimeSeries#removeAgedItems(boolean)" -> "org.jfree.data$time.TimeSeries#setMaximumItemAge(long)";
  "org.jfree.data$time.TimeSeries#removeAgedItems(boolean)" -> "time.TimeSeries#setMaximumItemAge(long)";
  "org.jfree.data$time.TimeSeries#removeAgedItems(boolean)" -> "TimeSeries#setMaximumItemAge(long)";
  "org.jfree.data$time.TimeSeries#removeAgedItems(boolean)" -> "time.TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "org.jfree.data$xy.XYSeries#remove(int)" -> "org.jfree.data$xy.XYSeries#remove(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#remove(int)" -> "XYSeries#remove(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#remove(int)" -> "xy.XYSeries#remove(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#remove(java.lang.Number)" -> "xy.DefaultTableXYDataset#removeAllValuesForX(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#remove(java.lang.Number)" -> "DefaultTableXYDataset#removeAllValuesForX(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#remove(java.lang.Number)" -> "org.jfree.data$xy.DefaultTableXYDataset#removeAllValuesForX(java.lang.Number)";
  "org.jfree.data$xy.DefaultTableXYDataset#removeAllValuesForX(java.lang.Number)" -> "xy.DefaultTableXYDataset#prune()";
  "org.jfree.data$xy.DefaultTableXYDataset#removeAllValuesForX(java.lang.Number)" -> "org.jfree.data$xy.DefaultTableXYDataset#prune()";
  "org.jfree.data$xy.DefaultTableXYDataset#removeAllValuesForX(java.lang.Number)" -> "DefaultTableXYDataset#prune()";
  "org.jfree.data$xy.DefaultTableXYDataset#prune()" -> "org.jfree.data$xy.DefaultTableXYDataset#removeSeries(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#prune()" -> "xy.DefaultTableXYDataset#removeSeries(int)";
  "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "jdbc.JDBCPieDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "JDBCPieDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.lang.String)" -> "jdbc.JDBCPieDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.lang.String)" -> "JDBCPieDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$jdbc.JDBCPieDataset#executeQuery(java.lang.String)" -> "org.jfree.data$jdbc.JDBCPieDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)" -> "DefaultPieDataset#insertValue(int,java.lang.Comparable,double)";
  "org.jfree.data$general.DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DefaultPieDataset#insertValue(int,java.lang.Comparable,double)";
  "org.jfree.data$general.DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)" -> "general.DefaultPieDataset#insertValue(int,java.lang.Comparable,double)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#add(double,double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DefaultStatisticalCategoryDataset#add(double,double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultStatisticalCategoryDataset#add(double,double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "general.AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$category.CategoryToPieDataset#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "JDBCCategoryDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "jdbc.JDBCCategoryDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.lang.String)" -> "JDBCCategoryDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.lang.String)" -> "jdbc.JDBCCategoryDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$jdbc.JDBCCategoryDataset#executeQuery(java.lang.String)" -> "org.jfree.data$jdbc.JDBCCategoryDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.String,boolean)" -> "time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,double,java.lang.String)";
  "org.jfree.data$time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.String,boolean)" -> "TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,double,java.lang.String)";
  "org.jfree.data$time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.String,boolean)" -> "org.jfree.data$time.TimeTableXYDataset#add(org.jfree.data.time.TimePeriod,double,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "category.DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$category.DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "jdbc.JDBCCategoryDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "JDBCCategoryDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)" -> "category.DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)" -> "DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$category.DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "general.DefaultPieDataset#setValue(java.lang.Comparable,double)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$xml.PieDatasetHandler#addItem(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,double)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "DefaultPieDataset#setValue(java.lang.Comparable,double)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.chart$demo.PieChartDemo1#createDataset()";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "xml.PieDatasetHandler#addItem(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "PieDatasetHandler#addItem(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "PieChartDemo1#createDataset()";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "demo.PieChartDemo1#createDataset()";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)" -> "DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)" -> "org.jfree.data$general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)";
  "org.jfree.data$general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)" -> "general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)";
  "org.jfree.data$general.DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)" -> "DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)";
  "org.jfree.data$xml.PieDatasetHandler#addItem(java.lang.Comparable,java.lang.Number)" -> "xml.ItemHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#addItem(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$xml.ItemHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#addItem(java.lang.Comparable,java.lang.Number)" -> "ItemHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "xml.ItemHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.data$xml.CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.dtm.ref.DTMTreeWalker#endNode(int)";
  "org.jfree.data$xml.CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.utils.TreeWalker#endNode(org.w3c.dom.Node)";
  "org.jfree.data$xml.CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "xml.CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "xml.CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.StAXStream2SAX#handleEndElement()";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.DOM2SAX#parse(org.w3c.dom.Node)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.serializer.ToHTMLSAXHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.serializer.ToHTMLSAXHandler#endElement(java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.TransformerHandlerImpl#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "org.xml.sax$helpers.XMLFilterImpl#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xerces.internal.parsers.AbstractSAXParser#endElement(com.sun.org.apache.xerces.internal.xni.QName,com.sun.org.apache.xerces.internal.xni.Augmentations)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.serializer.ToXMLSAXHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.serializer.TreeWalker#endNode(org.w3c.dom.Node)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "CategoryDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.StAXEvent2SAX#handleEndElement(javax.xml.stream.events.EndElement)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.PieDatasetHandler#endElement(java.lang.String,java.lang.String,java.lang.String)" -> "com.sun.org$apache.xerces.internal.jaxp.JAXPValidatorComponent$XNI2SAX#endElement(com.sun.org.apache.xerces.internal.xni.QName,com.sun.org.apache.xerces.internal.xni.Augmentations)";
  "org.jfree.data$general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)" -> "general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)";
  "org.jfree.data$general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)" -> "DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)";
  "org.jfree.data$general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)" -> "org.jfree.data$general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,double)" -> "DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,double)" -> "JDBCPieDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,double)" -> "jdbc.JDBCPieDataset#executeQuery(java.sql.Connection,java.lang.String)";
  "org.jfree.data$general.DefaultPieDataset#setValue(java.lang.Comparable,double)" -> "general.DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)";
  "org.jfree.chart$demo.PieChartDemo1#createDataset()" -> "demo.PieChartDemo1#createDemoPanel()";
  "org.jfree.chart$demo.PieChartDemo1#createDataset()" -> "PieChartDemo1#createDemoPanel()";
  "org.jfree.chart$demo.PieChartDemo1#createDataset()" -> "org.jfree.chart$demo.PieChartDemo1#createDemoPanel()";
  "org.jfree.chart$demo.PieChartDemo1#createDemoPanel()" -> "PieChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.PieChartDemo1#createDemoPanel()" -> "demo.PieChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.PieChartDemo1#createDemoPanel()" -> "org.jfree.chart$demo.PieChartDemo1#<init(java.lang.String)";
  "org.jfree.chart$demo.PieChartDemo1#<init(java.lang.String)" -> "PieChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$demo.PieChartDemo1#<init(java.lang.String)" -> "org.jfree.chart$demo.PieChartDemo1#main(java.lang.String[])";
  "org.jfree.chart$demo.PieChartDemo1#<init(java.lang.String)" -> "demo.PieChartDemo1#main(java.lang.String[])";
  "org.jfree.data$general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)" -> "DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)";
  "org.jfree.data$general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)" -> "org.jfree.data$general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)";
  "org.jfree.data$general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)" -> "general.DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)";
  "org.jfree.data$general.AbstractDataset#validateObject()" -> "java.io.ObjectInputStream$ValidationList$1#run()";
  "org.jfree.data$general.AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()";
  "org.jfree.data$general.AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)" -> "DynamicTimeSeriesCollection#fireSeriesChanged()";
  "org.jfree.data$general.AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)" -> "time.DynamicTimeSeriesCollection#fireSeriesChanged()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#addValue(int,int,float)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#appendData(float[])";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "DynamicTimeSeriesCollection#advanceTime()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "time.DynamicTimeSeriesCollection#addValue(int,int,float)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "DynamicTimeSeriesCollection#addValue(int,int,float)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#advanceTime()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "time.DynamicTimeSeriesCollection#addSeries(float[],int,java.lang.Comparable)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "DynamicTimeSeriesCollection#appendData(float[],int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "DynamicTimeSeriesCollection#addSeries(float[],int,java.lang.Comparable)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#addSeries(float[],int,java.lang.Comparable)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#appendData(float[],int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "DynamicTimeSeriesCollection#appendData(float[])";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "time.DynamicTimeSeriesCollection#appendData(float[])";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "time.DynamicTimeSeriesCollection#advanceTime()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#fireSeriesChanged()" -> "time.DynamicTimeSeriesCollection#appendData(float[],int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#remove(java.lang.Number,java.lang.String,boolean)" -> "xy.CategoryTableXYDataset#remove(double,java.lang.String)";
  "org.jfree.data$xy.CategoryTableXYDataset#remove(java.lang.Number,java.lang.String,boolean)" -> "CategoryTableXYDataset#remove(double,java.lang.String)";
  "org.jfree.data$xy.CategoryTableXYDataset#remove(java.lang.Number,java.lang.String,boolean)" -> "org.jfree.data$xy.CategoryTableXYDataset#remove(double,java.lang.String)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#add(java.util.List,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#add(java.util.List,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#add(java.util.List,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$time.TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)" -> "org.jfree.data$time.TimeSeriesCollection#removeSeries(int)";
  "org.jfree.data$time.TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)" -> "time.TimeSeriesCollection#removeSeries(int)";
  "org.jfree.data$time.TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)" -> "TimeSeriesCollection#removeSeries(int)";
  "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "jdbc.JDBCXYDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.sql.Connection,java.lang.String)" -> "JDBCXYDataset#executeQuery(java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.lang.String)" -> "JDBCXYDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.lang.String)" -> "org.jfree.data$jdbc.JDBCXYDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#executeQuery(java.lang.String)" -> "jdbc.JDBCXYDataset#<init(java.sql.Connection,java.lang.String)";
  "org.jfree.data$time.TimePeriodValuesCollection#removeSeries(org.jfree.data.time.TimePeriodValues)" -> "TimePeriodValuesCollection#removeSeries(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#removeSeries(org.jfree.data.time.TimePeriodValues)" -> "org.jfree.data$time.TimePeriodValuesCollection#removeSeries(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#removeSeries(org.jfree.data.time.TimePeriodValues)" -> "time.TimePeriodValuesCollection#removeSeries(int)";
  "org.jfree.data$xy.CategoryTableXYDataset#add(java.lang.Number,java.lang.Number,java.lang.String,boolean)" -> "org.jfree.data$xy.CategoryTableXYDataset#add(double,double,java.lang.String)";
  "org.jfree.data$xy.CategoryTableXYDataset#add(java.lang.Number,java.lang.Number,java.lang.String,boolean)" -> "xy.CategoryTableXYDataset#add(double,double,java.lang.String)";
  "org.jfree.data$xy.CategoryTableXYDataset#add(java.lang.Number,java.lang.Number,java.lang.String,boolean)" -> "CategoryTableXYDataset#add(double,double,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "xml.CategoryDatasetHandler#addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "CSV#extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "CategoryDatasetHandler#addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$category.DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "category.DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$io.CSV#extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "io.CSV#extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$xml.CategoryDatasetHandler#addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)" -> "demo.BarChartDemo1#createDataset()";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.chart$demo.BarChartDemo1#createDataset()";
  "org.jfree.data$category.DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)" -> "BarChartDemo1#createDataset()";
  "org.jfree.data$io.CSV#extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)" -> "org.jfree.data$io.CSV#readCategoryDataset(java.io.Reader)";
  "org.jfree.data$io.CSV#extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)" -> "io.CSV#readCategoryDataset(java.io.Reader)";
  "org.jfree.data$io.CSV#extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)" -> "CSV#readCategoryDataset(java.io.Reader)";
  "org.jfree.data$xml.CategoryDatasetHandler#addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)" -> "xml.CategorySeriesHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.CategoryDatasetHandler#addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$xml.CategorySeriesHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.CategoryDatasetHandler#addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)" -> "CategorySeriesHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String,boolean)" -> "org.jfree.data$time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String)";
  "org.jfree.data$time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String,boolean)" -> "time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String)";
  "org.jfree.data$time.TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String,boolean)" -> "TimeTableXYDataset#remove(org.jfree.data.time.TimePeriod,java.lang.String)";
  "org.jfree.data$general.DefaultValueDataset#setValue(java.lang.Number)" -> "JThermometer#setValue(java.lang.Number)";
  "org.jfree.data$general.DefaultValueDataset#setValue(java.lang.Number)" -> "plot.JThermometer#setValue(java.lang.Number)";
  "org.jfree.data$general.DefaultValueDataset#setValue(java.lang.Number)" -> "org.jfree.chart$plot.JThermometer#setValue(java.lang.Number)";
  "org.jfree.chart$plot.JThermometer#setValue(java.lang.Number)" -> "plot.JThermometer#setValue(double)";
  "org.jfree.chart$plot.JThermometer#setValue(java.lang.Number)" -> "org.jfree.chart$plot.JThermometer#setValue(double)";
  "org.jfree.chart$plot.JThermometer#setValue(java.lang.Number)" -> "JThermometer#setValue(double)";
  "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset)" -> "CombinedDataset#add(org.jfree.data.general.SeriesDataset,int)";
  "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset)" -> "general.CombinedDataset#add(org.jfree.data.general.SeriesDataset,int)";
  "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset)" -> "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset,int)";
  "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset[])" -> "org.jfree.data$general.CombinedDataset#<init(org.jfree.data.general.SeriesDataset[])";
  "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset[])" -> "CombinedDataset#<init(org.jfree.data.general.SeriesDataset[])";
  "org.jfree.data$general.CombinedDataset#add(org.jfree.data.general.SeriesDataset[])" -> "general.CombinedDataset#<init(org.jfree.data.general.SeriesDataset[])";
  "org.jfree.chart$plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.PolarPlot#setDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.PolarPlot#setDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "PolarPlot#setDataset(org.jfree.data.xy.XYDataset)";
  "XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.XYPlot#mapDatasetToDomainAxis(int,int)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.XYPlot#mapDatasetToDomainAxis(int,int)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.XYPlot#mapDatasetToRangeAxis(int,int)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.XYPlot#mapDatasetToRangeAxis(int,int)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "XYPlot#mapDatasetToDomainAxis(int,int)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "XYPlot#mapDatasetToRangeAxis(int,int)";
  "plot.PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "CategoryPlot#mapDatasetToRangeAxis(int,int)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.CategoryPlot#mapDatasetToRangeAxis(int,int)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.CategoryPlot#mapDatasetToDomainAxis(int,int)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "CategoryPlot#mapDatasetToDomainAxis(int,int)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "org.jfree.chart$plot.CategoryPlot#mapDatasetToRangeAxis(int,int)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)" -> "plot.CategoryPlot#mapDatasetToDomainAxis(int,int)";
  "org.jfree.chart$plot.CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$plot.CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)" -> "CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)" -> "plot.CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)" -> "plot.XYPlot#setDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)" -> "XYPlot#setDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)" -> "org.jfree.chart$plot.XYPlot#setDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$plot.XYPlot#configureDomainAxes()" -> "XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)";
  "org.jfree.chart$plot.XYPlot#configureDomainAxes()" -> "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)";
  "org.jfree.chart$plot.XYPlot#configureDomainAxes()" -> "plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" -> "plot.XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" -> "XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" -> "XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" -> "plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" -> "org.jfree.chart$plot.XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" -> "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$plot.XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "plot.XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)" -> "XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" -> "plot.CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "plot.CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" -> "CombinedDomainXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" -> "plot.CombinedDomainXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" -> "CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$plot.XYPlot#configureRangeAxes()" -> "CombinedRangeXYPlot#remove(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.XYPlot#configureRangeAxes()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#remove(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.XYPlot#configureRangeAxes()" -> "plot.CombinedRangeXYPlot#remove(org.jfree.chart.plot.XYPlot)";
  "org.jfree.chart$plot.CategoryPlot#configureRangeAxes()" -> "CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#configureRangeAxes()" -> "plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)";
  "org.jfree.chart$plot.CategoryPlot#configureRangeAxes()" -> "CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)";
  "org.jfree.chart$plot.CategoryPlot#configureRangeAxes()" -> "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)";
  "CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$plot.CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)" -> "plot.CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDifferenceRenderer#setPositivePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYStepAreaRenderer#setPlotArea(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setLegendBar(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineRenderer3D#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDotRenderer#setLegendShape(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#setPlotArea(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LevelRenderer#setMaximumItemWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.MinMaxCategoryRenderer#setObjectIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "MinMaxCategoryRenderer#setGroupStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYStepAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setMinimumBarLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.GanttRenderer#setCompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYErrorRenderer#setDrawYError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYErrorRenderer#setDrawYError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYErrorRenderer#setCapLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYErrorRenderer#setErrorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StatisticalBarRenderer#setErrorIndicatorStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.StackedXYBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.MinMaxCategoryRenderer#setDrawLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.GanttRenderer#setIncompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.AbstractRenderer#fireChangeEvent()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYStepAreaRenderer#setShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.HighLowRenderer#setOpenTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLine3DRenderer#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#setOpenTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYErrorRenderer#setErrorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDotRenderer#setDotHeight(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDotRenderer#setDotWidth(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYStepAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDifferenceRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYErrorRenderer#setCapLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.MinMaxCategoryRenderer#setDrawLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "MinMaxCategoryRenderer#setDrawLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.MinMaxCategoryRenderer#setMinIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.GanttRenderer#setEndPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StackedBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AreaRenderer#setEndType(org.jfree.chart.renderer.AreaRendererEndType)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "MinMaxCategoryRenderer#setMinIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#setErrorIndicatorStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#setNegativePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYStepAreaRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineRenderer3D#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLine3DRenderer#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#setDrawXError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYAreaRenderer#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#setDrawCloseTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StackedAreaRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "HighLowRenderer#setOpenTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDifferenceRenderer#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.MinMaxCategoryRenderer#setObjectIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "CategoryStepRenderer#setStagger(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDotRenderer#setDotWidth(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDifferenceRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDifferenceRenderer#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.GanttRenderer#setCompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#setLegendShape(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setLegendBar(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.GanttRenderer#setCompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDotRenderer#setDotHeight(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLine3DRenderer#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYAreaRenderer2#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineRenderer3D#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYAreaRenderer2#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LevelRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setMinimumBarLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StackedXYBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#setErrorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.MinMaxCategoryRenderer#setGroupStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StackedBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StatisticalLineAndShapeRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setMinimumBarLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#setDrawOpenTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYErrorRenderer#setDrawXError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.HighLowRenderer#setDrawCloseTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLine3DRenderer#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYAreaRenderer#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineRenderer3D#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "GanttRenderer#setEndPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.GanttRenderer#setStartPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDifferenceRenderer#setPositivePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLine3DRenderer#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#setDrawYError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "HighLowRenderer#setDrawOpenTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setIncludeBaseInRange(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDifferenceRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#setMinIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYAreaRenderer2#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.StackedXYAreaRenderer2#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StatisticalBarRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#setRangeBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.HighLowRenderer#setOpenTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setIncludeBaseInRange(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYStepAreaRenderer#setRangeBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDifferenceRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#setPrecision(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYStepAreaRenderer#setPlotArea(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYStepAreaRenderer#setShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDifferenceRenderer#setNegativePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYStepAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractRenderer#fireChangeEvent()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYErrorRenderer#setDrawYError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StatisticalLineAndShapeRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "MinMaxCategoryRenderer#setGroupPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYSplineAndShapeRenderer#setPrecision(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setUseYInterval(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDotRenderer#setLegendShape(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.GanttRenderer#setEndPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setMinimumBarLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineRenderer3D#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYStepAreaRenderer#setPlotArea(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.MinMaxCategoryRenderer#setGroupStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StackedBarRenderer3D#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.CategoryStepRenderer#setStagger(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.HighLowRenderer#setDrawOpenTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LevelRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#setPositivePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineRenderer3D#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#setDrawLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "HighLowRenderer#setCloseTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.MinMaxCategoryRenderer#setGroupPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "GanttRenderer#setIncompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYErrorRenderer#setErrorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StackedBarRenderer3D#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.HighLowRenderer#setDrawCloseTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#setShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LevelRenderer#setMaximumItemWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setUseYInterval(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.MinMaxCategoryRenderer#setMinIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LevelRenderer#setMaximumItemWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LevelRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "MinMaxCategoryRenderer#setMaxIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StackedBarRenderer3D#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "ScatterRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#setGroupPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.StackedXYAreaRenderer2#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StatisticalBarRenderer#setErrorIndicatorStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYStepAreaRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StackedBarRenderer3D#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.MinMaxCategoryRenderer#setMaxIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.StatisticalBarRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.GanttRenderer#setStartPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.HighLowRenderer#setCloseTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AreaRenderer#setEndType(org.jfree.chart.renderer.AreaRendererEndType)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLine3DRenderer#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#setObjectIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.GanttRenderer#setIncompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYBarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StatisticalLineAndShapeRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDotRenderer#setLegendShape(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDifferenceRenderer#setNegativePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StackedBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AreaRenderer#setEndType(org.jfree.chart.renderer.AreaRendererEndType)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.GanttRenderer#setIncompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.MinMaxCategoryRenderer#setGroupPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#setCapLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.GanttRenderer#setEndPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYAreaRenderer#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setIncludeBaseInRange(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setLegendBar(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setBaseLinesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "HighLowRenderer#setDrawCloseTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDotRenderer#setDotHeight(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LevelRenderer#setMaximumItemWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineRenderer3D#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StackedAreaRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#setDotWidth(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StackedBarRenderer3D#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setIncludeBaseInRange(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.GanttRenderer#setStartPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StackedXYAreaRenderer2#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYAreaRenderer#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "MinMaxCategoryRenderer#setObjectIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDifferenceRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StatisticalBarRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "BarRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setUseSeriesOffset(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setLegendBar(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYDifferenceRenderer#setPositivePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYStepAreaRenderer#setShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#setCloseTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StatisticalBarRenderer#setErrorIndicatorStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLine3DRenderer#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setUseYInterval(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYSplineAndShapeRenderer#setPrecision(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#setStagger(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYStepAreaRenderer#setRangeBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AreaRenderer#setEndType(org.jfree.chart.renderer.AreaRendererEndType)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYAreaRenderer2#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYErrorRenderer#setDrawXError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "StackedAreaRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYAreaRenderer2#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLine3DRenderer#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDifferenceRenderer#setRoundXCoordinates(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYStepAreaRenderer#setRangeBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#setDotHeight(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#setMaxIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setDrawBarOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setBase(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LevelRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYErrorRenderer#setDrawXError(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#setErrorIndicatorPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#setGroupStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "GanttRenderer#setStartPercent(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setUseYInterval(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StackedBarRenderer3D#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYSplineAndShapeRenderer#setPrecision(int)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#setLegendArea(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.StackedXYBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYErrorRenderer#setCapLength(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.StackedBarRenderer#setRenderAsPercentages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYStepAreaRenderer#setShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setDrawOutlines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "GanttRenderer#setCompletePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYBarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.BarRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.LineRenderer3D#setWallPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.category.ScatterRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.MinMaxCategoryRenderer#setMaxIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.CategoryStepRenderer#setStagger(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.HighLowRenderer#setDrawOpenTicks(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.LineRenderer3D#setYOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.HighLowRenderer#setCloseTickPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "LineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYDifferenceRenderer#setNegativePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.ScatterRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.xy.XYLineAndShapeRenderer#setBaseShapesFilled(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLine3DRenderer#setXOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDifferenceRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "AbstractCategoryItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYAreaRenderer2#setOutline(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "category.ScatterRenderer#setUseFillPaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "renderer.category.AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)" -> "XYDotRenderer#setDotWidth(int)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "category.AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "renderer.category.AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "renderer.xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "org.jfree.chart$renderer.xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYStepRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYStepRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "XYStepRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYStepRenderer#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYStepRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)" -> "category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)" -> "AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)" -> "renderer.category.AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "StackedXYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "renderer.xy.StackedXYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "xy.StackedXYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.StackedXYBarRenderer#<init(double)" -> "renderer.xy.StackedXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.StackedXYBarRenderer#<init(double)" -> "xy.StackedXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.StackedXYBarRenderer#<init(double)" -> "StackedXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.StackedXYBarRenderer#<init(double)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "editor.DefaultPlotEditor#updatePlotProperties(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "DefaultPlotEditor#updatePlotProperties(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setBaseShapesVisible(boolean)" -> "org.jfree.chart$editor.DefaultPlotEditor#updatePlotProperties(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$editor.DefaultPlotEditor#updatePlotProperties(org.jfree.chart.plot.Plot)" -> "org.jfree.chart$editor.DefaultChartEditor#updateChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultPlotEditor#updatePlotProperties(org.jfree.chart.plot.Plot)" -> "DefaultChartEditor#updateChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$editor.DefaultPlotEditor#updatePlotProperties(org.jfree.chart.plot.Plot)" -> "editor.DefaultChartEditor#updateChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "XYLineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "renderer.xy.XYLineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer#setIncludeBaseInRange(boolean)" -> "org.jfree.chart$renderer.category.GanttRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#setIncludeBaseInRange(boolean)" -> "category.GanttRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#setIncludeBaseInRange(boolean)" -> "GanttRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#setIncludeBaseInRange(boolean)" -> "renderer.category.GanttRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "renderer.category.StackedBarRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "StackedBarRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "category.StackedBarRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" -> "org.jfree.chart$renderer.category.StackedBarRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init(boolean)" -> "renderer.category.StackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init(boolean)" -> "org.jfree.chart$renderer.category.StackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init(boolean)" -> "category.StackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init(boolean)" -> "StackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init()" -> "renderer.category.GroupedStackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init()" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init()" -> "category.GroupedStackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer#<init()" -> "GroupedStackedBarRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)" -> "renderer.category.AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "XYLineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer#setMinimumBarLength(double)" -> "renderer.category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.BarRenderer#setMinimumBarLength(double)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.BarRenderer#setMinimumBarLength(double)" -> "WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.BarRenderer#setMinimumBarLength(double)" -> "category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#<init()";
  "org.jfree.chart$renderer.category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "renderer.category.WaterfallBarRenderer#<init()";
  "org.jfree.chart$renderer.category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "category.WaterfallBarRenderer#<init()";
  "org.jfree.chart$renderer.category.WaterfallBarRenderer#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "WaterfallBarRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)" -> "category.AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "category.LineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "LineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesShapesVisible(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBlockRenderer#setBlockAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBlockRenderer#setPaintScale(org.jfree.chart.renderer.PaintScale)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYStepRenderer#setStepPoint(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setPlotImages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYStepRenderer#setStepPoint(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setPlotLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.WaterfallBarRenderer#setFirstBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#setNegativeBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setGapThreshold(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setAutoWidthGap(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setUpPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#setShapePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#setPaintScale(org.jfree.chart.renderer.PaintScale)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBoxAndWhiskerRenderer#setBoxWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setVolumePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setDrawVolume(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setMaxCandleWidthInMilliseconds(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBlockRenderer#setBlockHeight(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBoxAndWhiskerRenderer#setBoxPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.BoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "WaterfallBarRenderer#setFirstBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "BoxAndWhiskerRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.WaterfallBarRenderer#setPositiveBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setDownPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setUpPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBlockRenderer#setBlockAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setPlotLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setDownPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.BoxAndWhiskerRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setMaxCandleWidthInMilliseconds(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setAutoWidthGap(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.DeviationRenderer#setAlpha(float)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#setFirstBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setMaxCandleWidthInMilliseconds(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setAutoWidthFactor(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setPlotLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBlockRenderer#setBlockHeight(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setAutoWidthMethod(int)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setDrawVolume(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setPlotLines(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseSeriesVisible(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setCandleWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#setBlockHeight(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseCreateEntities(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBoxAndWhiskerRenderer#setBoxPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setPlotImages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseShape(java.awt.Shape,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "WaterfallBarRenderer#setPositiveBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.GroupedStackedBarRenderer#setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#setBlockAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setAutoWidthFactor(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setItemLabelAnchorOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StackedXYAreaRenderer#setShapeStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#setBlockWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.WaterfallBarRenderer#setNegativeBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseShape(java.awt.Shape,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StackedXYAreaRenderer#setShapePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBoxAndWhiskerRenderer#setBoxWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#setLastBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "WaterfallBarRenderer#setLastBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBasePaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.BoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBlockRenderer#setBlockWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisible(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBlockRenderer#setBlockHeight(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setPlotDiscontinuous(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setPlotDiscontinuous(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBasePaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setPlotImages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseShape(java.awt.Shape,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.BoxAndWhiskerRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBoxAndWhiskerRenderer#setBoxWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBlockRenderer#setPaintScale(org.jfree.chart.renderer.PaintScale)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setGapThreshold(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setGapThresholdType(org.jfree.chart.util.UnitType)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.DeviationRenderer#setAlpha(float)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setUpPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBlockRenderer#setBlockAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#setShapeStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBoxAndWhiskerRenderer#setBoxPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setDownPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "WaterfallBarRenderer#setNegativeBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setAutoWidthGap(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYStepRenderer#setStepPoint(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StackedXYAreaRenderer#setShapePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setDrawVolume(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "BoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseCreateEntities(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setAutoWidthMethod(int)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBlockRenderer#setPaintScale(org.jfree.chart.renderer.PaintScale)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setGapThresholdType(org.jfree.chart.util.UnitType)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setGapThreshold(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setUpPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setLegendLine(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setUseOutlinePaint(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.WaterfallBarRenderer#setFirstBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBasePaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StackedXYAreaRenderer#setShapeStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseCreateEntities(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setCandleWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setAutoWidthMethod(int)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.BoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setAutoWidthFactor(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.WaterfallBarRenderer#setLastBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBlockRenderer#setBlockWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#setBoxWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setItemLabelAnchorOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.WaterfallBarRenderer#setPositiveBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setMaxCandleWidthInMilliseconds(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#setBoxPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.BoxAndWhiskerRenderer#setItemMargin(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setSeriesShapesFilled(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setDownPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setAutoWidthFactor(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setCandleWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYBlockRenderer#setBlockWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setPlotImages(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setItemLabelAnchorOffset(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "XYStepRenderer#setStepPoint(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setPlotDiscontinuous(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.WaterfallBarRenderer#setLastBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.XYBoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "DeviationRenderer#setAlpha(float)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.DeviationRenderer#setAlpha(float)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#setPositiveBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setVolumePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StackedXYAreaRenderer#setShapeStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "StandardXYItemRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setBaseShapesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setAutoWidthGap(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setGapThresholdType(org.jfree.chart.util.UnitType)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StandardXYItemRenderer#setGapThresholdType(org.jfree.chart.util.UnitType)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "BoxAndWhiskerRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setAutoWidthMethod(int)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "CandlestickRenderer#setVolumePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.BoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.GroupedStackedBarRenderer#setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.StackedXYAreaRenderer#setShapePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "BoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.StandardXYItemRenderer#setPlotDiscontinuous(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.CandlestickRenderer#setCandleWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.XYBoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseSeriesVisible(boolean,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#setFillBox(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.CandlestickRenderer#setDrawVolume(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.xy.AbstractXYItemRenderer#removeAnnotations()";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "category.WaterfallBarRenderer#setNegativeBarPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#setVolumePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractXYItemRenderer#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "GroupedStackedBarRenderer#setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#setGapThreshold(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "renderer.category.BoxAndWhiskerRenderer#setMaximumBarWidth(double)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#setArtifactPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#fireChangeEvent()" -> "AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)" -> "renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)" -> "AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#lookupSeriesFillPaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#lookupSeriesFillPaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "xy.XYLineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "XYLineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "renderer.AbstractRenderer#getItemFillPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "AbstractRenderer#getItemFillPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesFillPaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)";
  "renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getLegendItems()";
  "renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "org.jfree.chart$plot.XYPlot#getLegendItems()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getLegendItems()" -> "LegendTitle#fetchLegendItems()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getLegendItems()" -> "title.LegendTitle#fetchLegendItems()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getLegendItems()" -> "org.jfree.chart$title.LegendTitle#fetchLegendItems()";
  "org.jfree.chart$title.LegendTitle#fetchLegendItems()" -> "org.jfree.chart$title.LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$title.LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)";
  "org.jfree.chart$title.LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$block.ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "block.ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "block.ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "AbstractBlock#arrange(java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.AbstractBlock#arrange(java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BorderArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BorderArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "title.LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "org.jfree.chart$block.FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "block.FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)";
  "org.jfree.chart$block.BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)" -> "block.BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)" -> "block.BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)" -> "org.jfree.chart$block.BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)";
  "org.jfree.chart$block.BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.BorderArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.GridArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.AbstractBlock#arrange(java.awt.Graphics2D)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.BorderArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.BorderArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "block.BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$block.GridArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.GridArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "GridArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.GridArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.GridArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "GridArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.GridArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.GridArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "GridArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "CenterArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$block.CenterArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "CenterArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "block.CenterArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)" -> "org.jfree.chart$block.CenterArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "GridArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "BorderArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.BorderArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.BorderArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.BorderArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.GridArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.experimental$chart.annotations.XYTitleAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "XYTitleAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$title.CompositeTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" -> "block.ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)";
  "org.jfree.chart$plot.XYPlot#getLegendItems()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getLegendItems()" -> "plot.CombinedRangeXYPlot#getLegendItems()";
  "plot.CombinedRangeXYPlot#getLegendItems()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedRangeXYPlot#getLegendItems()" -> "plot.CombinedDomainXYPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedRangeXYPlot#getLegendItems()" -> "CombinedDomainXYPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedRangeXYPlot#getLegendItems()" -> "CombinedRangeXYPlot#getLegendItems()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "AbstractXYItemRenderer#getLegendItems()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "xy.AbstractXYItemRenderer#getLegendItems()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "XYPlot#getLegendItems()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "renderer.xy.AbstractXYItemRenderer#getLegendItems()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getLegendItem(int,int)" -> "plot.XYPlot#getLegendItems()";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "org.jfree.chart$renderer.category.ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "category.ScatterRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "renderer.category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "org.jfree.chart$renderer.category.ScatterRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "ScatterRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "renderer.category.LineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "category.ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "renderer.category.ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "category.LineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "renderer.category.ScatterRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemFillPaint(int,int)" -> "LineAndShapeRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "renderer.xy.DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "xy.DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "org.jfree.chart$renderer.xy.DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "renderer.xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "renderer.xy.DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "org.jfree.chart$plot.XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.xy.DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.xy.DeviationRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "plot.XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "renderer.xy.XYErrorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "xy.XYErrorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "XYErrorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.category.ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "plot.CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.ScatterRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "org.jfree.chart$plot.CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "category.ScatterRenderer#getLegendItem(int,int)" -> "org.jfree.chart$plot.CategoryPlot#getLegendItems()";
  "category.ScatterRenderer#getLegendItem(int,int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getLegendItems()";
  "org.jfree.chart$plot.CategoryPlot#getLegendItems()" -> "plot.CombinedDomainCategoryPlot#getLegendItems()";
  "plot.CombinedDomainCategoryPlot#getLegendItems()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#getLegendItems()" -> "plot.CombinedRangeCategoryPlot#getLegendItems()";
  "plot.CombinedRangeCategoryPlot#getLegendItems()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getLegendItems()" -> "CombinedDomainCategoryPlot#getLegendItems()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getLegendItems()" -> "CombinedRangeCategoryPlot#getLegendItems()";
  "org.jfree.chart$renderer.category.ScatterRenderer#getLegendItem(int,int)" -> "category.AbstractCategoryItemRenderer#getLegendItems()";
  "org.jfree.chart$renderer.category.ScatterRenderer#getLegendItem(int,int)" -> "renderer.category.AbstractCategoryItemRenderer#getLegendItems()";
  "org.jfree.chart$renderer.category.ScatterRenderer#getLegendItem(int,int)" -> "plot.CategoryPlot#getLegendItems()";
  "org.jfree.chart$renderer.category.ScatterRenderer#getLegendItem(int,int)" -> "CategoryPlot#getLegendItems()";
  "org.jfree.chart$renderer.category.ScatterRenderer#getLegendItem(int,int)" -> "AbstractCategoryItemRenderer#getLegendItems()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "category.StatisticalLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "renderer.category.StatisticalLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" -> "StatisticalLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)" -> "renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)" -> "AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)" -> "xy.AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)" -> "renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)" -> "AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)" -> "AbstractRenderer#setBaseFillPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setBaseFillPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)" -> "renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)" -> "AbstractRenderer#setSeriesShape(int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)" -> "AbstractRenderer#lookupSeriesShape(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)" -> "renderer.AbstractRenderer#lookupSeriesShape(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "AbstractXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "xy.YIntervalRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "renderer.xy.YIntervalRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "renderer.category.AbstractCategoryItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "StandardXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "renderer.DefaultPolarItemRenderer#getLegendItem(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "DefaultPolarItemRenderer#getLegendItem(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "renderer.xy.AbstractXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "AbstractCategoryItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "renderer.xy.StandardXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "org.jfree.chart$renderer.xy.YIntervalRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "AbstractRenderer#getItemShape(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "xy.AbstractXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "category.AbstractCategoryItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "xy.StandardXYItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#getLegendItem(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "renderer.AbstractRenderer#getItemShape(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesShape(int)" -> "YIntervalRenderer#getLegendItem(int,int)";
  "renderer.DefaultPolarItemRenderer#getLegendItem(int)" -> "org.jfree.chart$plot.PolarPlot#getLegendItems()";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "category.LineRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "YIntervalRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.category.LineRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "xy.YIntervalRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "xy.StackedXYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.category.LineRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.xy.YIntervalRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.xy.YIntervalRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.xy.XYStepAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "xy.XYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.xy.StackedXYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "XYStepAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "StackedXYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "LineRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "XYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "renderer.xy.XYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemShape(int,int)" -> "xy.XYStepAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "CyclicXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "xy.CyclicXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "renderer.xy.CyclicXYItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)" -> "renderer.xy.XYDifferenceRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)" -> "xy.XYDifferenceRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)" -> "XYDifferenceRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#getLegendItem(int)" -> "PolarPlot#getLegendItems()";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#getLegendItem(int)" -> "plot.PolarPlot#getLegendItems()";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#lookupSeriesPaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#lookupSeriesPaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "AreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "XYAreaRenderer2#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "AbstractRenderer#getItemPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "XYBubbleRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "xy.XYAreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.AbstractRenderer#getItemPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "category.BoxAndWhiskerRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.category.BarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "XYBarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "XYDifferenceRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "category.AreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.xy.XYBubbleRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "xy.XYBubbleRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.category.AreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.xy.XYDifferenceRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "XYDotRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "BoxAndWhiskerRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.xy.XYAreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "XYAreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "CategoryStepRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.xy.XYBubbleRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "DefaultPolarItemRenderer#drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "BarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.category.BarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "category.BarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "xy.XYBarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.xy.XYBarRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "category.CategoryStepRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.category.BoxAndWhiskerRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.category.CategoryStepRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "xy.XYAreaRenderer2#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.DefaultPolarItemRenderer#drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.xy.XYAreaRenderer2#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "renderer.xy.XYDotRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.category.AreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "xy.XYDotRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "xy.XYDifferenceRenderer#getLegendItem(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesPaint(int)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#getLegendItem(int,int)";
  "DefaultPolarItemRenderer#drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)" -> "org.jfree.chart$plot.PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" -> "PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYBoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "HighLowRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "GroupedStackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.StackedAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.CandlestickRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StackedAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.VectorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.AreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "BarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.MinMaxCategoryRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StackedXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "MinMaxCategoryRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.GroupedStackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.StackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.LevelRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.VectorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StackedBarRenderer3D#drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.GanttRenderer#drawTask(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.CategoryStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.ClusteredXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.StackedXYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.HighLowRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.StackedXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "ClusteredXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.BarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.LayeredBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "GanttRenderer#drawTask(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.StackedBarRenderer3D#drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "CandlestickRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "LevelRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.BoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.GanttRenderer#drawTask(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.StackedXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.StatisticalBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.StackedBarRenderer3D#drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.GroupedStackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.StackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "CategoryStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.VectorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.StackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.LevelRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.AreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.BarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.HighLowRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYDotRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.ClusteredXYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.WindItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.MinMaxCategoryRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StatisticalBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.StackedXYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYBubbleRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "LayeredBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.LayeredBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "AreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYDotRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.BarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "WindItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.StackedAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.AreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.WindItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.CategoryStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StackedXYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "BoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYDotRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.GanttRenderer#drawTask(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.WindItemRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.LevelRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "XYBubbleRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "org.jfree.chart$renderer.category.BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYAreaRenderer2#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "xy.XYBubbleRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.CandlestickRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.xy.XYBubbleRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "category.StatisticalBarRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "VectorRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "renderer.category.BoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemPaint(int,int)" -> "StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$renderer.category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "renderer.category.LayeredBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "category.LayeredBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.LayeredBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "LayeredBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)" -> "category.GanttRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.GanttRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)" -> "renderer.category.GanttRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)" -> "GanttRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "renderer.xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "XYLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "renderer.xy.XYLineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "xy.XYLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "XYLineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "org.jfree.experimental$chart.renderer.xy.XYSmoothLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "XYSmoothLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "renderer.xy.XYSplineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "XYSplineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "xy.XYSplineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "renderer.xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "renderer.xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "xy.XYLineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYLine3DRenderer#drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)" -> "renderer.xy.XYLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "xy.XYBoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "renderer.xy.XYBoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" -> "XYBoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "BoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "renderer.category.BoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" -> "category.BoxAndWhiskerRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)" -> "category.StatisticalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)" -> "renderer.category.StatisticalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StatisticalBarRenderer#drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.statistics.StatisticalCategoryDataset,int,int)" -> "StatisticalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)" -> "StackedBarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)" -> "renderer.category.StackedBarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)" -> "category.StackedBarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)" -> "xy.XYBoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)" -> "XYBoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)" -> "XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)" -> "xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawHorizontalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#lookupBoxPaint(int,int)" -> "renderer.xy.XYBoxAndWhiskerRenderer#drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)" -> "category.IntervalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)" -> "IntervalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)" -> "renderer.category.IntervalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.IntervalBarRenderer#drawInterval(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.IntervalCategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.IntervalBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.category.GanttRenderer#drawTask(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)" -> "renderer.category.GanttRenderer#drawTasks(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.gantt.GanttCategoryDataset,int,int)";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)" -> "plot.PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)" -> "PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)" -> "AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseCreateEntities(boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseCreateEntities(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseCreateEntities(boolean,boolean)" -> "AbstractRenderer#setBaseCreateEntities(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseCreateEntities(boolean,boolean)" -> "renderer.AbstractRenderer#setBaseCreateEntities(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)" -> "AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)" -> "renderer.AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)" -> "AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)" -> "renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseShape(java.awt.Shape,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseShape(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseShape(java.awt.Shape,boolean)" -> "AbstractRenderer#setBaseShape(java.awt.Shape)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseShape(java.awt.Shape,boolean)" -> "renderer.AbstractRenderer#setBaseShape(java.awt.Shape)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)" -> "xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)" -> "AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)" -> "renderer.xy.AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisible(boolean,boolean)" -> "AbstractRenderer#setBaseSeriesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisible(boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseSeriesVisible(boolean,boolean)" -> "renderer.AbstractRenderer#setBaseSeriesVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)" -> "AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePaint(java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBasePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePaint(java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setBasePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePaint(java.awt.Paint,boolean)" -> "AbstractRenderer#setBasePaint(java.awt.Paint)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "renderer.xy.AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)" -> "renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)" -> "AbstractRenderer#setBaseStroke(java.awt.Stroke)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)" -> "xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)" -> "renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)" -> "AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYStepAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYStepAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "XYStepAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int)" -> "XYStepAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int)" -> "xy.XYStepAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYStepAreaRenderer#<init(int)" -> "renderer.xy.XYStepAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "XYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.StackedXYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.StackedXYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#<init(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "StackedXYAreaRenderer2#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "XYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.XYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.XYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.StackedXYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "StackedXYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.StackedXYAreaRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int)" -> "StackedXYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int)" -> "renderer.xy.StackedXYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int)" -> "xy.StackedXYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init(int)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int)" -> "xy.XYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int)" -> "XYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int)" -> "renderer.xy.XYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#<init(int)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "renderer.xy.CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" -> "StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "StandardXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "renderer.xy.StandardXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "StandardXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "xy.StandardXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "xy.CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "renderer.xy.CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "renderer.xy.StandardXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "xy.StandardXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer#<init(int,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init()" -> "xy.CyclicXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init()" -> "CyclicXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init()" -> "renderer.xy.CyclicXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int)" -> "xy.CyclicXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int)" -> "renderer.xy.CyclicXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int)" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer#<init(int)" -> "CyclicXYItemRenderer#<init(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)" -> "AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)" -> "renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)" -> "renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "renderer.xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "renderer.xy.XYBoxAndWhiskerRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "xy.XYBoxAndWhiskerRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" -> "XYBoxAndWhiskerRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#<init(double)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#<init(double)" -> "xy.XYBoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#<init(double)" -> "XYBoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#<init(double)" -> "renderer.xy.XYBoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)" -> "CandlestickRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)" -> "xy.CandlestickRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)" -> "renderer.xy.CandlestickRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double)" -> "renderer.xy.CandlestickRenderer#<init()";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double)" -> "CandlestickRenderer#<init()";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#<init()";
  "org.jfree.chart$renderer.xy.CandlestickRenderer#<init(double)" -> "xy.CandlestickRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" -> "renderer.category.BarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" -> "category.BarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" -> "BarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" -> "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "StackedBarRenderer3D#<init(double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "renderer.category.StackedBarRenderer3D#<init(double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "StackedBarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "renderer.category.BarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "org.jfree.chart$renderer.category.BarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "category.StackedBarRenderer3D#<init(double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "category.StackedBarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "category.BarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "BarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init(double,double)" -> "renderer.category.StackedBarRenderer3D#<init(double,double)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init()" -> "renderer.category.StackedBarRenderer3D#<init(boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init()" -> "StackedBarRenderer3D#<init(boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init()" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#<init()" -> "category.StackedBarRenderer3D#<init(boolean)";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(boolean)" -> "renderer.category.StackedBarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(boolean)" -> "StackedBarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(boolean)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init()";
  "org.jfree.chart$renderer.category.StackedBarRenderer3D#<init(boolean)" -> "category.StackedBarRenderer3D#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)" -> "AbstractRenderer#setBaseItemLabelsVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)" -> "renderer.AbstractRenderer#setBaseItemLabelsVisible(boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "renderer.AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" -> "AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)" -> "AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)" -> "renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)" -> "renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)" -> "AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)" -> "renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)" -> "AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)" -> "renderer.AbstractRenderer#lookupSeriesStroke(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)" -> "AbstractRenderer#lookupSeriesStroke(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesStroke(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesStroke(int)" -> "renderer.AbstractRenderer#getItemStroke(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesStroke(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemStroke(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesStroke(int)" -> "AbstractRenderer#getItemStroke(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)" -> "renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)" -> "AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" -> "AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" -> "renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" -> "AbstractRenderer#lookupSeriesOutlineStroke(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" -> "renderer.AbstractRenderer#lookupSeriesOutlineStroke(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlineStroke(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlineStroke(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemOutlineStroke(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlineStroke(int)" -> "AbstractRenderer#getItemOutlineStroke(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlineStroke(int)" -> "renderer.AbstractRenderer#getItemOutlineStroke(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemOutlineStroke(int,int)" -> "WaterfallBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemOutlineStroke(int,int)" -> "renderer.category.WaterfallBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemOutlineStroke(int,int)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getItemOutlineStroke(int,int)" -> "category.WaterfallBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)" -> "AbstractRenderer#setBaseItemLabelFont(java.awt.Font)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)" -> "renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font)";
  "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setBaseItemLabelFont(java.awt.Font)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#lookupSeriesOutlinePaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)" -> "AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlinePaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$renderer.AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)" -> "renderer.AbstractRenderer#lookupSeriesOutlinePaint(int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlinePaint(int)" -> "renderer.AbstractRenderer#getItemOutlinePaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlinePaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemOutlinePaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#lookupSeriesOutlinePaint(int)" -> "AbstractRenderer#getItemOutlinePaint(int,int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)" -> "renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)" -> "xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)" -> "AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "renderer.category.AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "LineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)" -> "category.LineAndShapeRenderer#setSeriesLinesVisible(int,boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)" -> "category.AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "DeviationRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "renderer.xy.DeviationRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "xy.DeviationRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "renderer.xy.XYSplineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "org.jfree.chart$renderer.xy.DeviationRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "xy.XYSplineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)" -> "XYSplineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.DeviationRenderer#<init(boolean,boolean)" -> "xy.DeviationRenderer#<init()";
  "org.jfree.chart$renderer.xy.DeviationRenderer#<init(boolean,boolean)" -> "DeviationRenderer#<init()";
  "org.jfree.chart$renderer.xy.DeviationRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.xy.DeviationRenderer#<init()";
  "org.jfree.chart$renderer.xy.DeviationRenderer#<init(boolean,boolean)" -> "renderer.xy.DeviationRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)" -> "xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)" -> "renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)" -> "XYLineAndShapeRenderer#setSeriesShapesFilled(int,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "plot.CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "plot.CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "plot.CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" -> "plot.CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$axis.ValueAxis#setFixedAutoRange(double)" -> "org.jfree.chart$axis.CyclicNumberAxis#setFixedAutoRange(double)";
  "org.jfree.chart$axis.ValueAxis#setFixedAutoRange(double)" -> "CyclicNumberAxis#setFixedAutoRange(double)";
  "org.jfree.chart$axis.ValueAxis#setFixedAutoRange(double)" -> "axis.CyclicNumberAxis#setFixedAutoRange(double)";
  "org.jfree.chart$axis.CyclicNumberAxis#setFixedAutoRange(double)" -> "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)";
  "org.jfree.chart$axis.CyclicNumberAxis#setFixedAutoRange(double)" -> "axis.CyclicNumberAxis#<init(double,double,java.lang.String)";
  "org.jfree.chart$axis.CyclicNumberAxis#setFixedAutoRange(double)" -> "CyclicNumberAxis#<init(double,double,java.lang.String)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)" -> "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)" -> "axis.CyclicNumberAxis#<init(double,java.lang.String)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)" -> "CyclicNumberAxis#<init(double,java.lang.String)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)" -> "axis.CyclicNumberAxis#<init(double,double)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)" -> "org.jfree.chart$axis.CyclicNumberAxis#<init(double,java.lang.String)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double,java.lang.String)" -> "CyclicNumberAxis#<init(double,double)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double)" -> "CyclicNumberAxis#<init(double)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double)" -> "axis.CyclicNumberAxis#<init(double)";
  "org.jfree.chart$axis.CyclicNumberAxis#<init(double,double)" -> "org.jfree.chart$axis.CyclicNumberAxis#<init(double)";
  "org.jfree.chart$axis.NumberAxis#setAutoRangeStickyZero(boolean)" -> "SymbolAxis#<init(java.lang.String,java.lang.String[])";
  "org.jfree.chart$axis.NumberAxis#setAutoRangeStickyZero(boolean)" -> "axis.SymbolAxis#<init(java.lang.String,java.lang.String[])";
  "org.jfree.chart$axis.NumberAxis#setAutoRangeStickyZero(boolean)" -> "org.jfree.chart$axis.SymbolAxis#<init(java.lang.String,java.lang.String[])";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean,boolean)" -> "axis.ValueAxis#setAutoRange(boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean,boolean)" -> "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean,boolean)" -> "ValueAxis#setAutoRange(boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "CategoryPlot#zoom(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "axis.ValueAxis#resizeRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "ModuloAxis#resizeRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "axis.ModuloAxis#resizeRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "org.jfree.chart$plot.PolarPlot#zoom(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "plot.CategoryPlot#zoom(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "ValueAxis#resizeRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "org.jfree.chart$plot.CategoryPlot#zoom(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "org.jfree.chart$axis.ModuloAxis#resizeRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "plot.PolarPlot#zoom(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "DefaultNumberAxisEditor#setAxisProperties(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "editor.DefaultNumberAxisEditor#setAxisProperties(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "PolarPlot#zoom(double)";
  "org.jfree.chart$axis.ValueAxis#setAutoRange(boolean)" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#setAxisProperties(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "org.jfree.chart$axis.ValueAxis#resizeRange(double)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "axis.ValueAxis#resizeRange(double)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "ThermometerPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "ValueAxis#resizeRange(double)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "org.jfree.chart$plot.ThermometerPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double,double)" -> "plot.ThermometerPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "ChartPanel#zoomInRange(double,double)";
  "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$ChartPanel#zoomOutRange(double,double)";
  "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$ChartPanel#zoomInRange(double,double)";
  "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "ChartPanel#zoomOutRange(double,double)";
  "org.jfree.chart$ChartPanel#zoomOutRange(double,double)" -> "ChartPanel#zoomOutBoth(double,double)";
  "org.jfree.chart$ChartPanel#zoomOutRange(double,double)" -> "org.jfree.chart$ChartPanel#zoomOutBoth(double,double)";
  "org.jfree.chart$ChartPanel#zoomInRange(double,double)" -> "ChartPanel#zoomInBoth(double,double)";
  "org.jfree.chart$ChartPanel#zoomInRange(double,double)" -> "org.jfree.chart$ChartPanel#zoomInBoth(double,double)";
  "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$ChartPanel#restoreAutoRangeBounds()";
  "org.jfree.chart$ChartPanel#restoreAutoRangeBounds()" -> "org.jfree.chart$ChartPanel#restoreAutoBounds()";
  "org.jfree.chart$ChartPanel#restoreAutoRangeBounds()" -> "ChartPanel#restoreAutoBounds()";
  "org.jfree.chart$ChartPanel#restoreAutoBounds()" -> "ChartPanel#mouseReleased(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#restoreAutoBounds()" -> "org.jfree.chart$ChartPanel#mouseReleased(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseReleased(java.awt.event.MouseEvent)" -> "java.awt.Component#processMouseEvent(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseReleased(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mouseReleased(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseReleased(java.awt.event.MouseEvent)" -> "java.awt.TrayIcon#processMouseEvent(java.awt.event.MouseEvent)";
  "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "ChartPanel#restoreAutoRangeBounds()";
  "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "CombinedDomainCategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "CombinedDomainCategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.ThermometerPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "FastScatterPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "FastScatterPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.ThermometerPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.FastScatterPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "ThermometerPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "org.jfree.chart$plot.FastScatterPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.FastScatterPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.ValueAxis#resizeRange(double)" -> "plot.FastScatterPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)";
  "org.jfree.chart$plot.FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$ChartPanel#restoreAutoDomainBounds()";
  "org.jfree.chart$plot.FastScatterPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "ChartPanel#restoreAutoDomainBounds()";
  "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "plot.CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "ChartPanel#zoomOutDomain(double,double)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$ChartPanel#zoomOutDomain(double,double)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "ChartPanel#zoomInDomain(double,double)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" -> "org.jfree.chart$ChartPanel#zoomInDomain(double,double)";
  "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "plot.CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoom(double)" -> "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoom(double)" -> "PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoom(double)" -> "plot.PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoom(double)" -> "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoom(double)" -> "PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoom(double)" -> "plot.PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "ChartPanel#zoom(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$ChartPanel#zoom(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.ModuloAxis#resizeRange(double,double)" -> "ModuloAxis#resizeRange(double)";
  "org.jfree.chart$axis.ModuloAxis#resizeRange(double,double)" -> "axis.ModuloAxis#resizeRange(double)";
  "org.jfree.chart$axis.ModuloAxis#resizeRange(double,double)" -> "org.jfree.chart$axis.ModuloAxis#resizeRange(double)";
  "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" -> "axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" -> "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" -> "PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)" -> "PeriodAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)" -> "axis.PeriodAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)" -> "org.jfree.chart$axis.PeriodAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.LogAxis#autoAdjustRange()" -> "LogAxis#configure()";
  "org.jfree.chart$axis.LogAxis#autoAdjustRange()" -> "org.jfree.chart$axis.LogAxis#configure()";
  "org.jfree.chart$axis.LogAxis#autoAdjustRange()" -> "axis.LogAxis#configure()";
  "org.jfree.chart$axis.PeriodAxis#autoAdjustRange()" -> "org.jfree.chart$axis.PeriodAxis#configure()";
  "org.jfree.chart$axis.PeriodAxis#autoAdjustRange()" -> "axis.PeriodAxis#configure()";
  "org.jfree.chart$axis.PeriodAxis#autoAdjustRange()" -> "PeriodAxis#configure()";
  "org.jfree.chart$axis.DateAxis#autoAdjustRange()" -> "axis.DateAxis#configure()";
  "org.jfree.chart$axis.DateAxis#autoAdjustRange()" -> "org.jfree.chart$axis.DateAxis#configure()";
  "org.jfree.chart$axis.DateAxis#autoAdjustRange()" -> "DateAxis#configure()";
  "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "axis.LogAxis#autoAdjustRange()";
  "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "NumberAxis#autoAdjustRange()";
  "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "DateAxis#autoAdjustRange()";
  "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "axis.NumberAxis#autoAdjustRange()";
  "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "axis.LogarithmicAxis#autoAdjustRange()";
  "org.jfree.chart$plot.XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "LogarithmicAxis#autoAdjustRange()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "LogAxis#autoAdjustRange()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "PeriodAxis#autoAdjustRange()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "axis.DateAxis#autoAdjustRange()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "axis.PeriodAxis#autoAdjustRange()";
  "org.jfree.chart$plot.CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.PolarPlot#<clinit()" -> "PolarPlot#getPlotType()";
  "org.jfree.chart$plot.PolarPlot#<clinit()" -> "PolarPlot#<clinit()";
  "org.jfree.chart$plot.PolarPlot#<clinit()" -> "org.jfree.chart$plot.PolarPlot#getPlotType()";
  "org.jfree.chart$plot.PolarPlot#<clinit()" -> "plot.PolarPlot#getPlotType()";
  "org.jfree.chart$plot.PolarPlot#<clinit()" -> "plot.PolarPlot#<clinit()";
  "org.jfree.data$KeyedObjects#clone()" -> "org.jfree.data$KeyedObjects2D#clone()";
  "org.jfree.data$KeyedObjects#clone()" -> "KeyedObjects2D#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "statistics.DefaultStatisticalCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "DefaultStatisticalCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "DefaultMultiValueCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "statistics.DefaultMultiValueCategoryDataset#clone()";
  "org.jfree.data$KeyedObjects2D#clone()" -> "DefaultBoxAndWhiskerCategoryDataset#clone()";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()" -> "StandardPieToolTipGenerator#clone()";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#clone()";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()" -> "labels.StandardPieToolTipGenerator#clone()";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()" -> "StandardPieSectionLabelGenerator#clone()";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#clone()";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#clone()" -> "labels.StandardPieSectionLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "labels.HighLowItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "TimeSeriesURLGenerator#getDateFormat()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "DateAxis#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "urls.TimeSeriesURLGenerator#<init(java.text.DateFormat,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "AbstractCategoryItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "labels.AbstractXYItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "HighLowItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "org.jfree.chart$urls.TimeSeriesURLGenerator#<init(java.text.DateFormat,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "org.jfree.chart$urls.TimeSeriesURLGenerator#getDateFormat()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "labels.AbstractCategoryItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "org.jfree.chart$axis.DateAxis#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "axis.DateAxis#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "TimeSeriesURLGenerator#<init(java.text.DateFormat,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "urls.TimeSeriesURLGenerator#getDateFormat()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()";
  "org.jfree.chart$util.RelativeDateFormat#clone()" -> "AbstractXYItemLabelGenerator#clone()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#clone()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()" -> "labels.StandardXYToolTipGenerator#clone()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()" -> "StandardXYItemLabelGenerator#clone()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()" -> "labels.StandardXYItemLabelGenerator#clone()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()" -> "StandardXYToolTipGenerator#clone()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#clone()" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "org.jfree.chart$plot.SpiderWebPlot#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "org.jfree.chart$plot.PiePlot#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "PiePlot#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "SpiderWebPlot#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "plot.SpiderWebPlot#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "plot.PiePlot#clone()";
  "org.jfree.chart$plot.Plot#clone()" -> "MeterPlot#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$xy.MatrixSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "SimpleHistogramDataset#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "YIntervalSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "MatrixSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$xy.VectorSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "DefaultKeyedValues2D#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "statistics.SimpleHistogramDataset#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "XIntervalSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "VectorSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$xy.XYSeries#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$xy.XYSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "xy.XYSeries#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "XYSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "xy.YIntervalSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "xy.MatrixSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "ohlc.OHLCSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$xy.YIntervalSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "OHLCSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "time.TimeSeries#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "TimeSeries#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "xy.XIntervalSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "xy.VectorSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$DefaultKeyedValues2D#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$xy.XIntervalSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$statistics.SimpleHistogramDataset#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "xy.XYSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "time.ohlc.OHLCSeriesCollection#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "org.jfree.data$time.TimeSeries#clone()";
  "org.jfree.chart$util.ObjectUtilities#deepClone(java.util.Collection)" -> "XYSeries#clone()";
  "org.jfree.data$DefaultKeyedValues2D#clone()" -> "org.jfree.data$category.DefaultCategoryDataset#clone()";
  "org.jfree.data$DefaultKeyedValues2D#clone()" -> "DefaultCategoryDataset#clone()";
  "org.jfree.data$DefaultKeyedValues2D#clone()" -> "TimeTableXYDataset#clone()";
  "org.jfree.data$DefaultKeyedValues2D#clone()" -> "time.TimeTableXYDataset#clone()";
  "org.jfree.data$DefaultKeyedValues2D#clone()" -> "category.DefaultCategoryDataset#clone()";
  "org.jfree.data$DefaultKeyedValues2D#clone()" -> "org.jfree.data$time.TimeTableXYDataset#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "XYLineAndShapeRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "xy.XYLineAndShapeRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "XYAreaRenderer2#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "XYAreaRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.xy.XYLineAndShapeRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.xy.XYBarRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "XYBarRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.xy.XYAreaRenderer2#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$renderer.AbstractRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "xy.StandardXYItemRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "AbstractRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.xy.XYDifferenceRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "StandardXYItemRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "xy.XYAreaRenderer2#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$title.LegendGraphic#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.xy.XYAreaRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "XYDifferenceRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.xy.StandardXYItemRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "xy.XYAreaRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "LegendGraphic#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "renderer.AbstractRenderer#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "title.LegendGraphic#clone()";
  "org.jfree.chart$util.ShapeUtilities#clone(java.awt.Shape)" -> "xy.XYDifferenceRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#clone()" -> "XYStepRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#clone()" -> "xy.XYStepRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#clone()" -> "renderer.xy.XYStepRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#clone()" -> "org.jfree.chart$renderer.xy.XYStepRenderer#clone()";
  "org.jfree.chart$renderer.AbstractRenderer#clone()" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#clone()";
  "org.jfree.chart$renderer.AbstractRenderer#clone()" -> "renderer.DefaultPolarItemRenderer#clone()";
  "org.jfree.chart$renderer.AbstractRenderer#clone()" -> "DefaultPolarItemRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#clone()" -> "StackedXYAreaRenderer2#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#clone()" -> "renderer.xy.StackedXYAreaRenderer2#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#clone()" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#clone()" -> "xy.StackedXYAreaRenderer2#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#clone()" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#clone()" -> "StackedXYAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#clone()" -> "renderer.xy.StackedXYAreaRenderer#clone()";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#clone()" -> "xy.StackedXYAreaRenderer#clone()";
  "org.jfree.chart$title.Title#clone()" -> "title.TextTitle#clone()";
  "org.jfree.chart$title.Title#clone()" -> "org.jfree.chart$title.TextTitle#clone()";
  "org.jfree.chart$title.Title#clone()" -> "TextTitle#clone()";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "java.util.Arrays$ArrayList#indexOf(java.lang.Object)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$TreeBin#find(int,java.lang.Object)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.dom.DOMConfigurationImpl#setParameter(java.lang.String,java.lang.Object)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "java.beans.VetoableChangeSupport#fireVetoableChange(java.beans.PropertyChangeEvent)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "java.util.LinkedHashMap#containsValue(java.lang.Object)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "javax.swing.text$html.MuxingAttributeSet#containsAttribute(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "javax.swing.JComboBox#contentsChanged(javax.swing.event.ListDataEvent)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "javax.swing.text$SimpleAttributeSet#containsAttributes(javax.swing.text.AttributeSet)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "javax.swing.text$html.HTMLWriter#noMatchForTagInAttributes(javax.swing.text.AttributeSet,javax.swing.text.html.HTML$Tag,java.lang.Object)";
  "org.jfree.data$xy.CategoryTableXYDataset#equals(java.lang.Object)" -> "KeyedObjects#equals(java.lang.Object)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$xy.VectorSeriesCollection#indexOf(org.jfree.data.xy.VectorSeries)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$time.TimeSeriesCollection#indexOf(org.jfree.data.time.TimeSeries)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$gantt.TaskSeriesCollection#refreshKeys()";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$gantt.TaskSeriesCollection#getColumnIndex(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$xy.DefaultXYDataset#indexOf(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPlot#getPointerIndex(org.jfree.chart.plot.dial.DialPointer)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPlot#getLayerIndex(org.jfree.chart.plot.dial.DialLayer)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$xy.DefaultXYZDataset#indexOf(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$xy.XYSeriesCollection#indexOf(org.jfree.data.xy.XYSeries)";
  "java.util.Arrays$ArrayList#indexOf(java.lang.Object)" -> "org.jfree.data$KeyedObjects2D#setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$general.WaferMapDataset#getChipValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)" -> "WaferMapDataset#getChipValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)" -> "general.WaferMapDataset#getChipValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)" -> "category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)" -> "DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$general.WaferMapDataset#getChipValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.WaferMapDataset#getChipValue(int,int)";
  "org.jfree.data$general.WaferMapDataset#getChipValue(java.lang.Comparable,java.lang.Comparable)" -> "general.WaferMapDataset#getChipValue(int,int)";
  "org.jfree.data$general.WaferMapDataset#getChipValue(java.lang.Comparable,java.lang.Comparable)" -> "WaferMapDataset#getChipValue(int,int)";
  "org.jfree.data$general.WaferMapDataset#getChipValue(int,int)" -> "org.jfree.chart$plot.WaferMapPlot#drawChipGrid(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.data$general.WaferMapDataset#getChipValue(int,int)" -> "WaferMapPlot#drawChipGrid(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.data$general.WaferMapDataset#getChipValue(int,int)" -> "plot.WaferMapPlot#drawChipGrid(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.WaferMapPlot#drawChipGrid(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "plot.WaferMapPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.WaferMapPlot#drawChipGrid(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.WaferMapPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.WaferMapPlot#drawChipGrid(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "WaferMapPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "renderer.category.AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "CategoryToPieDataset#getIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "annotations.CategoryTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "category.AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "StackedBarRenderer3D#createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "category.StackedBarRenderer3D#createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "category.CategoryToPieDataset#getIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "CategoryTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "annotations.CategoryPointerAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$category.CategoryToPieDataset#getIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "CategoryPointerAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.chart$axis.CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "axis.CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.chart$annotations.CategoryTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "renderer.category.StackedBarRenderer3D#createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)";
  "renderer.category.AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "CategoryToPieDataset#getIndex(java.lang.Comparable)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "annotations.CategoryTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "annotations.CategoryTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "category.AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$annotations.CategoryLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)" -> "CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)" -> "plot.CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.data$category.CategoryToPieDataset#getIndex(java.lang.Comparable)" -> "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getIndex(java.lang.Comparable)" -> "category.CategoryToPieDataset#getValue(java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getIndex(java.lang.Comparable)" -> "StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getIndex(java.lang.Comparable)" -> "labels.StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getIndex(java.lang.Comparable)" -> "CategoryToPieDataset#getValue(java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "plot.PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "labels.AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "org.jfree.chart$labels.AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "org.jfree.data$general.DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(java.lang.Comparable)" -> "general.DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "labels.StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)";
  "StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$plot.RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)";
  "org.jfree.chart$plot.PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)" -> "plot.PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)" -> "org.jfree.chart$plot.PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)" -> "PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" -> "PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)";
  "StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)";
  "StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)";
  "StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#getLegendItems()";
  "org.jfree.chart$plot.PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)" -> "org.jfree.chart$plot.PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.chart$plot.PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)" -> "plot.PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.chart$plot.PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)" -> "PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)" -> "plot.PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "plot.PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "plot.PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "PiePlot#getLegendItems()";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "plot.PiePlot#getLegendItems()";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "plot.RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "plot.PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" -> "PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)";
  "org.jfree.data$general.DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" -> "AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)";
  "org.jfree.data$general.DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" -> "plot.PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$general.DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" -> "PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$general.DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" -> "org.jfree.chart$plot.PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)" -> "RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues2D#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DefaultKeyedValues2D#removeValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "DefaultKeyedValues2D#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues2D#removeValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.WaferMapDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "WaferMapDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "WaferMapDataset#addValue(int,int,int)";
  "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.WaferMapDataset#addValue(int,int,int)";
  "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "general.WaferMapDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$general.WaferMapDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$general.WaferMapDataset#addValue(int,int,int)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "KeyedObjects2D#removeObject(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "statistics.DefaultStatisticalCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "DefaultStatisticalCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "KeyedObjects2D#removeColumn(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "DefaultMultiValueCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects2D#removeObject(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "statistics.DefaultMultiValueCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects2D#removeColumn(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#removeColumn(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects2D#removeColumn(int)";
  "org.jfree.data$KeyedObjects2D#removeColumn(java.lang.Comparable)" -> "KeyedObjects2D#removeColumn(int)";
  "org.jfree.data$xy.DefaultXYDataset#indexOf(java.lang.Comparable)" -> "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)";
  "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)" -> "CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#indexOf(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "category.DefaultCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "DefaultCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues2D#removeRow(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)" -> "DefaultKeyedValues2D#removeRow(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)" -> "DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)" -> "category.DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$category.DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$plot.dial.DialPlot#getPointerIndex(org.jfree.chart.plot.dial.DialPointer)" -> "plot.dial.DialPlot#removePointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.dial.DialPlot#getPointerIndex(org.jfree.chart.plot.dial.DialPointer)" -> "dial.DialPlot#removePointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.dial.DialPlot#getPointerIndex(org.jfree.chart.plot.dial.DialPointer)" -> "org.jfree.chart$plot.dial.DialPlot#removePointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.dial.DialPlot#getPointerIndex(org.jfree.chart.plot.dial.DialPointer)" -> "DialPlot#removePointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "DefaultStatisticalCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "KeyedObjects2D#removeRow(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects2D#removeRow(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "statistics.DefaultStatisticalCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "DefaultMultiValueCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "statistics.DefaultMultiValueCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultMultiValueCategoryDataset#getValues(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getQ1Value(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultMultiValueCategoryDataset#getValues(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getQ1Value(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getQ1Value(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultStatisticalCategoryDataset#getStdDevValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMinOutlier(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getStdDevValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getMinOutlier(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxOutlier(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getOutliers(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getOutliers(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getMinRegularValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultStatisticalCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultStatisticalCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getMaxRegularValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMinOutlier(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultStatisticalCategoryDataset#getStdDevValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getQ3Value(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMinRegularValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMinRegularValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getQ3Value(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getQ3Value(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxRegularValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxRegularValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getMedianValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getOutliers(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultMultiValueCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultMultiValueCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxOutlier(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getValues(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getMaxOutlier(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultStatisticalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(java.lang.Comparable,java.lang.Comparable)" -> "DefaultStatisticalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(java.lang.Comparable,java.lang.Comparable)" -> "DefaultBoxAndWhiskerCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(java.lang.Comparable,java.lang.Comparable)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$plot.dial.DialPlot#getLayerIndex(org.jfree.chart.plot.dial.DialLayer)" -> "plot.dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.DialPlot#getLayerIndex(org.jfree.chart.plot.dial.DialLayer)" -> "DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.DialPlot#getLayerIndex(org.jfree.chart.plot.dial.DialLayer)" -> "dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.DialPlot#getLayerIndex(org.jfree.chart.plot.dial.DialLayer)" -> "org.jfree.chart$plot.dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)" -> "plot.dial.DialPlot#addScale(int,org.jfree.chart.plot.dial.DialScale)";
  "org.jfree.chart$plot.dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)" -> "DialPlot#addScale(int,org.jfree.chart.plot.dial.DialScale)";
  "org.jfree.chart$plot.dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)" -> "dial.DialPlot#addScale(int,org.jfree.chart.plot.dial.DialScale)";
  "org.jfree.chart$plot.dial.DialPlot#removeLayer(org.jfree.chart.plot.dial.DialLayer)" -> "org.jfree.chart$plot.dial.DialPlot#addScale(int,org.jfree.chart.plot.dial.DialScale)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "category.GroupedStackedBarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "renderer.category.GroupedStackedBarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)";
  "org.jfree.data$KeyToGroupMap#getGroupIndex(java.lang.Comparable)" -> "GroupedStackedBarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" -> "category.GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" -> "renderer.category.GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" -> "GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "category.GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$plot.CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedRangeCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "CombinedDomainCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "plot.CombinedDomainCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "plot.CombinedRangeCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)" -> "CombinedRangeCategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "plot.CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$KeyedObjects2D#setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)" -> "KeyedObjects2D#addObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects2D#setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$KeyedObjects2D#addObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)";
  "KeyedObjects#equals(java.lang.Object)" -> "org.jfree.chart$axis.SegmentedTimeline#equals(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline#equals(java.lang.Object,java.lang.Object)" -> "axis.SegmentedTimeline#equals(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline#equals(java.lang.Object,java.lang.Object)" -> "SegmentedTimeline#equals(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline#equals(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.SegmentedTimeline#equals(java.lang.Object)";
  "axis.SegmentedTimeline#equals(java.lang.Object)" -> "org.jfree.chart$JFreeChart#setAntiAlias(boolean)";
  "axis.SegmentedTimeline#equals(java.lang.Object)" -> "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "gantt.TaskSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "MeterInterval#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "CategoryTick#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "urls.StandardXYURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "block.LineBorder#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.CompassPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYPolygonAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYDataItem#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "renderer.AbstractRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "NumberAxis#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.SpiderWebPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "CyclicNumberAxis#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.YIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYDrawableAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "labels.BubbleXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.XYPolygonAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractBlock#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractCategoryItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "CombinedDomainCategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractCategoryItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "ChartRenderingInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYShapeAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "needle.MeterNeedle#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "axis.ValueAxis#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.XYPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "BorderArrangement#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$statistics.BoxAndWhiskerItem#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.TimePeriodValuesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "MatrixSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "VectorSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.XYSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "statistics.MeanAndStandardDeviation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "statistics.HistogramDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.CompassPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.VectorSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "IntervalMarker#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "time.ohlc.OHLCSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.Axis#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.MatrixSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.FastScatterPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.DefaultTableXYDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "CompassPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.Marker#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.DefaultTableXYDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$general.DefaultValueDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.YIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYLineAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.XYDataItem#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "Plot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "axis.CategoryTick#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "statistics.BoxAndWhiskerItem#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.TextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "entity.ChartEntity#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "gantt.Task#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "DateTickUnit#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.VectorSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "Axis#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.MatrixSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.FastScatterPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$general.DefaultKeyedValueDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYTitleAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "util.AbstractObjectList#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "block.AbstractBlock#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYDrawableAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.AbstractXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "DialPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "StandardCategoryURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.PlotRenderingInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.ThermometerPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYLineAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.AbstractXYAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "MarkerAxisBand#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$urls.StandardXYURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.PiePlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "CategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "TimePeriodValuesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "entity.StandardEntityCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.Plot#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "LegendItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "axis.Tick#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYPointerAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "KeyToGroupMap#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.TextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "Marker#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$ChartRenderingInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "renderer.xy.StackedXYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$entity.LegendItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "HistogramDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYImageAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.MeterInterval#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "urls.StandardPieURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$urls.StandardCategoryURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "StackedXYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "TextBox#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYShapeAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.PlotRenderingInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$text.TextBox#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "PlotRenderingInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "axis.DateTickUnit#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.experimental$chart.annotations.XYTitleAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$statistics.MeanAndStandardDeviation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "KeyedObject#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "TaskSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "LineBorder#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$block.BorderArrangement#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractXYAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$gantt.Task#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.XYShapeAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.XYDataItem#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "MeanAndStandardDeviation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.XYLineAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$JFreeChart#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYPointerAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.MarkerAxisBand#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "category.AbstractCategoryItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.XYSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYBoxAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "axis.MarkerAxisBand#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "plot.IntervalMarker#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.MeterInterval#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.XYIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.TimeSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$entity.StandardEntityCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "DefaultValueDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.IntervalMarker#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.XYDrawableAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "TimeSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$urls.StandardPieURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYBoxAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "DefaultBoxAndWhiskerCategoryDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "YIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.XYPointerAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$statistics.HistogramDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "JFreeChart#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "DefaultTableXYDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "general.DefaultValueDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$renderer.AbstractRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$KeyedObject#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "ohlc.OHLCSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYImageAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.Tick#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "annotations.XYPolygonAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$gantt.TaskSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "StandardEntityCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "axis.Axis#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "time.TimeSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.Marker#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "general.DefaultKeyedValueDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.XYImageAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "urls.StandardCategoryURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.data$xy.XIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "ChartEntity#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "XYIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "text.TextBox#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "StandardXYURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "time.TimePeriodValuesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "Task#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "Tick#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$annotations.AbstractXYAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$block.LineBorder#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "StandardPieURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "AbstractObjectList#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "DefaultKeyedValueDataset#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "TextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "xy.XIntervalSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "MeterNeedle#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "OHLCSeriesCollection#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "BoxAndWhiskerItem#equals(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)" -> "block.BorderArrangement#equals(java.lang.Object)";
  "gantt.TaskSeriesCollection#equals(java.lang.Object)" -> "org.jfree.chart$JFreeChart#getAntiAlias()";
  "gantt.TaskSeriesCollection#equals(java.lang.Object)" -> "org.jfree.data$KeyedObjects#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "javax.swing.JOptionPane#showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.parsers.DOMParserImpl#canSetParameter(java.lang.String,java.lang.Object)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.XSAttributeGroupDecl#validRestrictionOf(java.lang.String,com.sun.org.apache.xerces.internal.impl.xs.XSAttributeGroupDecl)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "javax.swing.text$html.TableView#updateInsets()";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "ObjectUtilities#equal(java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator#processElementContent(com.sun.org.apache.xerces.internal.xni.QName)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "java.util.AbstractCollection#remove(java.lang.Object)";
  "org.jfree.data$KeyedObjects#equals(java.lang.Object)" -> "java.util.AbstractMap#get(java.lang.Object)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.chart$text.TextLine#removeFragment(org.jfree.chart.text.TextFragment)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.chart$plot.PolarPlot#removeCornerTextItem(java.lang.String)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.data$gantt.Task#removeSubtask(org.jfree.data.gantt.Task)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.data$KeyToGroupMap#mapKeyToGroup(java.lang.Comparable,java.lang.Comparable)";
  "java.util.AbstractCollection#remove(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)";
  "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)" -> "org.jfree.chart$JFreeChart#removeLegend()";
  "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)" -> "JFreeChart#removeLegend()";
  "org.jfree.chart$JFreeChart#removeLegend()" -> "ChartFactory#createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#removeLegend()" -> "plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$JFreeChart#removeLegend()" -> "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$JFreeChart#removeLegend()" -> "MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$ChartFactory#createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)";
  "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)" -> "plot.MultiplePiePlot#<init()";
  "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)" -> "ChartFactory#createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)";
  "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)" -> "MultiplePiePlot#<init()";
  "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$plot.MultiplePiePlot#<init()";
  "org.jfree.chart$plot.MultiplePiePlot#<init(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$ChartFactory#createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)";
  "org.jfree.chart$text.TextLine#removeFragment(org.jfree.chart.text.TextFragment)" -> "text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.TextLine#removeFragment(org.jfree.chart.text.TextFragment)" -> "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.TextLine#removeFragment(org.jfree.chart.text.TextFragment)" -> "TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)" -> "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)" -> "axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)" -> "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)" -> "CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)" -> "text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)" -> "TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)" -> "org.jfree.chart$plot.Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)" -> "title.TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)" -> "plot.Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)" -> "TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)" -> "Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)" -> "org.jfree.chart$title.TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$plot.Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.SpiderWebPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "plot.SpiderWebPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "SpiderWebPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$title.TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.chart$title.TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)" -> "TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)" -> "title.TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)" -> "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)" -> "axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)" -> "CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)" -> "ExtendedCategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)";
  "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)";
  "org.jfree.chart$axis.CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)" -> "axis.ExtendedCategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)";
  "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "SubCategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.SubCategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.SubCategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "axis.SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "plot.CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "plot.XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$axis.SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "CombinedDomainCategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "plot.CombinedDomainCategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "plot.CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "plot.XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "plot.CombinedDomainXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "CombinedDomainXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "plot.CombinedRangeXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "CombinedRangeXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "CombinedRangeCategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)" -> "plot.CombinedRangeCategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.SubCategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues2D#removeColumn(int)";
  "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)" -> "DefaultKeyedValues2D#removeColumn(int)";
  "org.jfree.chart$plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" -> "plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" -> "CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" -> "org.jfree.chart$plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" -> "XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" -> "plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "java.util.AbstractMap#get(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)";
  "org.jfree.chart$axis.CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)" -> "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)" -> "CategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)" -> "axis.CategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "java.util.ImmutableCollections$List12#indexOf(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "javax.swing.JEditorPane$PlainEditorKit#create(javax.swing.text.Element)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "java.util.Hashtable#containsKey(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "java.lang.invoke$MethodHandles#constant(java.lang.Class,java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "java.util.Hashtable#get(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "SubCategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "axis.ExtendedCategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "ExtendedCategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAxis#equals(java.lang.Object)" -> "axis.SubCategoryAxis#equals(java.lang.Object)";
  "java.util.Hashtable#containsKey(java.lang.Object)" -> "org.jfree.chart$StrokeMap#containsKey(java.lang.Comparable)";
  "java.util.Hashtable#containsKey(java.lang.Object)" -> "org.jfree.chart$PaintMap#containsKey(java.lang.Comparable)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#getTickLabelPaint(java.lang.Comparable)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "java.util.Hashtable#get(java.lang.Object)" -> "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)";
  "org.jfree.chart$plot.CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)" -> "CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "ImageEncoderFactory#newInstance(java.lang.String,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "encoders.ImageEncoderFactory#newInstance(java.lang.String,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "ImageEncoderFactory#newInstance(java.lang.String,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "ImageEncoderFactory#newInstance(java.lang.String,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String)" -> "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)" -> "encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)" -> "encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)" -> "EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)" -> "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)" -> "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float,boolean)" -> "EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)";
  "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)" -> "ChartUtilities#encodeAsPNG(java.awt.image.BufferedImage,boolean,int)";
  "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)" -> "org.jfree.chart$ChartUtilities#encodeAsPNG(java.awt.image.BufferedImage,boolean,int)";
  "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)" -> "org.jfree.chart$ChartUtilities#writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage,boolean,int)";
  "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)" -> "ChartUtilities#writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage,boolean,int)";
  "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)" -> "org.jfree.chart$ChartUtilities#writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)" -> "ChartUtilities#writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String)" -> "ChartUtilities#encodeAsPNG(java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String)" -> "org.jfree.chart$ChartUtilities#encodeAsPNG(java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)" -> "encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)" -> "EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)" -> "encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)" -> "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)" -> "EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,boolean)" -> "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,boolean)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)" -> "org.jfree.chart$encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)" -> "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)" -> "encoders.EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)" -> "encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)" -> "EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)";
  "org.jfree.chart$encoders.ImageEncoderFactory#newInstance(java.lang.String,float)" -> "EncoderUtil#encode(java.awt.image.BufferedImage,java.lang.String,float)";
  "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)" -> "ChartUtilities#writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.EncoderUtil#writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)" -> "org.jfree.chart$ChartUtilities#writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)";
  "org.jfree.chart$ChartUtilities#writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)" -> "org.jfree.chart$ChartUtilities#writeBufferedImageAsJPEG(java.io.OutputStream,java.awt.image.BufferedImage)";
  "org.jfree.chart$ChartUtilities#writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)" -> "ChartUtilities#writeBufferedImageAsJPEG(java.io.OutputStream,java.awt.image.BufferedImage)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "xy.XYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "renderer.xy.XYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "plot.XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "XYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "org.jfree.chart$plot.XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisForDataset(int)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "plot.PiePlot#getSectionPaint(java.lang.Comparable)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "PaintMap#equals(java.lang.Object)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "PiePlot#getSectionOutlinePaint(java.lang.Comparable)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#getSectionOutlinePaint(java.lang.Comparable)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "PaintMap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "org.jfree.chart$PaintMap#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "PiePlot#getSectionPaint(java.lang.Comparable)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "plot.PiePlot#getSectionOutlinePaint(java.lang.Comparable)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#getSectionPaint(java.lang.Comparable)";
  "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)" -> "org.jfree.chart$PaintMap#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)" -> "plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)";
  "org.jfree.chart$plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)" -> "org.jfree.chart$plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)";
  "org.jfree.chart$plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)" -> "PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)";
  "PaintMap#equals(java.lang.Object)" -> "org.jfree.chart$util.ArrayUtilities#hasDuplicateItems(java.lang.Object[])";
  "PaintMap#equals(java.lang.Object)" -> "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.ImmutableCollections$MapN#probe(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.HashMap#compute(java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "javax.security.auth$Subject$SecureSet#remove(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.ArrayList#indexOfRange(java.lang.Object,int,int)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.AbstractMap#remove(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.Hashtable#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "com.sun.org$apache.xalan.internal.xsltc.compiler.FunctionCall$JavaType#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "javax.swing.text$html.HTMLDocument$HTMLReader#handleText(char[],int)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "javax.swing.tree$TreePath#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.Collections#eq(java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.HashMap#replace(java.lang.Object,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "java.util.ArrayDeque#removeFirstOccurrence(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "sun.util.PreHashedMap#get(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "statistics.DefaultMultiValueCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "DefaultMultiValueCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "DefaultStatisticalCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)" -> "statistics.DefaultStatisticalCategoryDataset#equals(java.lang.Object)";
  "java.util.AbstractMap#remove(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)";
  "java.util.AbstractMap#remove(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)";
  "java.util.AbstractMap#remove(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#getDomainAxisForDataset(int)";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.data$statistics.HistogramDataset#getBinWidth(int)";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#clearRangeMarkers(int)";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.chart$urls.CustomPieURLGenerator#clone()";
  "sun.util.PreHashedMap#get(java.lang.Object)" -> "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxisForDataset(int)" -> "org.jfree.chart$plot.XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getDomainAxisForDataset(int)" -> "XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getDomainAxisForDataset(int)" -> "plot.XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.data$statistics.HistogramDataset#getBinWidth(int)" -> "HistogramDataset#getY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBinWidth(int)" -> "statistics.HistogramDataset#getY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBinWidth(int)" -> "org.jfree.data$statistics.HistogramDataset#getY(int,int)";
  "HistogramDataset#getY(int,int)" -> "org.jfree.data$xy.XYBarDataset#getStartY(int,int)";
  "HistogramDataset#getY(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getStartY(int,int)" -> "org.jfree.data$general.CombinedDataset#getStartY(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartY(int,int)" -> "general.SubSeriesDataset#getStartY(int,int)";
  "general.SubSeriesDataset#getStartY(int,int)" -> "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)";
  "general.SubSeriesDataset#getStartY(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getStartY(int,int)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)" -> "general.DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)" -> "general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)" -> "DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)" -> "DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartYValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "general.DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.DeviationRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "YIntervalRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "CandlestickRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "XYErrorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "XYBlockRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.XYErrorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.XYBlockRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.YIntervalRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.CandlestickRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DeviationRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.YIntervalRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.YIntervalRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.CandlestickRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.DeviationRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.XYErrorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.XYBlockRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.DeviationRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" -> "AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)" -> "org.jfree.chart$plot.PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)" -> "plot.PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)" -> "PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$general.SubSeriesDataset#getStartY(int,int)" -> "SubSeriesDataset#getStartY(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getStartY(int,int)" -> "CombinedDataset#getStartY(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getStartY(int,int)" -> "general.CombinedDataset#getStartY(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getStartY(int,int)" -> "AbstractIntervalXYDataset#getStartYValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getStartY(int,int)" -> "xy.AbstractIntervalXYDataset#getStartYValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getY(int,int)" -> "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getY(int,int)" -> "XYBarDataset#getStartY(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getY(int,int)" -> "org.jfree.data$general.CombinedDataset#getY(int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "renderer.xy.VectorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "XYBarDataset#getYValue(int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "StackedXYAreaRenderer#getPreviousHeight(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "renderer.xy.StackedXYAreaRenderer#getPreviousHeight(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "renderer.xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#getPreviousHeight(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "xy.StackedXYAreaRenderer#getPreviousHeight(org.jfree.data.xy.TableXYDataset,int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "general.DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)";
  "org.jfree.data$xy.AbstractXYDataset#getYValue(int,int)" -> "DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)";
  "XYBarDataset#getYValue(int,int)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "XYBarDataset#getYValue(int,int)" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "XYBarDataset#getYValue(int,int)" -> "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "XYBarDataset#getYValue(int,int)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)";
  "XYBarDataset#getYValue(int,int)" -> "org.jfree.chart$renderer.xy.VectorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "XYBarDataset#getYValue(int,int)" -> "org.jfree.data$xy.XYBarDataset#getYValue(int,int)";
  "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)";
  "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)" -> "xy.AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)";
  "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)" -> "AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)";
  "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)" -> "renderer.xy.AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)" -> "renderer.xy.XYBlockRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)" -> "XYBlockRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)" -> "xy.XYBlockRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)" -> "BubbleXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)" -> "AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)" -> "labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)" -> "labels.BubbleXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "labels.StandardXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "StandardXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "XYBarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "xy.AbstractXYItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "renderer.xy.XYBarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "AbstractXYItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "xy.XYBarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)" -> "renderer.xy.AbstractXYItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.BubbleXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "labels.BubbleXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.BubbleXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.BubbleXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "BubbleXYItemLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "labels.AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "xy.XYBarDataset#getYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "xy.XYDifferenceRenderer#drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "general.DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "VectorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "xy.XYBarDataset#getEndYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "labels.SymbolicXYItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "xy.XYBarDataset#getStartYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "org.jfree.data$xy.XYBarDataset#getEndYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "Regression#getOLSRegression(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "XYBarDataset#getStartYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "XYDifferenceRenderer#drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "statistics.Regression#getOLSRegression(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "xy.VectorRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "Regression#getPowerRegression(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "org.jfree.data$xy.XYBarDataset#getStartYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "statistics.Regression#getPowerRegression(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "XYBarDataset#getEndYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getYValue(int,int)" -> "renderer.xy.XYDifferenceRenderer#drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)" -> "xy.StackedXYAreaRenderer2#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)" -> "renderer.xy.StackedXYAreaRenderer2#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#getStackValues(org.jfree.data.xy.TableXYDataset,int,int)" -> "StackedXYAreaRenderer2#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)" -> "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)" -> "DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)" -> "general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "xy.StackedXYBarRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "renderer.xy.StackedXYBarRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "xy.StackedXYAreaRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "renderer.xy.StackedXYAreaRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "StackedXYBarRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "StackedXYAreaRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.CombinedDataset#getY(int,int)" -> "SubSeriesDataset#getY(int,int)";
  "SubSeriesDataset#getY(int,int)" -> "org.jfree.data$xy.XYBarDataset#getEndY(int,int)";
  "SubSeriesDataset#getY(int,int)" -> "org.jfree.data$xy.XYBarDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getEndY(int,int)" -> "AbstractIntervalXYDataset#getEndYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getEndY(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getEndY(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getEndY(int,int)" -> "org.jfree.data$general.CombinedDataset#getEndY(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndY(int,int)" -> "CombinedDataset#getEndY(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndY(int,int)" -> "general.SubSeriesDataset#getEndY(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndY(int,int)" -> "SubSeriesDataset#getEndY(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndY(int,int)" -> "xy.AbstractIntervalXYDataset#getEndYValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndY(int,int)" -> "general.CombinedDataset#getEndY(int,int)";
  "CombinedDataset#getEndY(int,int)" -> "org.jfree.data$xy.AbstractIntervalXYDataset#getEndYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "xy.AbstractXYDataset#getYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "xy.XYBarDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "general.CombinedDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "CombinedDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "general.SubSeriesDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "XYBarDataset#getEndY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "XYBarDataset#getY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "AbstractXYDataset#getYValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "xy.XYBarDataset#getEndY(int,int)";
  "org.jfree.data$xy.XYBarDataset#getY(int,int)" -> "xy.XYBarDataset#getStartY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getY(int,int)" -> "statistics.HistogramDataset#getEndY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getY(int,int)" -> "statistics.HistogramDataset#getStartY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getY(int,int)" -> "HistogramDataset#getStartY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getY(int,int)" -> "HistogramDataset#getEndY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getY(int,int)" -> "org.jfree.data$statistics.HistogramDataset#getEndY(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getY(int,int)" -> "org.jfree.data$statistics.HistogramDataset#getStartY(int,int)";
  "org.jfree.chart$plot.CategoryPlot#clearRangeMarkers(int)" -> "plot.CategoryPlot#clearRangeMarkers()";
  "org.jfree.chart$plot.CategoryPlot#clearRangeMarkers(int)" -> "org.jfree.chart$plot.CategoryPlot#clearRangeMarkers()";
  "org.jfree.chart$plot.CategoryPlot#clearRangeMarkers(int)" -> "CategoryPlot#clearRangeMarkers()";
  "org.jfree.chart$axis.CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)" -> "CategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$axis.CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)" -> "axis.CategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$axis.CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.CategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)" -> "CustomPieURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)" -> "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)" -> "org.jfree.chart$urls.CustomPieURLGenerator#generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)" -> "CustomPieURLGenerator#generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)" -> "urls.CustomPieURLGenerator#generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)" -> "urls.CustomPieURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "java.awt.Component#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.util.AugmentationsImpl$SmallContainer#removeItem(java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#isEqual(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "sun.font.AttributeValues#equals(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "java.util.Hashtable#computeIfAbsent(java.lang.Object,java.util.function.Function)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "java.util.Hashtable#remove(java.lang.Object)";
  "org.jfree.chart$urls.CustomPieURLGenerator#equals(java.lang.Object)" -> "java.util.AbstractList#equals(java.lang.Object)";
  "java.util.AbstractList#equals(java.lang.Object)" -> "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.Hashtable#reconstitutionPut(java.util.Hashtable$Entry[],java.lang.Object,java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.HashMap#computeIfAbsent(java.lang.Object,java.util.function.Function)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "xy.XYBlockRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$ValuesView#remove(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.beans.PropertyChangeSupport#fireIndexedPropertyChange(java.lang.String,int,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "javax.swing.JComboBox#setSelectedItem(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$TreeBin#putTreeVal(int,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.HashMap$TreeNode#find(int,java.lang.Object,java.lang.Class)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.LinkedList#lastIndexOf(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl$2#contains(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "sun.font.AttributeValues#fromSerializableHashtable(java.util.Hashtable)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.HashMap#containsValue(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$CopyOnWriteArrayList#indexOfRange(java.lang.Object,java.lang.Object[],int,int)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$EntrySetView#contains(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#computeIfAbsent(java.lang.Object,java.util.function.Function)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.util.SymbolHash#put(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "com.sun.beans$util.Cache$CacheEntry#matches(int,java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.LinkedList#remove(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.ArrayList#lastIndexOfRange(java.lang.Object,int,int)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$LinkedBlockingDeque#contains(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.ImmutableCollections$Map1#containsValue(java.lang.Object)";
  "org.jfree.chart$renderer.LookupPaintScale#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#get(java.lang.Object)";
  "javax.swing.JComboBox#setSelectedItem(java.lang.Object)" -> "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])";
  "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])" -> "org.jfree.chart$editor.DefaultPlotEditor#attemptOutlineStrokeSelection()";
  "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])" -> "DefaultPlotEditor#attemptOutlineStrokeSelection()";
  "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])" -> "DefaultNumberAxisEditor#attemptGridStrokeSelection()";
  "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#attemptGridStrokeSelection()";
  "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])" -> "editor.DefaultNumberAxisEditor#attemptGridStrokeSelection()";
  "org.jfree.chart$ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])" -> "editor.DefaultPlotEditor#attemptOutlineStrokeSelection()";
  "org.jfree.chart$editor.DefaultPlotEditor#attemptOutlineStrokeSelection()" -> "org.jfree.chart$editor.DefaultPlotEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultPlotEditor#attemptOutlineStrokeSelection()" -> "DefaultPlotEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultPlotEditor#attemptOutlineStrokeSelection()" -> "editor.DefaultPlotEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#attemptGridStrokeSelection()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#attemptGridStrokeSelection()" -> "DefaultNumberAxisEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#attemptGridStrokeSelection()" -> "editor.DefaultNumberAxisEditor#actionPerformed(java.awt.event.ActionEvent)";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl$2#contains(java.lang.Object)" -> "org.jfree.chart$plot.dial.AbstractDialLayer#hasListener(java.util.EventListener)";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl$2#contains(java.lang.Object)" -> "org.jfree.data$general.AbstractDataset#hasListener(java.util.EventListener)";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl$2#contains(java.lang.Object)" -> "org.jfree.chart$axis.Axis#hasListener(java.util.EventListener)";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl$2#contains(java.lang.Object)" -> "org.jfree.chart$servlet.ChartDeleter#isChartAvailable(java.lang.String)";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl$2#contains(java.lang.Object)" -> "org.jfree.chart$renderer.AbstractRenderer#hasListener(java.util.EventListener)";
  "org.jfree.chart$servlet.ChartDeleter#isChartAvailable(java.lang.String)" -> "servlet.DisplayChart#service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$servlet.ChartDeleter#isChartAvailable(java.lang.String)" -> "DisplayChart#service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)";
  "java.util.concurrent$ConcurrentHashMap#get(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)";
  "java.util.concurrent$ConcurrentHashMap#get(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)";
  "java.util.concurrent$ConcurrentHashMap#get(java.lang.Object)" -> "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)" -> "CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)" -> "plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)" -> "CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)" -> "CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)";
  "org.jfree.chart$plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)";
  "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "plot.PiePlot#getSectionOutlineStroke(java.lang.Comparable)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#getSectionOutlineStroke(java.lang.Comparable)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "PiePlot#getSectionOutlineStroke(java.lang.Comparable)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "org.jfree.chart$plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "StrokeMap#equals(java.lang.Object)";
  "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)" -> "org.jfree.chart$StrokeMap#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)" -> "PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)";
  "org.jfree.chart$plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)" -> "org.jfree.chart$plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)";
  "org.jfree.chart$plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)" -> "plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "javax.swing.JOptionPane#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "com.sun.org$apache.xpath.internal.objects.XStringForFSB#equals(java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "sun.util.locale$provider.LocaleResources#getLocaleName(java.lang.String)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "javax.crypto.CryptoPermission#equalObjects(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.concurrent$LinkedBlockingQueue#remove(java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "axis.SegmentedTimeline#equals(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.ImmutableCollections$Map1#containsKey(java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.WeakHashMap$Entry#equals(java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "ArrayUtilities#hasDuplicateItems(java.lang.Object[])";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.time.zone$ZoneRules#getOffsetInfo(java.time.LocalDateTime)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.traversers.XSDAttributeTraverser#traverseLocal(org.w3c.dom.Element,com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDocumentInfo,com.sun.org.apache.xerces.internal.impl.xs.SchemaGrammar,com.sun.org.apache.xerces.internal.impl.xs.XSComplexTypeDecl)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.EnumMap#containsMapping(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.ImmutableCollections$SetN#probe(java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.WeakHashMap#containsValue(java.lang.Object)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "javax.swing.tree$DefaultTreeModel#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.awt.font$StyledParagraph#insertChar(java.text.AttributedCharacterIterator,char[],int,java.awt.font.StyledParagraph)";
  "org.jfree.chart$StrokeMap#equals(java.lang.Object)" -> "java.util.AbstractMap#equals(java.lang.Object)";
  "java.util.AbstractMap#equals(java.lang.Object)" -> "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "javax.swing.text$html.CSS$StringValue#fromStyleConstants(javax.swing.text.StyleConstants,java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "java.util.Hashtable#replace(java.lang.Object,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#compute(java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "javax.swing.text$SimpleAttributeSet#removeAttributes(javax.swing.text.AttributeSet)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "java.util.Collections#replaceAll(java.util.List,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "javax.swing.KeyboardManager$ComponentKeyStrokePair#equals(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.ListDV$ListData#equals(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "category.GroupedStackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "GroupedStackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "renderer.category.GroupedStackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#equals(java.lang.Object)";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.ListDV$ListData#equals(java.lang.Object)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)" -> "java.util.Hashtable$Entry#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)" -> "java.util.KeyValueHolder#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)" -> "javax.swing.JList#setPrototypeCellValue(java.lang.Object)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)" -> "java.util.Hashtable#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#equals(java.lang.Object)" -> "XYBarDataset#equals(java.lang.Object)";
  "XYBarDataset#equals(java.lang.Object)" -> "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "java.util.ImmutableCollections$MapN#containsValue(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "KeyedObjects2D#equals(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap#containsValue(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "sun.awt.image$InputStreamImageSource#addConsumer(java.awt.image.ImageConsumer,boolean)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "javax.swing.text$StyleContext$SmallAttributeSet#getLocalAttribute(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "javax.swing.text$AbstractDocument#handleInsertString(int,java.lang.String,javax.swing.text.AttributeSet)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "javax.swing.text$StyleContext$SmallAttributeSet#containsAttribute(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "JFreeChart#setAntiAlias(boolean)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "sun.font.Decoration$DecorationImpl#areEqual(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "java.util.LinkedList#removeLastOccurrence(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.XSConstraints#checkNameAndTypeOK(com.sun.org.apache.xerces.internal.impl.xs.XSElementDecl,int,int,com.sun.org.apache.xerces.internal.impl.xs.XSElementDecl,int,int)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#containsValue(java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "java.nio.file$FileTreeWalker#wouldLoop(java.nio.file.Path,java.lang.Object)";
  "org.jfree.data$xy.XYBarDataset#equals(java.lang.Object)" -> "java.util.Hashtable#equals(java.lang.Object)";
  "java.util.Hashtable#equals(java.lang.Object)" -> "org.jfree.chart$util.AttributedStringUtilities#equal(java.text.AttributedString,java.text.AttributedString)";
  "org.jfree.chart$util.AttributedStringUtilities#equal(java.text.AttributedString,java.text.AttributedString)" -> "org.jfree.chart$LegendItem#equals(java.lang.Object)";
  "org.jfree.chart$util.AttributedStringUtilities#equal(java.text.AttributedString,java.text.AttributedString)" -> "LegendItem#equals(java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "com.sun.org$apache.xpath.internal.objects.XObject#equals(com.sun.org.apache.xpath.internal.objects.XObject)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "javax.swing.JList#setSelectedValue(java.lang.Object,boolean)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "sun.swing.ImageCache$Entry#equals(java.awt.GraphicsConfiguration,int,int,java.lang.Object[])";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.util.Hashtable#replace(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "javax.swing.text$AbstractDocument#insertUpdate(javax.swing.text.AbstractDocument$DefaultDocumentEvent,javax.swing.text.AttributeSet)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "javax.swing.plaf$basic.BasicComboBoxUI$Handler#focusLost(java.awt.event.FocusEvent)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.awt.Toolkit$DesktopPropertyChangeSupport#firePropertyChange(java.beans.PropertyChangeEvent)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.util.concurrent$CopyOnWriteArrayList#lastIndexOfRange(java.lang.Object,java.lang.Object[],int,int)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "javax.swing.text$StyleContext$SmallAttributeSet#isDefined(java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.util.TreeMap#valEquals(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "javax.swing.JPopupMenu#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.beans.PropertyChangeSupport#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "javax.swing.tree$DefaultTreeSelectionModel#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.util.stream$DistinctOps$1$1#accept(java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.util.function$Predicate#lambda$isEqual$3(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$LegendItem#equals(java.lang.Object)" -> "java.util.EnumMap#equals(java.lang.Object)";
  "java.beans.PropertyChangeSupport#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$general.Series#setDescription(java.lang.String)";
  "java.beans.PropertyChangeSupport#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)";
  "java.beans.PropertyChangeSupport#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$general.Series#setKey(java.lang.Comparable)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "time.TimePeriodValues#setDomainDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.TimeSeries#setDomainDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "TimePeriodValues#setDomainDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "time.TimePeriodValues#setRangeDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "time.TimeSeries#setDomainDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.TimeSeries#setRangeDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "TimeSeries#setRangeDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.TimePeriodValues#setRangeDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "TimePeriodValues#setRangeDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "time.TimeSeries#setRangeDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "TimeSeries#setDomainDescription(java.lang.String)";
  "org.jfree.data$general.Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)" -> "org.jfree.data$time.TimePeriodValues#setDomainDescription(java.lang.String)";
  "java.util.EnumMap#equals(java.lang.Object)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.swing.text$StyleContext$SmallAttributeSet#containsAttributes(javax.swing.text.AttributeSet)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.Objects#equals(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.swing.text$html.CSS#translateHTMLToCSS(javax.swing.text.AttributeSet)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$LinkedBlockingDeque#removeFirstOccurrence(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.HashMap$TreeNode#putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.ImmutableCollections$List12#lastIndexOf(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.ArrayDeque#removeLastOccurrence(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentLinkedQueue#contains(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.EnumMap$EntryIterator$Entry#equals(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator$ValueStoreBase#contains()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.security.auth$Subject$SecureSet#removeAll(java.util.Collection)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "sun.security.pkcs$PKCS9Attribute#indexOf(java.lang.Object,java.lang.Object[],int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap#replace(java.lang.Object,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.beans.VetoableChangeSupport#fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.swing.tree$DefaultMutableTreeNode#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.util.XSObjectListImpl#containsObject(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "sun.swing.SwingUtilities2$KeyPair#equals(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.AbstractList#lastIndexOf(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.security.auth$Subject$SecureSet#contains(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.awt.font$StyledParagraph#addToVector(java.lang.Object,int,java.util.Vector,int[])";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.HashMap#putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.awt.SystemTray#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "com.sun.org$apache.xalan.internal.xsltc.compiler.util.MultiHashtable#maps(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.util.SymbolHash#search(java.lang.Object,int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentLinkedQueue#remove(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.AbstractMap#containsValue(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.swing.ArrayTable#get(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.HashMap#getNode(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.lang.invoke$ClassSpecializer$SpeciesData#equals(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$LinkedBlockingDeque#removeLastOccurrence(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "javax.swing.JSplitPane#addImpl(java.awt.Component,java.lang.Object,int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.Vector#indexOf(java.lang.Object,int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.lang.invoke$MemberName$Factory#getMembers(java.lang.Class,java.lang.String,java.lang.Object,int,java.lang.Class)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.AbstractMap#eq(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "com.sun.beans$editors.EnumEditor#setValue(java.lang.Object)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "JFreeChart#getAntiAlias()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "sun.util.locale$provider.LocaleResources#getCurrencyName(java.lang.String)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$TreeNode#findTreeNode(int,java.lang.Object,java.lang.Class)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap#equals(java.lang.Object)";
  "java.util.concurrent$ConcurrentSkipListMap#equals(java.lang.Object)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.WeakHashMap#matchesKey(java.util.WeakHashMap$Entry,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.lang.invoke$MethodType$ConcurrentWeakInternSet$WeakEntry#equals(java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.EnumMap#removeMapping(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.Collections#frequency(java.util.Collection,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator$ValueStoreBase#contains(com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$ValueStoreBase)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "javax.swing.plaf$basic.BasicComboBoxUI$Handler#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "javax.swing.DefaultCellEditor$2#setValue(java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.Hashtable#put(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "sun.swing.SwingUtilities2#drawChars(javax.swing.JComponent,java.awt.Graphics,char[],int,int,float,float,boolean)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$ForwardingNode#find(int,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "javax.swing.ArrayTable#put(java.lang.Object,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "javax.swing.text$TextLayoutStrategy#layoutRow(javax.swing.text.FlowView,int,int)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$Node#find(int,java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "javax.swing.DefaultComboBoxModel#setSelectedItem(java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.LinkedList#indexOf(java.lang.Object)";
  "org.jfree.chart$axis.ExtendedCategoryAxis#equals(java.lang.Object)" -> "java.util.Collections$CopiesList#equals(java.lang.Object)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$PaintMap#readObject(java.io.ObjectInputStream)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$renderer.WaferMapRenderer#makePositionIndex(java.util.Set)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#clearSeriesLabels(int)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$renderer.WaferMapRenderer#makeValueIndex(java.lang.Number,java.lang.Number,java.util.Set)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#addSeriesLabel(int,java.lang.String)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.PiePlot#setExplodePercent(java.lang.Comparable,double)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.MultiplePiePlot#prefetchSectionPaints()";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#addSubLabel(java.lang.Comparable,java.lang.String)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$encoders.ImageEncoderFactory#setImageEncoder(java.lang.String,java.lang.String)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)";
  "java.util.Hashtable#put(java.lang.Object,java.lang.Object)" -> "org.jfree.chart$encoders.ImageEncoderFactory#init()";
  "org.jfree.chart$renderer.WaferMapRenderer#makePositionIndex(java.util.Set)" -> "WaferMapRenderer#makePaintIndex()";
  "org.jfree.chart$renderer.WaferMapRenderer#makePositionIndex(java.util.Set)" -> "renderer.WaferMapRenderer#makePaintIndex()";
  "org.jfree.chart$renderer.WaferMapRenderer#makePositionIndex(java.util.Set)" -> "org.jfree.chart$renderer.WaferMapRenderer#makePaintIndex()";
  "org.jfree.chart$renderer.WaferMapRenderer#makePaintIndex()" -> "WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)";
  "org.jfree.chart$renderer.WaferMapRenderer#makePaintIndex()" -> "renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)";
  "org.jfree.chart$renderer.WaferMapRenderer#makePaintIndex()" -> "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)";
  "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)" -> "WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)";
  "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)" -> "plot.WaferMapPlot#setRenderer(org.jfree.chart.renderer.WaferMapRenderer)";
  "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)" -> "plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)";
  "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)" -> "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)";
  "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)" -> "WaferMapPlot#setRenderer(org.jfree.chart.renderer.WaferMapRenderer)";
  "org.jfree.chart$renderer.WaferMapRenderer#setPlot(org.jfree.chart.plot.WaferMapPlot)" -> "org.jfree.chart$plot.WaferMapPlot#setRenderer(org.jfree.chart.renderer.WaferMapRenderer)";
  "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)" -> "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset)";
  "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)" -> "WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset)";
  "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)" -> "plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset)";
  "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset)" -> "plot.WaferMapPlot#<init()";
  "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset)" -> "WaferMapPlot#<init()";
  "org.jfree.chart$plot.WaferMapPlot#<init(org.jfree.data.general.WaferMapDataset)" -> "org.jfree.chart$plot.WaferMapPlot#<init()";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)" -> "PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)";
  "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)" -> "plot.PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)";
  "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)" -> "org.jfree.chart$plot.PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)";
  "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)" -> "plot.PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)";
  "org.jfree.chart$plot.MultiplePiePlot#prefetchSectionPaints()" -> "plot.MultiplePiePlot#getLegendItems()";
  "org.jfree.chart$plot.MultiplePiePlot#prefetchSectionPaints()" -> "MultiplePiePlot#getLegendItems()";
  "org.jfree.chart$plot.MultiplePiePlot#prefetchSectionPaints()" -> "org.jfree.chart$plot.MultiplePiePlot#getLegendItems()";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "plot.PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "org.jfree.chart$plot.PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "plot.PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "plot.PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "org.jfree.chart$plot.PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "plot.PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)" -> "org.jfree.chart$plot.PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$plot.PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)" -> "org.jfree.chart$plot.PiePlot#lookupSectionPaint(java.lang.Comparable)";
  "org.jfree.chart$plot.PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)" -> "plot.PiePlot#lookupSectionPaint(java.lang.Comparable)";
  "org.jfree.chart$plot.PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)" -> "PiePlot#lookupSectionPaint(java.lang.Comparable)";
  "org.jfree.chart$encoders.ImageEncoderFactory#init()" -> "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "encoders.ImageEncoderFactory#newInstance(java.lang.String)";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "ImageEncoderFactory#newInstance(java.lang.String)";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "ImageEncoderFactory#<clinit()";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "encoders.ImageEncoderFactory#init()";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "ImageEncoderFactory#setImageEncoder(java.lang.String,java.lang.String)";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "ImageEncoderFactory#init()";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "encoders.ImageEncoderFactory#<clinit()";
  "org.jfree.chart$encoders.ImageEncoderFactory#<clinit()" -> "encoders.ImageEncoderFactory#setImageEncoder(java.lang.String,java.lang.String)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$plot.PolarPlot#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$block.BlockContainer#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$statistics.SimpleHistogramDataset#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$xy.DefaultXYZDataset#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$text.TextLine#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$xy.DefaultXYDataset#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$text.TextBlock#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$axis.SymbolAxis#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPlot#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$gantt.TaskSeries#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.data$category.DefaultCategoryDataset#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$axis.SubCategoryAxis#equals(java.lang.Object)";
  "java.util.Collections$CopiesList#equals(java.lang.Object)" -> "org.jfree.chart$axis.TickUnits#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.beans.PropertyChangeSupport#firePropertyChange(java.beans.PropertyChangeEvent)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.EnumMap$Values#remove(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.Vector#lastIndexOf(java.lang.Object,int)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#checkFacets(com.sun.org.apache.xerces.internal.impl.dv.ValidatedInfo)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.EnumMap#equals(java.util.EnumMap)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.ImmutableCollections$Set12#<init(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.beans.ChangeListenerMap#remove(java.lang.String,java.util.EventListener)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.table$DefaultTableColumnModel#getColumnIndex(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.beans$finder.Signature#isEqual(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#readObject(java.io.ObjectInputStream)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$ParagraphView#<init(javax.swing.text.Element)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.zip$ZipFile$Source$Key#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#putVal(java.lang.Object,java.lang.Object,boolean)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.HashMap#removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$AbstractDocument#postRemoveUpdate(javax.swing.text.AbstractDocument$DefaultDocumentEvent)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.ArrayList#remove(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator#processOneAttribute(com.sun.org.apache.xerces.internal.xni.QName,com.sun.org.apache.xerces.internal.xni.XMLAttributes,int,com.sun.org.apache.xerces.internal.impl.xs.XSAttributeDecl,com.sun.org.apache.xerces.internal.impl.xs.XSAttributeUseImpl,com.sun.org.apache.xerces.internal.impl.xs.AttributePSVImpl)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$PlainDocument#insertString(int,java.lang.String,javax.swing.text.AttributeSet)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.ImmutableCollections$Map1#get(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$LinkedBlockingQueue#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.AbstractCollection#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.JTree#readObject(java.io.ObjectInputStream)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$StyleContext$KeyBuilder#removeAttribute(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "sun.awt.SoftCache#valEquals(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$Node#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.ArrayTable#remove(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "sun.reflect.'annotation'$AnnotationInvocationHandler#memberValueEquals(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.awt.font$StyledParagraph#addFont(java.lang.Object,int)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.JOptionPane#showInternalOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "util.ObjectUtilities#equal(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.parsers.DOMParserImpl#setParameter(java.lang.String,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.ArrayTable#containsKey(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.Hashtable#remove(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap#doRemove(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.lang.invoke$LambdaForm#checkInt(java.lang.Class,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$html.HTMLDocument#getElement(javax.swing.text.Element,java.lang.Object,java.lang.Object,boolean)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap$SubMap#containsValue(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "sun.swing.SwingUtilities2#drawString(javax.swing.JComponent,java.awt.Graphics,java.lang.String,float,float,boolean)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$html.CSS$FontWeight#fromStyleConstants(javax.swing.text.StyleConstants,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.JMenuBar#readObject(java.io.ObjectInputStream)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.AbstractAction#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.util.AugmentationsImpl$SmallContainer#getItem(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$ParagraphView#setPropertiesFromAttributes()";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.ArrayDeque#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.AbstractList#indexOf(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.text.AttributedString#valuesMatch(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap$EntrySet#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$html.InlineView#setPropertiesFromAttributes()";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.AbstractMap#containsKey(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xpath.internal.objects.XString#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.Hashtable#computeIfPresent(java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.xs.util.ObjectListImpl#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.PriorityQueue#indexOf(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.Hashtable#putIfAbsent(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.Arrays#deepEquals0(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.HashMap#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "SegmentedTimeline#equals(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "util.ArrayUtilities#hasDuplicateItems(java.lang.Object[])";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.ImmutableCollections$Set12#contains(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.TypeValidator#isIdentical(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.JSpinner$DefaultEditor#propertyChange(java.beans.PropertyChangeEvent)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ScheduledThreadPoolExecutor$DelayedWorkQueue#indexOf(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.dom.DOMConfigurationImpl#canSetParameter(java.lang.String,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "sun.util.PreHashedMap$2$1$1#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "xy.XYBarDataset#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#computeIfPresent(java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$html.MuxingAttributeSet#containsAttributes(javax.swing.text.AttributeSet)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.EnumMap#containsValue(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap$MapEntry#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$SimpleAttributeSet#containsAttribute(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.text$StyleContext$KeyBuilder#removeSearchAttribute(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "javax.swing.JComboBox#getSelectedIndex()";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "com.sun.org$apache.xerces.internal.util.AugmentationsImpl$SmallContainer#putItem(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.DefaultWindDataset#equals(java.lang.Object)" -> "sun.util.PreHashedMap#put(java.lang.String,java.lang.Object)";
  "java.util.ArrayList#remove(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "java.util.ArrayList#remove(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)" -> "XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.data$statistics.HistogramDataset#getSeriesKey(int)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.data$statistics.HistogramDataset#getBins(int)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.PiePlot#getMaximumExplodePercent()";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAxis#getTickLabelFont(java.lang.Comparable)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#clearDomainMarkers(int)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$renderer.WaferMapRenderer#getPaintIndex(java.lang.Number)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#clearRangeMarkers(int)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.data$statistics.HistogramDataset#getTotal(int)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.data$KeyToGroupMap#getGroup(java.lang.Comparable)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#clearDomainMarkers(int)";
  "java.util.ImmutableCollections$Map1#get(java.lang.Object)" -> "org.jfree.chart$plot.PiePlot#getExplodePercent(java.lang.Comparable)";
  "org.jfree.chart$plot.XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "plot.XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)" -> "XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.data$statistics.HistogramDataset#getSeriesKey(int)" -> "urls.TimeSeriesURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$statistics.HistogramDataset#getSeriesKey(int)" -> "org.jfree.chart$urls.TimeSeriesURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$statistics.HistogramDataset#getSeriesKey(int)" -> "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$statistics.HistogramDataset#getSeriesKey(int)" -> "StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$statistics.HistogramDataset#getSeriesKey(int)" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)";
  "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)" -> "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)" -> "labels.StandardXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)" -> "StandardXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)" -> "TimeSeriesURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)" -> "labels.StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)" -> "general.SubSeriesDataset#getSeriesKey(int)";
  "general.SubSeriesDataset#getSeriesKey(int)" -> "org.jfree.data$general.AbstractSeriesDataset#indexOf(java.lang.Comparable)";
  "general.SubSeriesDataset#getSeriesKey(int)" -> "org.jfree.data$general.CombinedDataset#getSeriesKey(int)";
  "org.jfree.data$general.CombinedDataset#getSeriesKey(int)" -> "labels.MultipleXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$general.CombinedDataset#getSeriesKey(int)" -> "labels.HighLowItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$general.CombinedDataset#getSeriesKey(int)" -> "XYBarDataset#getSeriesKey(int)";
  "XYBarDataset#getSeriesKey(int)" -> "org.jfree.data$xy.XYBarDataset#getSeriesKey(int)";
  "org.jfree.data$xy.XYBarDataset#getSeriesKey(int)" -> "general.AbstractSeriesDataset#indexOf(java.lang.Comparable)";
  "org.jfree.data$xy.XYBarDataset#getSeriesKey(int)" -> "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "labels.BoxAndWhiskerXYToolTipGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "CombinedDataset#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "xy.XYBarDataset#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "BoxAndWhiskerXYToolTipGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "AbstractSeriesDataset#indexOf(java.lang.Comparable)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "HighLowItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "MultipleXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "general.CombinedDataset#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)";
  "org.jfree.data$general.SubSeriesDataset#getSeriesKey(int)" -> "SubSeriesDataset#getSeriesKey(int)";
  "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)" -> "org.jfree.chart$labels.BoxAndWhiskerXYToolTipGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)";
  "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesKey(int)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)" -> "labels.MultipleXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)" -> "MultipleXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)";
  "CombinedDataset#getSeriesKey(int)" -> "org.jfree.chart$labels.HighLowItemLabelGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "HistogramDataset#getStartX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "org.jfree.data$statistics.HistogramDataset#getEndX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "HistogramDataset#getEndX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "statistics.HistogramDataset#getItemCount(int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "org.jfree.data$statistics.HistogramDataset#getItemCount(int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "statistics.HistogramDataset#getX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "statistics.HistogramDataset#getEndX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "HistogramDataset#getX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "org.jfree.data$statistics.HistogramDataset#getX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "HistogramDataset#getItemCount(int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "org.jfree.data$statistics.HistogramDataset#getStartX(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getBins(int)" -> "statistics.HistogramDataset#getStartX(int,int)";
  "HistogramDataset#getStartX(int,int)" -> "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)";
  "HistogramDataset#getStartX(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getStartX(int,int)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "xy.ClusteredXYBarRenderer#findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "ClusteredXYBarRenderer#findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "renderer.xy.ClusteredXYBarRenderer#findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#getStartXValue(int,int)" -> "general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "XYSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "general.DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)";
  "XYSeriesCollection#getDomainBounds(boolean)" -> "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "IntervalXYDelegate#getDomainBounds(boolean)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.IntervalXYDelegate#getDomainBounds(boolean)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "XYErrorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "XYBlockRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.XYErrorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.XYErrorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "renderer.xy.XYBlockRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" -> "xy.XYBlockRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)" -> "renderer.xy.ClusteredXYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)" -> "xy.ClusteredXYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)" -> "ClusteredXYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "org.jfree.data$xy.DefaultTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "xy.DefaultTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "xy.IntervalXYDelegate#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "IntervalXYDelegate#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "CategoryTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "xy.CategoryTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "DefaultTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "xy.XYSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "xy.IntervalXYDelegate#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "org.jfree.data$xy.CategoryTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "IntervalXYDelegate#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainBounds(boolean)" -> "org.jfree.data$xy.XYSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$xy.DefaultTableXYDataset#getDomainBounds(boolean)" -> "general.DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "org.jfree.data$xy.DefaultTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "xy.XYSeriesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "DefaultTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "XYSeriesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "org.jfree.data$xy.XYSeriesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "xy.DefaultTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "CategoryTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "org.jfree.data$xy.CategoryTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainUpperBound(boolean)" -> "xy.CategoryTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$xy.DefaultTableXYDataset#getDomainUpperBound(boolean)" -> "general.DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.DefaultTableXYDataset#getDomainUpperBound(boolean)" -> "DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.DefaultTableXYDataset#getDomainUpperBound(boolean)" -> "org.jfree.data$general.DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "xy.DefaultTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "CategoryTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "org.jfree.data$xy.CategoryTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "xy.CategoryTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "org.jfree.data$xy.DefaultTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "xy.XYSeriesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "DefaultTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "XYSeriesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#getDomainLowerBound(boolean)" -> "org.jfree.data$xy.XYSeriesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$xy.CategoryTableXYDataset#getDomainLowerBound(boolean)" -> "general.DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.SubSeriesDataset#getStartX(int,int)" -> "org.jfree.data$general.CombinedDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartX(int,int)" -> "CombinedDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartX(int,int)" -> "SubSeriesDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartX(int,int)" -> "general.SubSeriesDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartX(int,int)" -> "AbstractIntervalXYDataset#getStartXValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartX(int,int)" -> "general.CombinedDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getStartX(int,int)" -> "xy.AbstractIntervalXYDataset#getStartXValue(int,int)";
  "org.jfree.data$statistics.HistogramDataset#getEndX(int,int)" -> "CombinedDataset#getEndX(int,int)";
  "CombinedDataset#getEndX(int,int)" -> "org.jfree.data$xy.AbstractIntervalXYDataset#getEndXValue(int,int)";
  "CombinedDataset#getEndX(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getEndX(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getEndX(int,int)" -> "org.jfree.data$general.CombinedDataset#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndX(int,int)" -> "AbstractIntervalXYDataset#getEndXValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndX(int,int)" -> "SubSeriesDataset#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndX(int,int)" -> "general.CombinedDataset#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndX(int,int)" -> "general.SubSeriesDataset#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getEndX(int,int)" -> "xy.AbstractIntervalXYDataset#getEndXValue(int,int)";
  "statistics.HistogramDataset#getItemCount(int)" -> "org.jfree.chart$renderer.RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)";
  "statistics.HistogramDataset#getItemCount(int)" -> "org.jfree.data$general.SubSeriesDataset#getItemCount(int)";
  "org.jfree.chart$renderer.RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)" -> "RendererUtilities#findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.chart$renderer.RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)" -> "org.jfree.chart$renderer.RendererUtilities#findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.chart$renderer.RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)" -> "renderer.RendererUtilities#findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.data$general.SubSeriesDataset#getItemCount(int)" -> "org.jfree.data$general.DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.SubSeriesDataset#getItemCount(int)" -> "renderer.xy.XYDifferenceRenderer#areSeriesDisjoint(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.SubSeriesDataset#getItemCount(int)" -> "xy.XYDifferenceRenderer#isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.SubSeriesDataset#getItemCount(int)" -> "DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.SubSeriesDataset#getItemCount(int)" -> "org.jfree.data$xy.XYBarDataset#getItemCount(int)";
  "org.jfree.data$general.DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)" -> "plot.PlotUtilities#isEmptyOrNull(org.jfree.chart.plot.XYPlot)";
  "org.jfree.data$general.DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)" -> "PlotUtilities#isEmptyOrNull(org.jfree.chart.plot.XYPlot)";
  "org.jfree.data$xy.XYBarDataset#getItemCount(int)" -> "renderer.RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.data$xy.XYBarDataset#getItemCount(int)" -> "org.jfree.chart$renderer.RendererUtilities#findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.data$xy.XYBarDataset#getItemCount(int)" -> "org.jfree.chart$renderer.xy.VectorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.XYBarDataset#getItemCount(int)" -> "xy.IntervalXYDelegate#calculateIntervalForSeries(int)";
  "org.jfree.data$xy.XYBarDataset#getItemCount(int)" -> "XYDifferenceRenderer#isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$xy.XYBarDataset#getItemCount(int)" -> "CombinedDataset#getItemCount(int)";
  "CombinedDataset#getItemCount(int)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#areSeriesDisjoint(org.jfree.data.xy.XYDataset)";
  "CombinedDataset#getItemCount(int)" -> "org.jfree.data$general.CombinedDataset#getItemCount(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "IntervalXYDelegate#calculateIntervalForSeries(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "xy.XYDifferenceRenderer#areSeriesDisjoint(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "RendererUtilities#findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "XYDifferenceRenderer#areSeriesDisjoint(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "renderer.xy.VectorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "SubSeriesDataset#getItemCount(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "general.DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "xy.CandlestickRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "XYBarDataset#getItemCount(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "renderer.RendererUtilities#findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "xy.VectorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "renderer.xy.CandlestickRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "renderer.xy.XYDifferenceRenderer#isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "general.SubSeriesDataset#getItemCount(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "general.CombinedDataset#getItemCount(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "xy.XYBarDataset#getItemCount(int)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "CandlestickRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$general.CombinedDataset#getItemCount(int)" -> "VectorRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)";
  "SubSeriesDataset#getItemCount(int)" -> "org.jfree.data$xy.IntervalXYDelegate#calculateIntervalForSeries(int)";
  "SubSeriesDataset#getItemCount(int)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$xy.IntervalXYDelegate#calculateIntervalForSeries(int)" -> "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()";
  "org.jfree.data$xy.IntervalXYDelegate#calculateIntervalForSeries(int)" -> "xy.IntervalXYDelegate#recalculateInterval()";
  "org.jfree.data$xy.IntervalXYDelegate#calculateIntervalForSeries(int)" -> "IntervalXYDelegate#recalculateInterval()";
  "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()" -> "IntervalXYDelegate#setAutoWidth(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()" -> "IntervalXYDelegate#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()" -> "org.jfree.data$xy.IntervalXYDelegate#setAutoWidth(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()" -> "xy.IntervalXYDelegate#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()" -> "xy.IntervalXYDelegate#setAutoWidth(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#recalculateInterval()" -> "org.jfree.data$xy.IntervalXYDelegate#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "statistics.HistogramDataset#getX(int,int)" -> "org.jfree.data$xy.XYBarDataset#getX(int,int)";
  "org.jfree.data$xy.XYBarDataset#getX(int,int)" -> "org.jfree.data$xy.XYBarDataset#getEndX(int,int)";
  "org.jfree.data$xy.XYBarDataset#getX(int,int)" -> "CombinedDataset#getX(int,int)";
  "CombinedDataset#getX(int,int)" -> "org.jfree.data$xy.XYBarDataset#getStartX(int,int)";
  "CombinedDataset#getX(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getX(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getX(int,int)" -> "SubSeriesDataset#getX(int,int)";
  "SubSeriesDataset#getX(int,int)" -> "org.jfree.data$general.CombinedDataset#getX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "xy.XYBarDataset#getX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "xy.AbstractXYDataset#getXValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "xy.XYBarDataset#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "IntervalXYDelegate#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "xy.XYBarDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "general.CombinedDataset#getX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "xy.IntervalXYDelegate#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "xy.IntervalXYDelegate#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "general.SubSeriesDataset#getX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "XYBarDataset#getX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "XYBarDataset#getEndX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "AbstractXYDataset#getXValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "XYBarDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getX(int,int)" -> "IntervalXYDelegate#getEndX(int,int)";
  "xy.XYBarDataset#getX(int,int)" -> "org.jfree.data$xy.AbstractXYDataset#getXValue(int,int)";
  "xy.XYBarDataset#getX(int,int)" -> "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)";
  "xy.XYBarDataset#getX(int,int)" -> "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)";
  "org.jfree.data$xy.AbstractXYDataset#getXValue(int,int)" -> "XYBarDataset#getXValue(int,int)";
  "XYBarDataset#getXValue(int,int)" -> "org.jfree.data$xy.IntervalXYDelegate#getEndXValue(int,int)";
  "XYBarDataset#getXValue(int,int)" -> "org.jfree.data$xy.XYBarDataset#getXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "IntervalXYDelegate#getStartXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "IntervalXYDelegate#getEndXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "XYBarDataset#getEndXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "xy.IntervalXYDelegate#getStartXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "xy.XYBarDataset#getXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "xy.XYBarDataset#getEndXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "xy.XYBarDataset#getStartXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "org.jfree.data$xy.XYBarDataset#getEndXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "xy.IntervalXYDelegate#getEndXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "XYBarDataset#getStartXValue(int,int)";
  "org.jfree.data$xy.XYBarDataset#getXValue(int,int)" -> "org.jfree.data$xy.XYBarDataset#getStartXValue(int,int)";
  "xy.XYBarDataset#getXValue(int,int)" -> "org.jfree.data$xy.IntervalXYDelegate#getStartXValue(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "CategoryTableXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "xy.DefaultTableXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "xy.CategoryTableXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "xy.XYSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "DefaultTableXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "XYSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getStartX(int,int)" -> "org.jfree.data$xy.XYSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "XYSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "xy.CategoryTableXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "DefaultTableXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "CategoryTableXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "org.jfree.data$xy.XYSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "xy.DefaultTableXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "xy.XYSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.IntervalXYDelegate#getEndX(int,int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getEndX(int,int)";
  "org.jfree.chart$plot.XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)" -> "XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)" -> "plot.XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)" -> "org.jfree.chart$plot.XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)";
  "org.jfree.chart$plot.CategoryPlot#clearDomainMarkers(int)" -> "org.jfree.chart$plot.CategoryPlot#clearDomainMarkers()";
  "org.jfree.chart$plot.CategoryPlot#clearDomainMarkers(int)" -> "CategoryPlot#clearDomainMarkers()";
  "org.jfree.chart$plot.CategoryPlot#clearDomainMarkers(int)" -> "plot.CategoryPlot#clearDomainMarkers()";
  "org.jfree.chart$renderer.WaferMapRenderer#getPaintIndex(java.lang.Number)" -> "renderer.WaferMapRenderer#getChipColor(java.lang.Number)";
  "org.jfree.chart$renderer.WaferMapRenderer#getPaintIndex(java.lang.Number)" -> "WaferMapRenderer#getChipColor(java.lang.Number)";
  "org.jfree.chart$renderer.WaferMapRenderer#getPaintIndex(java.lang.Number)" -> "org.jfree.chart$renderer.WaferMapRenderer#getChipColor(java.lang.Number)";
  "org.jfree.chart$plot.XYPlot#clearRangeMarkers(int)" -> "plot.XYPlot#clearRangeMarkers()";
  "org.jfree.chart$plot.XYPlot#clearRangeMarkers(int)" -> "XYPlot#clearRangeMarkers()";
  "org.jfree.chart$plot.XYPlot#clearRangeMarkers(int)" -> "org.jfree.chart$plot.XYPlot#clearRangeMarkers()";
  "org.jfree.data$KeyToGroupMap#getGroup(java.lang.Comparable)" -> "KeyToGroupMap#mapKeyToGroup(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$plot.XYPlot#clearDomainMarkers(int)" -> "XYPlot#clearDomainMarkers()";
  "org.jfree.chart$plot.XYPlot#clearDomainMarkers(int)" -> "plot.XYPlot#clearDomainMarkers()";
  "org.jfree.chart$plot.XYPlot#clearDomainMarkers(int)" -> "org.jfree.chart$plot.XYPlot#clearDomainMarkers()";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$ChartPanel#removeChartMouseListener(org.jfree.chart.ChartMouseListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$plot.Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$title.Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.chart$renderer.AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)";
  "javax.swing.event$EventListenerList#remove(java.lang.Class,java.util.EventListener)" -> "org.jfree.data$general.Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)";
  "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)" -> "org.jfree.chart$ChartPanel#setChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)" -> "ChartPanel#setChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartPanel#setChart(org.jfree.chart.JFreeChart)" -> "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#setChart(org.jfree.chart.JFreeChart)" -> "ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#setChart(org.jfree.chart.JFreeChart)" -> "org.jfree.chart$PolarChartPanel#setChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartPanel#setChart(org.jfree.chart.JFreeChart)" -> "PolarChartPanel#setChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" -> "ChartPanel#<init(org.jfree.chart.JFreeChart,boolean,boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" -> "ChartPanel#<init(org.jfree.chart.JFreeChart,boolean)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" -> "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,boolean,boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" -> "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" -> "ChartPanel#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" -> "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,boolean)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart)" -> "org.jfree.chart$ChartFrame#<init(java.lang.String,org.jfree.chart.JFreeChart,boolean)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart)" -> "ChartFrame#<init(java.lang.String,org.jfree.chart.JFreeChart,boolean)";
  "org.jfree.chart$ChartFrame#<init(java.lang.String,org.jfree.chart.JFreeChart,boolean)" -> "ChartFrame#<init(java.lang.String,org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartFrame#<init(java.lang.String,org.jfree.chart.JFreeChart,boolean)" -> "org.jfree.chart$ChartFrame#<init(java.lang.String,org.jfree.chart.JFreeChart)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,boolean)" -> "PolarChartPanel#<init(org.jfree.chart.JFreeChart,boolean)";
  "org.jfree.chart$ChartPanel#<init(org.jfree.chart.JFreeChart,boolean)" -> "org.jfree.chart$PolarChartPanel#<init(org.jfree.chart.JFreeChart,boolean)";
  "org.jfree.chart$PolarChartPanel#<init(org.jfree.chart.JFreeChart,boolean)" -> "org.jfree.chart$PolarChartPanel#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$PolarChartPanel#<init(org.jfree.chart.JFreeChart,boolean)" -> "PolarChartPanel#<init(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "XYPlot#clearDomainMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "plot.XYPlot#clearRangeMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "plot.CategoryPlot#clearDomainMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "CategoryPlot#clearDomainMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "CategoryPlot#clearRangeMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "plot.XYPlot#clearDomainMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "XYPlot#clearRangeMarkers(int)";
  "org.jfree.chart$plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" -> "plot.CategoryPlot#clearRangeMarkers(int)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.WaferMapPlot#setDataset(org.jfree.data.general.WaferMapDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.SpiderWebPlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.SpiderWebPlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.PiePlot#setDataset(org.jfree.data.general.PieDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.MeterPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.PiePlot#setDataset(org.jfree.data.general.PieDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "PiePlot#setDataset(org.jfree.data.general.PieDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.MeterPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "ThermometerPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "WaferMapPlot#setDataset(org.jfree.data.general.WaferMapDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "SpiderWebPlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.ThermometerPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.WaferMapPlot#setDataset(org.jfree.data.general.WaferMapDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.ThermometerPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "MeterPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)" -> "DialPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)" -> "plot.dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)" -> "dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(int,org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "DialPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "plot.dial.DialPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "dial.DialPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.dial.DialPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.dial.DialPlot#<init(org.jfree.data.general.ValueDataset)" -> "plot.dial.DialPlot#<init()";
  "org.jfree.chart$plot.dial.DialPlot#<init(org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.dial.DialPlot#<init()";
  "org.jfree.chart$plot.dial.DialPlot#<init(org.jfree.data.general.ValueDataset)" -> "dial.DialPlot#<init()";
  "org.jfree.chart$plot.dial.DialPlot#<init(org.jfree.data.general.ValueDataset)" -> "DialPlot#<init()";
  "org.jfree.chart$plot.MeterPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "plot.MeterPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.MeterPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.MeterPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.MeterPlot#setDataset(org.jfree.data.general.ValueDataset)" -> "MeterPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.MeterPlot#<init(org.jfree.data.general.ValueDataset)" -> "plot.MeterPlot#<init()";
  "org.jfree.chart$plot.MeterPlot#<init(org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.MeterPlot#<init()";
  "org.jfree.chart$plot.MeterPlot#<init(org.jfree.data.general.ValueDataset)" -> "MeterPlot#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "dial.DialPlot#setCap(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "plot.dial.DialPlot#setDialFrame(org.jfree.chart.plot.dial.DialFrame)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "DialPlot#setDialFrame(org.jfree.chart.plot.dial.DialFrame)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "dial.DialPlot#setBackground(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "DialPlot#setCap(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "plot.dial.DialPlot#removeLayer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "DialPlot#removePointer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "dial.DialPlot#removeLayer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "DialPlot#setBackground(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "org.jfree.chart$plot.dial.DialPlot#setDialFrame(org.jfree.chart.plot.dial.DialFrame)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "org.jfree.chart$plot.dial.DialPlot#removeLayer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "dial.DialPlot#removePointer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "plot.dial.DialPlot#removePointer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "org.jfree.chart$plot.dial.DialPlot#setBackground(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "org.jfree.chart$plot.dial.DialPlot#setCap(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "DialPlot#removeLayer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "plot.dial.DialPlot#setBackground(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "org.jfree.chart$plot.dial.DialPlot#removePointer(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "plot.dial.DialPlot#setCap(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" -> "dial.DialPlot#setDialFrame(org.jfree.chart.plot.dial.DialFrame)";
  "org.jfree.chart$plot.Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)" -> "CombinedDomainCategoryPlot#remove(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#remove(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$plot.Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)" -> "plot.CombinedDomainCategoryPlot#remove(org.jfree.chart.plot.CategoryPlot)";
  "org.jfree.chart$title.Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)" -> "JFreeChart#setTitle(org.jfree.chart.title.TextTitle)";
  "org.jfree.chart$title.Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)" -> "org.jfree.chart$JFreeChart#clearSubtitles()";
  "org.jfree.chart$title.Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)" -> "JFreeChart#clearSubtitles()";
  "org.jfree.chart$title.Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)" -> "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)";
  "org.jfree.chart$JFreeChart#clearSubtitles()" -> "JFreeChart#setSubtitles(java.util.List)";
  "org.jfree.chart$JFreeChart#clearSubtitles()" -> "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)";
  "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)" -> "org.jfree.chart$editor.DefaultTitleEditor#setTitleProperties(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)" -> "DefaultTitleEditor#setTitleProperties(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)" -> "editor.DefaultTitleEditor#setTitleProperties(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)" -> "JFreeChart#setTitle(java.lang.String)";
  "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)" -> "org.jfree.chart$JFreeChart#setTitle(java.lang.String)";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "plot.XYPlot#clearDomainAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "XYPlot#clearDomainAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "CategoryPlot#clearRangeAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "plot.CategoryPlot#clearRangeAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "org.jfree.chart$plot.XYPlot#clearDomainAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "plot.XYPlot#clearRangeAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "org.jfree.chart$plot.CategoryPlot#clearDomainAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "org.jfree.chart$plot.CategoryPlot#clearRangeAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "XYPlot#clearRangeAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "org.jfree.chart$plot.XYPlot#clearRangeAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "CategoryPlot#clearDomainAxes()";
  "org.jfree.chart$axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)" -> "plot.CategoryPlot#clearDomainAxes()";
  "org.jfree.chart$renderer.AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)" -> "plot.PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)";
  "org.jfree.chart$renderer.AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)" -> "org.jfree.chart$plot.PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)";
  "org.jfree.chart$renderer.AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)" -> "PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)";
  "javax.swing.JComboBox#getSelectedIndex()" -> "org.jfree.chart$editor.DefaultPlotEditor#attemptOrientationSelection()";
  "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)" -> "CategoryTableXYDataset#equals(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)" -> "xy.CategoryTableXYDataset#equals(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)" -> "org.jfree.data$time.TimeTableXYDataset#equals(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)" -> "TimeTableXYDataset#equals(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)" -> "time.TimeTableXYDataset#equals(java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#equals(java.lang.Object)" -> "CompositeTitle#equals(java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#equals(java.lang.Object)" -> "title.CompositeTitle#equals(java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#equals(java.lang.Object)" -> "org.jfree.chart$title.CompositeTitle#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYDifferenceRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.StandardXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYBoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.CandlestickRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.VectorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYStepAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYStepAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYDifferenceRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYDotRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYDifferenceRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYBubbleRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYBlockRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.HighLowRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "VectorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYBubbleRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYDotRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "StandardXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.VectorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYBubbleRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.VectorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.CandlestickRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYBoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "CandlestickRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYBoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.XYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.StandardXYItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYBlockRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYDotRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYBubbleRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "renderer.xy.XYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "xy.HighLowRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "XYStepAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#equals(java.lang.Object)" -> "HighLowRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#equals(java.lang.Object)" -> "StackedXYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#equals(java.lang.Object)" -> "xy.StackedXYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer2#equals(java.lang.Object)" -> "renderer.xy.StackedXYAreaRenderer2#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "xy.ClusteredXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "renderer.xy.ClusteredXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "xy.StackedXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "renderer.xy.StackedXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "StackedXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "ClusteredXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "xy.XYLine3DRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.DeviationRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.xy.XYErrorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "XYSplineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.xy.XYLine3DRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "xy.XYSplineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "DeviationRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "XYLine3DRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "XYStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "xy.DeviationRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.xy.XYSplineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "xy.XYStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "xy.XYErrorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "XYErrorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.xy.XYStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.xy.DeviationRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#equals(java.lang.Object)";
  "org.jfree.chart$axis.SymbolAxis#equals(java.lang.Object)" -> "org.jfree.chart$title.PaintScaleLegend#equals(java.lang.Object)";
  "org.jfree.chart$axis.SymbolAxis#equals(java.lang.Object)" -> "PaintScaleLegend#equals(java.lang.Object)";
  "org.jfree.chart$axis.SymbolAxis#equals(java.lang.Object)" -> "title.PaintScaleLegend#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#getSectionPaint(java.lang.Comparable)" -> "MultiplePiePlot#prefetchSectionPaints()";
  "org.jfree.chart$plot.PiePlot#getSectionPaint(java.lang.Comparable)" -> "plot.MultiplePiePlot#prefetchSectionPaints()";
  "block.LineBorder#equals(java.lang.Object)" -> "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "block.LabelBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "org.jfree.chart$title.LegendGraphic#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "LegendGraphic#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "Title#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "block.BlockContainer#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "block.ColorBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "title.Title#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "LabelBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "title.LegendGraphic#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "org.jfree.chart$title.Title#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "org.jfree.chart$block.LabelBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "ColorBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "org.jfree.chart$block.ColorBlock#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#equals(java.lang.Object)" -> "BlockContainer#equals(java.lang.Object)";
  "org.jfree.chart$title.Title#equals(java.lang.Object)" -> "TextTitle#equals(java.lang.Object)";
  "org.jfree.chart$title.Title#equals(java.lang.Object)" -> "LegendTitle#equals(java.lang.Object)";
  "org.jfree.chart$title.Title#equals(java.lang.Object)" -> "title.LegendTitle#equals(java.lang.Object)";
  "org.jfree.chart$title.Title#equals(java.lang.Object)" -> "title.TextTitle#equals(java.lang.Object)";
  "org.jfree.chart$title.Title#equals(java.lang.Object)" -> "org.jfree.chart$title.TextTitle#equals(java.lang.Object)";
  "org.jfree.chart$title.Title#equals(java.lang.Object)" -> "org.jfree.chart$title.LegendTitle#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "org.jfree.data$general.Series#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "org.jfree.data$xy.DefaultHighLowDataset#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "javax.swing.SpinnerDateModel#setEnd(java.lang.Comparable)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "KeyedObjects#getIndex(java.lang.Comparable)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "Series#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "annotations.CategoryLineAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "XYSeriesCollection#getSeries(java.lang.Comparable)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "xy.DefaultHighLowDataset#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "plot.PieLabelRecord#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "PolarPlot#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickUnit#equals(java.lang.Object)" -> "plot.PolarPlot#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "MatrixSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "TimeSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "time.TimeSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "TaskSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "TimePeriodValues#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "org.jfree.data$time.TimePeriodValues#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "org.jfree.data$time.TimeSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "xy.MatrixSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "time.TimePeriodValues#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "org.jfree.data$xy.XYSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "xy.XYSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "org.jfree.data$xy.MatrixSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "gantt.TaskSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$general.Series#equals(java.lang.Object)" -> "XYSeries#equals(java.lang.Object)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.chart$annotations.CategoryTextAnnotation#equals(java.lang.Object)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$time.TimeSeriesCollection#getSeries(java.lang.String)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.chart$plot.MultiplePiePlot#equals(java.lang.Object)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)";
  "plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)" -> "category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)" -> "DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "DefaultIntervalCategoryDataset#getEndValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getEndValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "category.DefaultIntervalCategoryDataset#getStartValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "DefaultIntervalCategoryDataset#getStartValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "category.DefaultIntervalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getStartValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "category.DefaultIntervalCategoryDataset#getEndValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)" -> "DefaultIntervalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$annotations.CategoryTextAnnotation#equals(java.lang.Object)" -> "annotations.CategoryPointerAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$annotations.CategoryTextAnnotation#equals(java.lang.Object)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$annotations.CategoryTextAnnotation#equals(java.lang.Object)" -> "CategoryPointerAnnotation#equals(java.lang.Object)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)" -> "DefaultIntervalCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)" -> "category.DefaultIntervalCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowIndex(java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getSeries(java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getSeries(java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getSeries(java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable)" -> "TaskSeriesCollection#getPercentComplete(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getPercentComplete(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getSubIntervalCount(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getSubIntervalCount(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)" -> "TaskSeriesCollection#getSubIntervalCount(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getEndValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable)" -> "TaskSeriesCollection#getEndValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "general.DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "labels.IntervalCategoryToolTipGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "IntervalCategoryToolTipGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "org.jfree.chart$labels.IntervalCategoryToolTipGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "labels.IntervalCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int)" -> "IntervalCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)" -> "labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)" -> "AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)" -> "StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)" -> "labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)" -> "StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)" -> "labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateLabelString(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)";
  "StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)";
  "StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$plot.SpiderWebPlot#drawRadarPoly(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotRenderingInfo,int,int,double,double)";
  "StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.BarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "plot.SpiderWebPlot#drawRadarPoly(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotRenderingInfo,int,int,double,double)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "SpiderWebPlot#drawRadarPoly(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotRenderingInfo,int,int,double,double)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "renderer.category.AbstractCategoryItemRenderer#addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "AbstractCategoryItemRenderer#addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" -> "category.AbstractCategoryItemRenderer#addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "category.BarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "BarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "category.AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "renderer.category.BarRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int,int)" -> "renderer.category.AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)";
  "org.jfree.data$general.DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" -> "general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "renderer.category.AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "category.BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "renderer.category.BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$renderer.category.BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "category.AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)" -> "AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)" -> "TaskSeriesCollection#getStartValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)" -> "TaskSeriesCollection#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getValue(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable)" -> "gantt.TaskSeriesCollection#getStartValue(int,int)";
  "TaskSeriesCollection#getStartValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int)" -> "TaskSeriesCollection#getValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int)" -> "DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int)" -> "gantt.TaskSeriesCollection#getValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int)" -> "general.DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.chart$labels.BoxAndWhiskerToolTipGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#getStackValues(org.jfree.data.category.CategoryDataset,int,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.chart$plot.SpiderWebPlot#getPlotValue(int,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$DataUtilities#calculateRowTotal(org.jfree.data.Values2D,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$category.CategoryToPieDataset#getValue(int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "TaskSeriesCollection#getValue(int,int)" -> "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)";
  "org.jfree.chart$plot.SpiderWebPlot#getPlotValue(int,int)" -> "SpiderWebPlot#calculateMaxValue(int,int)";
  "org.jfree.chart$plot.SpiderWebPlot#getPlotValue(int,int)" -> "org.jfree.chart$plot.SpiderWebPlot#calculateMaxValue(int,int)";
  "org.jfree.chart$plot.SpiderWebPlot#getPlotValue(int,int)" -> "plot.SpiderWebPlot#calculateMaxValue(int,int)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "general.DefaultPieDataset#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "DataUtilities#getCumulativePercentages(org.jfree.data.KeyedValues)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "general.DefaultPieDataset#<init(org.jfree.data.KeyedValues)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "org.jfree.data$category.CategoryToPieDataset#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "DefaultPieDataset#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "general.DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "category.CategoryToPieDataset#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "org.jfree.data$general.DefaultPieDataset#<init(org.jfree.data.KeyedValues)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "org.jfree.data$DefaultKeyedValues#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "DefaultKeyedValues#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "DefaultPieDataset#<init(org.jfree.data.KeyedValues)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "org.jfree.data$general.DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "CategoryToPieDataset#equals(java.lang.Object)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "org.jfree.data$DataUtilities#getCumulativePercentages(org.jfree.data.KeyedValues)";
  "org.jfree.data$category.CategoryToPieDataset#getValue(int)" -> "org.jfree.data$general.DefaultPieDataset#equals(java.lang.Object)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "StackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "renderer.category.StackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "category.StackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" -> "org.jfree.chart$renderer.category.StackedBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "renderer.category.StackedBarRenderer3D#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "StackedAreaRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "category.StackedAreaRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "StackedBarRenderer3D#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "category.StackedBarRenderer3D#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" -> "renderer.category.StackedAreaRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)" -> "labels.AbstractCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)" -> "category.StackedAreaRenderer#getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)" -> "StackedAreaRenderer#getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)" -> "renderer.category.StackedAreaRenderer#getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)" -> "AbstractCategoryItemLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "CategoryToPieDataset#getValue(int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "general.DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "general.DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "general.DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "general.DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "category.CategoryToPieDataset#getValue(int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "plot.SpiderWebPlot#getPlotValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "BoxAndWhiskerToolTipGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "SpiderWebPlot#getPlotValue(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "labels.BoxAndWhiskerToolTipGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DefaultCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "renderer.category.WaterfallBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "general.DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "WaterfallBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "renderer.category.StackedAreaRenderer#getStackValues(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DataUtilities#calculateRowTotal(org.jfree.data.Values2D,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "category.WaterfallBarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "StackedAreaRenderer#getStackValues(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "category.DefaultCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "category.StackedAreaRenderer#getStackValues(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getValue(int,int)" -> "DefaultKeyedValues2D#equals(java.lang.Object)";
  "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)" -> "TaskSeriesCollection#getPercentComplete(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)" -> "gantt.TaskSeriesCollection#getPercentComplete(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getPercentComplete(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable,int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable,int)" -> "TaskSeriesCollection#getEndValue(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getEndValue(java.lang.Comparable,java.lang.Comparable,int)" -> "gantt.TaskSeriesCollection#getEndValue(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable,int)" -> "gantt.TaskSeriesCollection#getStartValue(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable,int)" -> "TaskSeriesCollection#getStartValue(int,int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(java.lang.Comparable,java.lang.Comparable,int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getStartValue(int,int,int)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "entity.CategoryItemEntity#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$xy.XYSeriesCollection#getSeries(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "ComparableObjectItem#equals(java.lang.Object)";
  "ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.chart$entity.CategoryItemEntity#equals(java.lang.Object)";
  "ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "DefaultHighLowDataset#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "CategoryLineAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "MultiplePiePlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "CategoryItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "general.Series#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValue#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$xy.DefaultOHLCDataset#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "TimeSeriesCollection#getSeries(java.lang.String)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "PieLabelRecord#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "plot.CategoryMarker#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "statistics.SimpleHistogramDataset#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "javax.swing.SpinnerNumberModel#setMinimum(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "TaskSeriesCollection#getRowIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "CategoryTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "javax.swing.SpinnerDateModel#setStart(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "annotations.CategoryTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "time.TimeSeriesCollection#getSeries(java.lang.String)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "category.DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "xy.DefaultOHLCDataset#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "DefaultOHLCDataset#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "xy.XYSeriesCollection#getSeries(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "KeyToGroupMap#getGroupIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "plot.MultiplePiePlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "gantt.TaskSeriesCollection#getRowIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "category.DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "CategoryMarker#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "SimpleHistogramDataset#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "javax.swing.SpinnerNumberModel#setMaximum(java.lang.Comparable)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "DefaultKeyedValue#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelRecord#equals(java.lang.Object)" -> "KeyToGroupMap#getKeyCount(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "KeyedObjects#getObject(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "KeyedObjects#removeValue(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects#getObject(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "KeyedObjects#insertValue(int,java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects#removeValue(java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects#insertValue(int,java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$KeyedObjects#getObject(java.lang.Comparable)" -> "org.jfree.data$KeyedObjects2D#getObject(int,int)";
  "org.jfree.data$KeyedObjects#getObject(java.lang.Comparable)" -> "KeyedObjects2D#getObject(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMeanValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getItem(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getQ1Value(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultMultiValueCategoryDataset#getValues(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMinRegularValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getValues(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultStatisticalCategoryDataset#getMeanValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getOutliers(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getQ1Value(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getItem(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getQ1Value(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultStatisticalCategoryDataset#updateBounds()";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getMaxRegularValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getQ3Value(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxOutlier(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getStdDevValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMinOutlier(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxRegularValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getMinOutlier(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultMultiValueCategoryDataset#getValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultMultiValueCategoryDataset#getValues(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMeanValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getMaxOutlier(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMinRegularValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultMultiValueCategoryDataset#getValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#updateBounds()";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getQ3Value(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getQ3Value(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getItem(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getMedianValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getOutliers(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getMinRegularValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultStatisticalCategoryDataset#getStdDevValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxOutlier(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMinOutlier(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getMeanValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultStatisticalCategoryDataset#getMeanValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultStatisticalCategoryDataset#updateBounds()";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getOutliers(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getMaxRegularValue(int,int)";
  "org.jfree.data$KeyedObjects2D#getObject(int,int)" -> "statistics.DefaultStatisticalCategoryDataset#getStdDevValue(int,int)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(int,int)" -> "statistics.DefaultStatisticalCategoryDataset#getValue(int,int)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(int,int)" -> "DefaultStatisticalCategoryDataset#getValue(int,int)";
  "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getMeanValue(int,int)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getValue(int,int)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getItem(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#updateBounds()";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getItem(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#updateBounds()";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getItem(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#updateBounds()";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getValue(int,int)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(int,int)" -> "DefaultBoxAndWhiskerCategoryDataset#getValue(int,int)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getMedianValue(int,int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getValue(int,int)";
  "org.jfree.data$KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)" -> "KeyedObjects#addObject(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)" -> "KeyedObjects2D#setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)" -> "org.jfree.data$KeyedObjects#addObject(java.lang.Comparable,java.lang.Object)";
  "PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.chart$plot.CategoryMarker#equals(java.lang.Object)";
  "PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$KeyToGroupMap#getKeyCount(java.lang.Comparable)";
  "PieLabelRecord#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#equals(java.lang.Object)" -> "ValueAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.Axis#equals(java.lang.Object)" -> "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "org.jfree.chart$axis.LogAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "org.jfree.chart$axis.PeriodAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "LogAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "axis.LogAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "org.jfree.chart$axis.NumberAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "axis.DateAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "DateAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "axis.PeriodAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "axis.NumberAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "org.jfree.chart$axis.DateAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueAxis#equals(java.lang.Object)" -> "PeriodAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.NumberAxis#equals(java.lang.Object)" -> "axis.CyclicNumberAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.NumberAxis#equals(java.lang.Object)" -> "axis.SymbolAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.NumberAxis#equals(java.lang.Object)" -> "SymbolAxis#equals(java.lang.Object)";
  "org.jfree.chart$axis.NumberAxis#equals(java.lang.Object)" -> "org.jfree.chart$axis.CyclicNumberAxis#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "StandardXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "labels.StandardXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "BubbleXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "StandardXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#equals(java.lang.Object)" -> "labels.StandardXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)" -> "labels.StandardXYZToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.BoxAndWhiskerXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)" -> "StandardXYZToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)" -> "BoxAndWhiskerXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#equals(java.lang.Object)" -> "labels.BoxAndWhiskerXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.BarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.CategoryStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "BarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "MinMaxCategoryRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "ScatterRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.LevelRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.LevelRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "LineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.MinMaxCategoryRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "CategoryStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.ScatterRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.ScatterRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.AreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "BoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.LevelRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.LineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "LevelRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.ScatterRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.CategoryStepRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.BoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.BoxAndWhiskerRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.MinMaxCategoryRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.LineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "renderer.category.AreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.BarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "AreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#equals(java.lang.Object)" -> "category.AreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.category.StatisticalLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "StatisticalLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.LineRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "LineRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "category.StatisticalLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "category.LineRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#equals(java.lang.Object)" -> "renderer.category.LineRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AreaRenderer#equals(java.lang.Object)" -> "renderer.category.StackedAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AreaRenderer#equals(java.lang.Object)" -> "category.StackedAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AreaRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.AreaRenderer#equals(java.lang.Object)" -> "StackedAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "category.StatisticalBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "StackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "renderer.category.StackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "WaterfallBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.StackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.BarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.GanttRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "StatisticalBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "renderer.category.WaterfallBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "category.WaterfallBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "renderer.category.StatisticalBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "category.StackedBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "renderer.category.BarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "category.BarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "category.GanttRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "renderer.category.GanttRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "BarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "GanttRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer3D#equals(java.lang.Object)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer3D#equals(java.lang.Object)" -> "StackedBarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer3D#equals(java.lang.Object)" -> "renderer.category.StackedBarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$renderer.category.BarRenderer3D#equals(java.lang.Object)" -> "category.StackedBarRenderer3D#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "PiePlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "plot.ThermometerPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "FastScatterPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "MeterPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "org.jfree.chart$plot.SpiderWebPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "ThermometerPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "plot.MeterPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "XYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "plot.CategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "plot.dial.DialPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "dial.DialPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "org.jfree.chart$plot.MeterPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "SpiderWebPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.Plot#equals(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.CategoryPlot#equals(java.lang.Object)" -> "plot.CombinedRangeCategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.CategoryPlot#equals(java.lang.Object)" -> "CombinedRangeCategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.CategoryPlot#equals(java.lang.Object)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.CategoryPlot#equals(java.lang.Object)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.CategoryPlot#equals(java.lang.Object)" -> "plot.CombinedDomainCategoryPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)" -> "plot.RingPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)" -> "org.jfree.chart$plot.RingPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)" -> "PiePlot3D#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)" -> "org.jfree.chart$plot.PiePlot3D#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)" -> "plot.PiePlot3D#equals(java.lang.Object)";
  "org.jfree.chart$plot.PiePlot#equals(java.lang.Object)" -> "RingPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)" -> "CombinedDomainXYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)" -> "plot.CombinedRangeXYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)" -> "plot.CombinedDomainXYPlot#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#equals(java.lang.Object)" -> "CombinedRangeXYPlot#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.PointerNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.MiddlePinNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "PinNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.LongNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.LineNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "LongNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.ShipNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.PinNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "MiddlePinNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.PlumNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "ArrowNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.MiddlePinNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.ArrowNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.PointerNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.LineNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.PinNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.ShipNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "LineNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.PlumNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "PointerNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "needle.ArrowNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.LongNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "ShipNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.MeterNeedle#equals(java.lang.Object)" -> "PlumNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.ArrowNeedle#equals(java.lang.Object)" -> "WindNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.ArrowNeedle#equals(java.lang.Object)" -> "org.jfree.chart$needle.WindNeedle#equals(java.lang.Object)";
  "org.jfree.chart$needle.ArrowNeedle#equals(java.lang.Object)" -> "needle.WindNeedle#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)" -> "labels.StandardCategoryItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)" -> "StandardCategoryToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)" -> "StandardCategoryItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)" -> "labels.StandardCategoryToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.StandardCategoryToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#equals(java.lang.Object)" -> "labels.BoxAndWhiskerToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#equals(java.lang.Object)" -> "BoxAndWhiskerToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#equals(java.lang.Object)" -> "org.jfree.chart$labels.BoxAndWhiskerToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "entity.LegendItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "org.jfree.chart$entity.XYAnnotationEntity#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "entity.XYAnnotationEntity#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "XYAnnotationEntity#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "entity.XYItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "XYItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$entity.ChartEntity#equals(java.lang.Object)" -> "org.jfree.chart$entity.XYItemEntity#equals(java.lang.Object)";
  "org.jfree.chart$renderer.AbstractRenderer#equals(java.lang.Object)" -> "renderer.DefaultPolarItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.AbstractRenderer#equals(java.lang.Object)" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$renderer.AbstractRenderer#equals(java.lang.Object)" -> "DefaultPolarItemRenderer#equals(java.lang.Object)";
  "org.jfree.chart$axis.Tick#equals(java.lang.Object)" -> "org.jfree.chart$axis.ValueTick#equals(java.lang.Object)";
  "org.jfree.chart$axis.Tick#equals(java.lang.Object)" -> "ValueTick#equals(java.lang.Object)";
  "org.jfree.chart$axis.Tick#equals(java.lang.Object)" -> "org.jfree.chart$axis.CategoryTick#equals(java.lang.Object)";
  "org.jfree.chart$axis.Tick#equals(java.lang.Object)" -> "axis.ValueTick#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueTick#equals(java.lang.Object)" -> "axis.DateTick#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueTick#equals(java.lang.Object)" -> "DateTick#equals(java.lang.Object)";
  "org.jfree.chart$axis.ValueTick#equals(java.lang.Object)" -> "org.jfree.chart$axis.DateTick#equals(java.lang.Object)";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "renderer.xy.XYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "org.jfree.chart$plot.DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "XYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "xy.XYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "plot.DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])";
  "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)" -> "DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])";
  "org.jfree.chart$plot.DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])" -> "DefaultDrawingSupplier#equals(java.lang.Object)";
  "org.jfree.chart$plot.DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])" -> "org.jfree.chart$plot.DefaultDrawingSupplier#equals(java.lang.Object)";
  "org.jfree.chart$plot.DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])" -> "plot.DefaultDrawingSupplier#equals(java.lang.Object)";
  "org.jfree.chart$plot.DefaultDrawingSupplier#equals(java.lang.Object)" -> "plot.Plot#equals(java.lang.Object)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer#equals(java.lang.Object)" -> "xy.StackedXYAreaRenderer#equals(java.lang.Object)";
  "org.jfree.chart$plot.Marker#equals(java.lang.Object)" -> "ValueMarker#equals(java.lang.Object)";
  "org.jfree.chart$plot.Marker#equals(java.lang.Object)" -> "org.jfree.chart$plot.ValueMarker#equals(java.lang.Object)";
  "org.jfree.chart$plot.Marker#equals(java.lang.Object)" -> "plot.ValueMarker#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "StrokeList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "org.jfree.chart$util.StrokeList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "labels.StandardPieSectionLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "BooleanList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "ShapeList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "util.ShapeList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "org.jfree.chart$util.ShapeList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "util.StrokeList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "org.jfree.chart$util.BooleanList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "util.BooleanList#equals(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#equals(java.lang.Object)" -> "StandardPieSectionLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#equals(java.lang.Object)" -> "annotations.XYTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#equals(java.lang.Object)" -> "XYTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#equals(java.lang.Object)" -> "org.jfree.chart$annotations.XYBoxAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#equals(java.lang.Object)" -> "org.jfree.chart$annotations.XYTextAnnotation#equals(java.lang.Object)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$KeyedObjects#getKeys()";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.SpiderWebPlot#getLegendItems()";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.MarkerAxisBand#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$renderer.OutlierList#updateAveragedOutlier()";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.FastScatterPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.SegmentedTimeline#addExceptions(java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$renderer.WaferMapRenderer#getMaxPaintValue(java.lang.Integer)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.dial.DialPlot#getPointerForDataset(int)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$ui.ProjectInfo#toString()";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$text.TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.MeterPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$JFreeChart#getLegend(int)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$text.TextLine#calculateDimensions(java.awt.Graphics2D)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.MeterPlot#getLegendItems()";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegmentCount(long,long)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$statistics.SimpleHistogramDataset#addBin(org.jfree.data.statistics.SimpleHistogramBin)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$KeyToGroupMap#clone(java.util.Collection)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategories()";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.dial.DialPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$renderer.WaferMapRenderer#getMinPaintValue(java.lang.Integer)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$axis.SymbolAxis#drawGridBandsHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.chart$plot.CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)";
  "java.nio.file$FileTreeIterator#hasNext()" -> "org.jfree.data$KeyToGroupMap#getGroups()";
  "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)" -> "ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)" -> "ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)" -> "axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)" -> "axis.ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)" -> "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)" -> "org.jfree.chart$axis.ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "CyclicNumberAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.CyclicNumberAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.CyclicNumberAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.ThermometerPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "ThermometerPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.FastScatterPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "FastScatterPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.ThermometerPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.FastScatterPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)";
  "PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.CompositeTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "title.LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$title.PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "CyclicNumberAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "SymbolAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.CyclicNumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "CyclicNumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.CyclicNumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.SymbolAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.SymbolAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "CyclicNumberAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$axis.CyclicNumberAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "axis.CyclicNumberAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "CyclicNumberAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$title.PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$title.PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)" -> "PaintScaleLegend#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)" -> "title.PaintScaleLegend#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$title.PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.chart$title.PaintScaleLegend#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$axis.CyclicNumberAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "title.PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$axis.CyclicNumberAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)" -> "PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "CombinedDomainCategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "plot.CombinedDomainCategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "plot.CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "plot.CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "plot.CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "plot.CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "CombinedDomainCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "plot.CombinedDomainCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)" -> "CombinedRangeCategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$renderer.OutlierList#updateAveragedOutlier()" -> "renderer.OutlierListCollection#updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.OutlierList#updateAveragedOutlier()" -> "OutlierListCollection#updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.OutlierList#updateAveragedOutlier()" -> "org.jfree.chart$renderer.OutlierListCollection#updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.OutlierListCollection#updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)" -> "org.jfree.chart$renderer.OutlierListCollection#add(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.OutlierListCollection#updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)" -> "OutlierListCollection#add(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.OutlierListCollection#updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)" -> "renderer.OutlierListCollection#add(org.jfree.chart.renderer.Outlier)";
  "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)" -> "time.TimeSeriesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)" -> "time.TimeSeriesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)" -> "TimeSeriesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)" -> "org.jfree.data$time.TimeSeriesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)" -> "TimeSeriesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimeSeriesCollection#getDomainBounds(boolean)" -> "org.jfree.data$time.TimeSeriesCollection#getDomainUpperBound(boolean)";
  "org.jfree.chart$renderer.WaferMapRenderer#getMaxPaintValue(java.lang.Integer)" -> "org.jfree.chart$renderer.WaferMapRenderer#getLegendCollection()";
  "org.jfree.chart$renderer.WaferMapRenderer#getMaxPaintValue(java.lang.Integer)" -> "renderer.WaferMapRenderer#getLegendCollection()";
  "org.jfree.chart$renderer.WaferMapRenderer#getMaxPaintValue(java.lang.Integer)" -> "WaferMapRenderer#getLegendCollection()";
  "org.jfree.chart$renderer.WaferMapRenderer#getLegendCollection()" -> "org.jfree.chart$plot.WaferMapPlot#getLegendItems()";
  "org.jfree.chart$renderer.WaferMapRenderer#getLegendCollection()" -> "plot.WaferMapPlot#getLegendItems()";
  "org.jfree.chart$renderer.WaferMapRenderer#getLegendCollection()" -> "WaferMapPlot#getLegendItems()";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)" -> "plot.PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)" -> "PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)";
  "org.jfree.chart$renderer.DefaultPolarItemRenderer#drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.util.concurrent$Helpers#objectToString(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.invoke$MethodHandleNatives#linkDynamicConstant(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.table$DefaultTableCellRenderer#setValue(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.util.Formatter$FormatSpecifier#printString(java.lang.Object,java.util.Locale)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.colorchooser$ValueFormatter#valueToString(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xerces.internal.impl.xs.models.XSDFACM#getTermName(int)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.TableView#calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.System$Logger#log(java.lang.System$Logger$Level,java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "sun.security.ssl$SSLLogger$SSLSimpleFormatter#formatObject(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.StringConcatHelper#stringOf(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.plaf$basic.BasicComboBoxRenderer#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.invoke$MethodHandleNatives#linkCallSite(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "sun.reflect.'annotation'$AnnotationParser#parseMemberValue(java.lang.Class,java.nio.ByteBuffer,jdk.internal.reflect.ConstantPool,java.lang.Class)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.DefaultRowSorter$ModelWrapper#getStringValueAt(int,int)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.module$ModuleDescriptor#lambda$toString$0(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.invoke$MethodType#newIndexOutOfBoundsException(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.plaf$basic.BasicComboBoxEditor#getItem()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.ParagraphView#setPropertiesFromAttributes()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JTree#convertValueToText(java.lang.Object,boolean,boolean,boolean,int,boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "sun.security.util$SignatureFileVerifier#verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.io.ObjectOutputStream#writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$StyleContext#registerStaticAttributeKey(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.beans.PropertyDescriptor#<init(java.util.Map$Entry,boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.security.auth$Subject#toString(boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JSpinner$ListEditor$ListFormatter$Filter#replace(javax.swing.text.DocumentFilter$FilterBypass,int,int,java.lang.String,javax.swing.text.AttributeSet)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.CSS#getFont(javax.swing.text.StyleContext,javax.swing.text.AttributeSet,int,javax.swing.text.html.StyleSheet)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xerces.internal.impl.xs.XMLSchemaValidator#expectedStr(java.util.List)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "JFreeChart#main(java.lang.String[])";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "plot.SpiderWebPlot#getLegendItems()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JTable$1#getColumnName(int)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "org.jfree.chart$JFreeChart#main(java.lang.String[])";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.invoke$ClassSpecializer$SpeciesData#toString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JOptionPane#paramString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.StyleSheet#getRule(javax.swing.text.html.HTML$Tag,javax.swing.text.Element)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JComboBox#paramString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#normalize(java.lang.Object,short)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.MinimalHTMLWriter#writeAttributes(javax.swing.text.AttributeSet)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$InternationalFormatter#valueToString(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.HTMLDocument$HTMLReader$ConvertAction#start(javax.swing.text.html.HTML$Tag,javax.swing.text.MutableAttributeSet)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.tree$DefaultMutableTreeNode#toString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.BlockView#calculateMinorAxisRequirements(int,javax.swing.SizeRequirements)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.parser.ContentModel#toString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.bcel.internal.generic.FieldGen#getInitValue()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#getActualValue(java.lang.Object,com.sun.org.apache.xerces.internal.impl.dv.ValidationContext,com.sun.org.apache.xerces.internal.impl.dv.ValidatedInfo,boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JSpinner$ListEditor$ListFormatter#valueToString(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.text.MessageFormat#subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "sun.security.util$ManifestEntryVerifier#setEntry(java.lang.String,java.util.jar.JarEntry)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.invoke$MemberName#toString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$StyleContext$NamedStyle#getName()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.util.Objects#toString(java.lang.Object,java.lang.String)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.RowFilter$Entry#getStringValue(int)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$NumberFormatter#toggleSign(boolean)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$InternationalFormatter#stringToValue(java.lang.String)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.SpinnerListModel#findNextMatch(java.lang.String)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#getFacets()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xalan.internal.xsltc.runtime.BasisLibrary#stringF(java.lang.Object,com.sun.org.apache.xalan.internal.xsltc.DOM)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xerces.internal.impl.xs.models.XSDFACM#checkUniqueParticleAttribution(com.sun.org.apache.xerces.internal.impl.xs.SubstitutionGroupHandler)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.util.Hashtable#toString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.JList#getNextMatch(java.lang.String,int,javax.swing.text.Position$Bias)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$StyleContext#getStaticAttributeKey(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.CSS$LengthValue#fromStyleConstants(javax.swing.text.StyleConstants,java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "javax.swing.text$html.StyleSheet#createResolvedStyle(java.lang.String,java.util.Vector,javax.swing.text.html.HTML$Tag)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "sun.awt.DebugSettings#println(java.lang.Object)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.util.Arrays#deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.util.concurrent$ConcurrentLinkedQueue#toString()";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "com.sun.org$apache.xpath.internal.compiler.OpMap#getStepLocalName(int)";
  "org.jfree.chart$ui.ProjectInfo#toString()" -> "java.lang.String#valueOf(java.lang.Object)";
  "java.lang.invoke$ClassSpecializer$SpeciesData#toString()" -> "org.jfree.chart$axis.SubCategoryAxis#drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "java.lang.String#valueOf(java.lang.Object)" -> "org.jfree.data$time.RegularTimePeriod#toString()";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateColumnLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.XSSimpleTypeDecl#getLexicalFacetValue(short)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.ListDV$ListData#toString()";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "labels.BubbleXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "java.lang.module$ModuleDescriptor$Version#compareTokens(java.util.List,java.util.List)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "SpiderWebPlot#getLegendItems()";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "labels.StandardXYZToolTipGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "labels.StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "SubCategoryAxis#drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "javax.swing.UIDefaults$TextAndMnemonicHashMap#get(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "javax.swing.text$html.ImageView#setPropertiesFromAttributes()";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "javax.swing.text$html.HTML$UnknownTag#equals(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "org.jfree.data$DefaultKeyedValue#toString()";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "StandardCategoryURLGenerator#generateURL(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "labels.AbstractCategoryItemLabelGenerator#generateColumnLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "axis.SubCategoryAxis#getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "AbstractCategoryItemLabelGenerator#generateRowLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$time.RegularTimePeriod#toString()" -> "plot.PieLabelRecord#toString()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateColumnLabel(org.jfree.data.category.CategoryDataset,int)" -> "SpiderWebPlot#drawLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,int,double,double)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateColumnLabel(org.jfree.data.category.CategoryDataset,int)" -> "org.jfree.chart$plot.SpiderWebPlot#drawLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,int,double,double)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateColumnLabel(org.jfree.data.category.CategoryDataset,int)" -> "plot.SpiderWebPlot#drawLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,int,double,double)";
  "javax.swing.UIDefaults$TextAndMnemonicHashMap#get(java.lang.Object)" -> "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "general.DefaultPieDataset#getIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "DefaultKeyedValues2D#getValue(int,int)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "org.jfree.data$general.DefaultPieDataset#getIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "DefaultKeyedValues#getValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues#removeValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "DefaultKeyedValues#removeValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "DefaultPieDataset#getIndex(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)" -> "DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)" -> "general.DefaultPieDataset#getValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)" -> "DefaultPieDataset#getValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)" -> "org.jfree.data$general.DefaultPieDataset#getValue(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "org.jfree.data$general.WaferMapDataset#getUniqueValues()";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "time.TimeTableXYDataset#getY(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "general.WaferMapDataset#getUniqueValues()";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "org.jfree.data$category.DefaultCategoryDataset#getValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "WaferMapDataset#getUniqueValues()";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "CategoryTableXYDataset#getY(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "DefaultCategoryDataset#getValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "xy.CategoryTableXYDataset#getY(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "category.DefaultCategoryDataset#getValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "org.jfree.data$time.TimeTableXYDataset#getY(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)" -> "TimeTableXYDataset#getY(int,int)";
  "org.jfree.data$general.WaferMapDataset#getUniqueValues()" -> "WaferMapDataset#getUniqueValueCount()";
  "org.jfree.data$general.WaferMapDataset#getUniqueValues()" -> "general.WaferMapDataset#getUniqueValueCount()";
  "org.jfree.data$general.WaferMapDataset#getUniqueValues()" -> "org.jfree.data$general.WaferMapDataset#getUniqueValueCount()";
  "time.TimeTableXYDataset#getY(int,int)" -> "org.jfree.data$xy.XYDatasetTableModel#getValueAt(int,int)";
  "org.jfree.data$xy.XYDatasetTableModel#getValueAt(int,int)" -> "javax.swing.JTable#getValueAt(int,int)";
  "org.jfree.data$xy.XYDatasetTableModel#getValueAt(int,int)" -> "javax.swing.table$TableRowSorter$TableRowSorterModelWrapper#getValueAt(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "xy.XYDatasetTableModel#getValueAt(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "xy.CategoryTableXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "XYDatasetTableModel#getValueAt(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "xy.CategoryTableXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "CategoryTableXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getY(int,int)" -> "CategoryTableXYDataset#getStartY(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getY(int,int)" -> "org.jfree.data$time.TimeTableXYDataset#getStartY(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getY(int,int)" -> "org.jfree.data$time.TimeTableXYDataset#getEndY(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getY(int,int)" -> "TimeTableXYDataset#getStartY(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getY(int,int)" -> "time.TimeTableXYDataset#getEndY(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getY(int,int)" -> "TimeTableXYDataset#getEndY(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getY(int,int)" -> "time.TimeTableXYDataset#getStartY(int,int)";
  "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,double)";
  "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValues#setValue(java.lang.Comparable,double)";
  "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValues#addValue(java.lang.Comparable,double)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$DefaultKeyedValues#sortByKeys(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValues#sortByKeys(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$DefaultKeyedValues#sortByValues(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "CategorySeriesHandler#addItem(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,double)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$xml.CategorySeriesHandler#addItem(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValues#sortByValues(org.jfree.chart.util.SortOrder)";
  "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)" -> "xml.CategorySeriesHandler#addItem(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues#removeValue(java.lang.Comparable)" -> "DefaultKeyedValues2D#removeColumn(java.lang.Comparable)";
  "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,double)";
  "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValues#insertValue(int,java.lang.Comparable,double)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.HTMLWriter#convertToHTML32(javax.swing.text.AttributeSet,javax.swing.text.MutableAttributeSet)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.DefaultListCellRenderer#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "java.util.Hashtable$Entry#toString()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.security.pkcs$PKCS9Attribute#toString()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.table$TableRowSorter$TableRowSorterModelWrapper#getStringValueAt(int,int)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.HTMLWriter#writeStyle(java.lang.String,javax.swing.text.Style,boolean)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.HTMLWriter#createFontAttribute(javax.swing.text.html.CSS$Attribute,javax.swing.text.AttributeSet,javax.swing.text.MutableAttributeSet)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xerces.internal.dom.DeferredDocumentImpl#getNodeValue(int,int)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xalan.internal.xsltc.compiler.util.ErrorMsg#toString(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xalan.internal.xsltc.runtime.BasisLibrary#copy(java.lang.Object,com.sun.org.apache.xml.internal.serializer.SerializationHandler,int,com.sun.org.apache.xalan.internal.xsltc.DOM)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.imageio$plugins.common.ImageUtil#convertObjectToString(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.java2d.loops$GraphicsPrimitive#simplename(java.lang.reflect.Field[],java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.table$DefaultTableModel#getColumnName(int)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.SwingUtilities#notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,java.lang.Object,int)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.util.logging$internal.LoggingProviderImpl$JULWrapper#lambda$log$0(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.plaf$basic.BasicComboBoxEditor#setItem(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "java.util.jar$Attributes#write(java.io.DataOutputStream)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.security.ssl$SSLLogger$SSLSimpleFormatter#formatMapEntry(java.util.Map$Entry)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "axis.SubCategoryAxis#drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.swing.table$DefaultTableCellHeaderRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xalan.internal.xsltc.compiler.util.ErrorMsg#toString(java.lang.Object,java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.HTMLDocument$RunElement#getName()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.reflect.'annotation'$AnnotationInvocationHandler#memberValueToString(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$DefaultFormatter#valueToString(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.DefaultCellEditor$1#setValue(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.JComboBox$DefaultKeySelectionManager#selectionForKey(char,javax.swing.ComboBoxModel)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "java.lang.invoke$InvokerBytecodeGenerator#bogusMethod(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.HTMLDocument$BlockElement#getName()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.CSS$FontSize#fromStyleConstants(javax.swing.text.StyleConstants,java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "java.lang.invoke$InvokerBytecodeGenerator#debugString(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.HTMLWriter#writeAdditionalComments()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.text$html.CSS$FontFamily#fromStyleConstants(javax.swing.text.StyleConstants,java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.table$TableColumn$1#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.swing.JComponent#putClientProperty(java.lang.Object,java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xpath.internal.objects.XObject#str()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.bcel.internal.classfile.JavaClass#indent(java.lang.Object)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xalan.internal.xsltc.runtime.BasisLibrary#stringF(java.lang.Object,int,com.sun.org.apache.xalan.internal.xsltc.DOM)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.security.util$SignatureFileVerifier#verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xerces.internal.impl.xs.models.XSCMLeaf#toString()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "sun.security.util$SignatureFileVerifier#verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "com.sun.org$apache.xerces.internal.impl.dv.ValidatedInfo#stringValue()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "java.text.AttributeEntry#toString()";
  "org.jfree.data$DefaultKeyedValue#toString()" -> "javax.print.event$PrintEvent#toString()";
  "plot.PieLabelRecord#toString()" -> "org.jfree.chart$plot.PieLabelRecord#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "AbstractCategoryItemLabelGenerator#generateColumnLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$plot.PieLabelDistributor#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "PieSectionEntity#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$axis.SubCategoryAxis#getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "entity.PieSectionEntity#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "SubCategoryAxis#getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "PieLabelDistributor#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "labels.AbstractCategoryItemLabelGenerator#generateRowLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "DefaultKeyedValue#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "StandardXYZToolTipGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "urls.StandardCategoryURLGenerator#generateURL(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#generateRowLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$urls.StandardCategoryURLGenerator#generateURL(org.jfree.data.category.CategoryDataset,int,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "StandardPieURLGenerator#generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "urls.StandardPieURLGenerator#generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$urls.StandardPieURLGenerator#generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.chart$entity.PieSectionEntity#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "org.jfree.data$xy.XYDatasetTableModel#getColumnName(int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "plot.PieLabelDistributor#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "xy.XYDatasetTableModel#getColumnName(int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "PieLabelRecord#toString()";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "BubbleXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$plot.PieLabelRecord#toString()" -> "XYDatasetTableModel#getColumnName(int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)" -> "labels.StandardXYZToolTipGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#createItemArray(org.jfree.data.xy.XYZDataset,int,int)" -> "StandardXYZToolTipGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "StandardXYZToolTipGenerator#generateToolTip(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#generateToolTip(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)" -> "labels.StandardXYZToolTipGenerator#generateToolTip(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)" -> "labels.StandardCategorySeriesLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)" -> "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)" -> "StandardCategorySeriesLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int)";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnName(int)" -> "javax.swing.JTable#addColumn(javax.swing.table.TableColumn)";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnName(int)" -> "javax.swing.JTable#getColumnName(int)";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnName(int)" -> "javax.swing.table$AbstractTableModel#findColumn(java.lang.String)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "plot.CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)" -> "org.jfree.chart$axis.SymbolAxis#drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)";
  "org.jfree.chart$axis.SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)" -> "SymbolAxis#drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)";
  "org.jfree.chart$axis.SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)" -> "axis.SymbolAxis#drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)";
  "org.jfree.chart$text.TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$text.TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)";
  "org.jfree.chart$text.TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)" -> "TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)";
  "org.jfree.chart$text.TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)" -> "text.TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)";
  "org.jfree.chart$text.TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)" -> "text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)";
  "org.jfree.chart$text.TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)" -> "TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)";
  "org.jfree.chart$text.TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)" -> "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)" -> "text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)" -> "title.TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)" -> "TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)" -> "TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)" -> "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)" -> "org.jfree.chart$title.TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "org.jfree.chart$title.TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "org.jfree.chart$block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "title.TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$text.TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)" -> "block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)" -> "PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)";
  "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)" -> "plot.PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)";
  "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)" -> "PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)";
  "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)" -> "plot.PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)";
  "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)" -> "org.jfree.chart$plot.PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)";
  "org.jfree.chart$text.TextBox#draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)" -> "org.jfree.chart$plot.PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)";
  "org.jfree.chart$JFreeChart#getLegend(int)" -> "org.jfree.chart$JFreeChart#getLegend()";
  "org.jfree.chart$JFreeChart#getLegend(int)" -> "JFreeChart#getLegend()";
  "org.jfree.chart$text.TextLine#calculateDimensions(java.awt.Graphics2D)" -> "text.TextBlock#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextLine#calculateDimensions(java.awt.Graphics2D)" -> "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextLine#calculateDimensions(java.awt.Graphics2D)" -> "TextBlock#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "axis.CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "org.jfree.chart$text.TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "text.TextBox#getHeight(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "LabelBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "TextBox#getHeight(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "org.jfree.chart$text.TextBox#getHeight(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "org.jfree.chart$axis.CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "axis.CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "block.LabelBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "org.jfree.chart$axis.CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "text.TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)";
  "org.jfree.chart$text.TextBlock#calculateDimensions(java.awt.Graphics2D)" -> "org.jfree.chart$block.LabelBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)" -> "time.TimePeriodValuesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)" -> "org.jfree.data$time.TimePeriodValuesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)" -> "TimePeriodValuesCollection#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)" -> "time.TimePeriodValuesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)" -> "org.jfree.data$time.TimePeriodValuesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimePeriodValuesCollection#getDomainBounds(boolean)" -> "TimePeriodValuesCollection#getDomainUpperBound(boolean)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)" -> "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)" -> "statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List,boolean)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)" -> "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List,boolean)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)" -> "BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List,boolean)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)" -> "statistics.Statistics#calculateMean(java.util.Collection)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.util.Collection,boolean)" -> "Statistics#calculateMean(java.util.Collection)";
  "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List,boolean)" -> "statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List)";
  "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List,boolean)" -> "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List)";
  "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List,boolean)" -> "BoxAndWhiskerCalculator#calculateBoxAndWhiskerStatistics(java.util.List)";
  "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegmentCount(long,long)" -> "SegmentedTimeline#toTimelineValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegmentCount(long,long)" -> "axis.SegmentedTimeline#toMillisecond(long)";
  "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegmentCount(long,long)" -> "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegmentCount(long,long)" -> "SegmentedTimeline#toMillisecond(long)";
  "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegmentCount(long,long)" -> "org.jfree.chart$axis.SegmentedTimeline#toMillisecond(long)";
  "SegmentedTimeline#toTimelineValue(long)" -> "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "SegmentedTimeline#toTimelineValue(long)" -> "org.jfree.chart$axis.DateAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "LineRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "BarRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.category.BarRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYPointerAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPolygonAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYBoxAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.FastScatterPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.XYDifferenceRenderer#createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPointerAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.category.BarRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractXYItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.AbstractXYItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "FastScatterPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.FastScatterPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.category.LineRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.AbstractXYItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractXYItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYBoxAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.category.LineRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.FastScatterPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "BarRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "category.LineRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYImageAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYPolygonAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYImageAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYLineAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "FastScatterPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYImageAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.XYDifferenceRenderer#createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.category.LineRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "category.BarRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "FastScatterPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYDifferenceRenderer#createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYPointerAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYShapeAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "renderer.xy.AbstractXYItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.FastScatterPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.AbstractXYItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$annotations.XYBoxAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYPolygonAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYShapeAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "annotations.XYShapeAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "xy.AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$renderer.category.BarRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.FastScatterPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$plot.XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "plot.XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "org.jfree.chart$plot.XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "org.jfree.chart$plot.XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CyclicNumberAxis#refreshVerticalTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CyclicNumberAxis#refreshVerticalTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CyclicNumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CyclicNumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CyclicNumberAxis#refreshVerticalTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CyclicNumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" -> "category.BarRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" -> "renderer.category.BarRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" -> "LineRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" -> "renderer.category.LineRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" -> "category.LineRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "plot.XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "plot.XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "plot.XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" -> "plot.XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" -> "XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" -> "plot.XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" -> "plot.XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" -> "XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)";
  "org.jfree.chart$axis.ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CyclicNumberAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CyclicNumberAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CyclicNumberAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "plot.XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "FastScatterPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "org.jfree.chart$plot.XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "plot.ThermometerPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "plot.XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "org.jfree.chart$plot.ThermometerPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "org.jfree.chart$plot.FastScatterPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "plot.FastScatterPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "org.jfree.chart$plot.FastScatterPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "org.jfree.chart$plot.CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "plot.FastScatterPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "FastScatterPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "plot.CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$axis.DateAxis#zoomRange(double,double)" -> "ThermometerPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" -> "plot.CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "axis.SegmentedTimeline#toMillisecond(long)" -> "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$plot.CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "plot.CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "plot.CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)";
  "plot.CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "plot.CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "CombinedDomainCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.CombinedDomainCategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)" -> "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)" -> "SegmentedTimeline#toTimelineValue(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)" -> "DateAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)" -> "axis.DateAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)" -> "axis.SegmentedTimeline#toTimelineValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(long)" -> "axis.SegmentedTimeline#toTimelineValue(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(java.util.Date)" -> "axis.DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(java.util.Date)" -> "axis.DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(java.util.Date)" -> "DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SegmentedTimeline#toTimelineValue(java.util.Date)" -> "DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$KeyToGroupMap#clone(java.util.Collection)" -> "org.jfree.data$KeyToGroupMap#clone()";
  "org.jfree.data$KeyToGroupMap#clone(java.util.Collection)" -> "KeyToGroupMap#clone()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategories()" -> "plot.CombinedDomainCategoryPlot#getCategories()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategories()" -> "plot.CombinedDomainCategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategories()" -> "CombinedDomainCategoryPlot#getCategories()";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategories()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CombinedDomainCategoryPlot#getCategories()" -> "CombinedDomainCategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)" -> "CombinedDomainXYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)" -> "plot.CombinedDomainXYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$labels.ItemLabelAnchor#equals(java.lang.Object)" -> "org.jfree.chart$labels.ItemLabelAnchor#readResolve()";
  "org.jfree.chart$labels.ItemLabelAnchor#equals(java.lang.Object)" -> "ItemLabelAnchor#readResolve()";
  "org.jfree.chart$labels.ItemLabelAnchor#equals(java.lang.Object)" -> "ItemLabelPosition#equals(java.lang.Object)";
  "org.jfree.chart$labels.ItemLabelAnchor#equals(java.lang.Object)" -> "labels.ItemLabelAnchor#readResolve()";
  "org.jfree.chart$labels.ItemLabelAnchor#equals(java.lang.Object)" -> "org.jfree.chart$labels.ItemLabelPosition#equals(java.lang.Object)";
  "org.jfree.chart$labels.ItemLabelAnchor#equals(java.lang.Object)" -> "labels.ItemLabelPosition#equals(java.lang.Object)";
  "java.util.zip$ZipFile$ZipEntryIterator#next()" -> "org.jfree.chart$encoders.SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)";
  "org.jfree.chart$encoders.SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)" -> "SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)" -> "org.jfree.chart$encoders.SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)" -> "encoders.SunJPEGEncoderAdapter#encode(java.awt.image.BufferedImage)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ValueAxis#setRightArrow(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ValueAxis#setLeftArrow(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterPlot#setTickLabelFormat(java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryTextAnnotation#<init(java.lang.String,java.lang.Comparable,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setBaseSectionPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialRange#setLowerBound(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$general.DatasetGroup#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$JFreeChart#getSubtitle(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.TextTitle#setText(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimeSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#setSecondSuffix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$urls.StandardCategoryURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#<init(java.lang.Comparable,double,java.lang.Comparable,double,java.awt.Paint,java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#setAnchor(org.jfree.chart.text.TextAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.StandardEntityCollection#add(org.jfree.chart.entity.ChartEntity)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#setOutlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYTextAnnotation#setText(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterPlot#setRange(org.jfree.data.Range)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.FastScatterPlot#setDomainGridlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.PaintScaleLegend#<init(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.ChartEntity#setArea(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Week#<init(int,org.jfree.data.time.Year)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[],boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.GrayPaintScale#<init(double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CyclicNumberAxis#setAdvanceLineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$KeyToGroupMap#<init(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ValueAxis#setDefaultAutoRange(org.jfree.data.Range)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.HistogramDataset#getMaximum(double[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#setSubLabelPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setDomainGridlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialBackground#<init(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.xy.XYBubbleRenderer#<init(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.PaintScaleLegend#setStripOutlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendTitle#setItemFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.CategoryToPieDataset#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.PaintScaleLegend#setAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#setRadius(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$UnknownKeyException#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setDirection(org.jfree.chart.util.Rotation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.TextAnnotation#setTextAnchor(org.jfree.chart.text.TextAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$gantt.Task#<init(java.lang.String,org.jfree.data.time.TimePeriod)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setAxisLineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setNumberFormat(java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Quarter#<init(int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.AbstractBlock#setBounds(java.awt.geom.Rectangle2D)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.PeriodAxis#setAutoRangeTimePeriodClass(java.lang.Class)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterPlot#setValueFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterPlot#setTickSize(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.RectangleConstraint#toRangeHeight(org.jfree.data.Range)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultXYZDataset#getSeriesKey(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.IntervalXYDelegate#setIntervalPositionFactor(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.FastScatterPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SubCategoryAxis#setSubLabelPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$ChartPanel#addChartMouseListener(org.jfree.chart.ChartMouseListener)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#setSecondFormatter(java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.TextTitle#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.ThermometerPlot#setAxisLocation(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterPlot#addInterval(org.jfree.chart.plot.MeterInterval)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.CategoryItemEntity#setDataset(org.jfree.data.category.CategoryDataset)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendGraphic#setShapeAnchor(org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.PaintScaleLegend#setStripOutlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.AxisCollection#add(org.jfree.chart.axis.Axis,org.jfree.chart.util.RectangleEdge)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CompassPlot#setRoseCenterPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMinorTickCount(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PolarPlot#addCornerTextItem(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CompassPlot#setLabelType(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.LogAxis#setMinorTickCount(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.CompositeTitle#setTitleContainer(org.jfree.chart.block.BlockContainer)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialBackground#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMajorTickIncrement(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYTextAnnotation#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendGraphic#<init(java.awt.Shape,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYPointerAnnotation#setArrowPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setRangeGridlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYDrawableAnnotation#<init(double,double,double,double,org.jfree.chart.Drawable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.LogAxis#setSmallestValue(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Quarter#<init(int,org.jfree.data.time.Year)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialRange#setUpperBound(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#readPoint2D(java.io.ObjectInputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#setStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.PeriodAxis#setMinorTickTimePeriodClass(java.lang.Class)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getStartValue(int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SubCategoryAxis#addSubCategory(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.FastScatterPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.Statistics#getSlope(java.lang.Number[],java.lang.Number[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.Title#setPosition(org.jfree.chart.util.RectangleEdge)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultHighLowDataset#<init(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMinorTickStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#setStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimePeriodFormatException#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.FastScatterPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.ThermometerPlot#setValuePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.ThermometerPlot#setValueFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.SimpleHistogramDataset#<init(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getSeriesKey(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setTextAnchor(org.jfree.chart.text.TextAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#setBaseSeriesOutlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYTextAnnotation#<init(java.lang.String,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#<init(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialFrame#setStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendGraphic#setShapeLocation(org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$DataUtilities#createNumberArray2D(double[][])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setBackgroundPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.SimpleHistogramBin#<init(double,double,boolean,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setOutlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialFrame#setForegroundPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.PeriodAxis#setMinorTickMarkPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYTextAnnotation#setTextAnchor(org.jfree.chart.text.TextAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CompassPlot#setLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.RectangleConstraint#toRangeWidth(org.jfree.data.Range)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$gantt.TaskSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYTextAnnotation#setFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryLabelPositions#replaceTopPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMajorTickPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#setFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setInteriorGap(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryLabelWidthType#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.PeriodAxis#setMinorTickMarkStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.SerialDate#monthCodeToString(int,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.PaintScaleLegend#setAxis(org.jfree.chart.axis.ValueAxis)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.AxisSpace#add(double,org.jfree.chart.util.RectangleEdge)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#setCategory2(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#setStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLabelPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SymbolAxis#setGridBandAlternatePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$gantt.Task#addSubtask(org.jfree.data.gantt.Task)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#setLegendItemShape(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryMarker#setKey(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.ChartEntity#getPolyCoords(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#setCategory1(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialFrame#setRadius(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setTickMarkStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLegendItemShape(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PiePlot#setLabelLinkPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Second#<init(int,org.jfree.data.time.Minute)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Month#<init(int,org.jfree.data.time.Year)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setTickLabelPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.Statistics#getStdDev(java.lang.Number[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#setDaySuffix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setAxisLinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SymbolAxis#setGridBandPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendTitle#setSources(org.jfree.chart.LegendItemSource[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CompassPlot#setRoseHighlightPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setTickLabelPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.TextAnnotation#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.LookupPaintScale#<init(double,double,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryTextAnnotation#setCategory(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getItemCount(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.SpreadsheetDate#<init(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SubCategoryAxis#setSubLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.OHLCDataItem#<init(java.util.Date,double,double,double,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Year#<init(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inc(long)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.FastScatterPlot#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.HighLowItemLabelGenerator#<init(java.text.DateFormat,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setBackgroundPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialCap#setOutlinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setInnerRadius(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.StandardGradientPaintTransformer#<init(org.jfree.chart.util.GradientPaintTransformType)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesKey(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateQ3(java.util.List)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.HistogramDataset#addSeries(java.lang.Comparable,double[],int,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$gantt.Task#setDescription(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#setLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$servlet.ServletUtilities#setTempOneTimeFilePrefix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.PaintScaleLegend#setScale(org.jfree.chart.renderer.PaintScale)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Month#<init(int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#setAxisLineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.Axis#setTickMarkPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ValueAxis#setUpArrow(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,java.lang.Number)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.TextAnnotation#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYTextAnnotation#setRotationAnchor(org.jfree.chart.text.TextAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Week#<init(int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.RingPlot#setSeparatorPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setInsets(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYLineAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.HistogramBin#<init(double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.ThermometerPlot#setPadding(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#setFillPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.TextTitle#setFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Marker#setLabelPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultXYDataset#getSeriesKey(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$DefaultKeyedValue#<init(java.lang.Comparable,java.lang.Number)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat,org.jfree.chart.util.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$servlet.ServletUtilities#setTempFilePrefix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialCap#setFillPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Plot#setNoDataMessageFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.PolarPlot#setAngleLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setTickLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.Statistics#getCorrelation(java.lang.Number[],java.lang.Number[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendTitle#setItemPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialRange#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.ValueAxis#setDownArrow(java.awt.Shape)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$encoders.SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.RingPlot#setSeparatorStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#setLabelFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#setRangeCrosshairPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setValueAnchor(org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMinorTickPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setFrameAnchor(org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.BoxAndWhiskerCalculator#calculateQ1(java.util.List)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryTextAnnotation#setCategoryAnchor(org.jfree.chart.axis.CategoryAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RectangleInsets#<init(org.jfree.chart.util.UnitType,double,double,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#readAttributedString(java.io.ObjectInputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.RingPlot#extendLine(java.awt.geom.Line2D,double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#setArrowPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryLineAnnotation#setPaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.AxisLabelEntity#<init(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimePeriodValue#<init(org.jfree.data.time.TimePeriod,java.lang.Number)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultWindDataset#getSeriesKey(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.LineBorder#<init(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$general.AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYPointerAnnotation#setArrowStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryLabelPositions#<init(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterInterval#<init(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultWindDataset#getItemCount(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$imagemap.ImageMapUtilities#htmlEscape(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.XYImageAnnotation#<init(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$encoders.SunJPEGEncoderAdapter#setQuality(float)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#clone(java.lang.Number[][])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$editor.ChartEditorManager#setChartEditorFactory(org.jfree.chart.editor.ChartEditorFactory)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#setMinuteSuffix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$DataUtilities#createNumberArray(double[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.dial.StandardDialRange#<init(double,double,java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$ChartPanel#setDefaultDirectoryForSaveAs(java.io.File)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#setHourSuffix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultXYDataset#getItemCount(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.HistogramDataset#getMinimum(double[])";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.DateTickUnit#getMillisecondCount(int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$title.LegendGraphic#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint,float)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.SerialDate#monthCodeToQuarter(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$Range#<init(double,double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.experimental$chart.annotations.XYTitleAnnotation#<init(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[],boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#setPositivePrefix(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$text.TextBlock#setLineAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.TextAnnotation#setFont(java.awt.Font)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$KeyedValueComparator#<init(org.jfree.data.KeyedValueComparatorType,org.jfree.chart.util.SortOrder)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$urls.StandardCategoryURLGenerator#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.TextAnnotation#setText(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.DefaultXYZDataset#getItemCount(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.XYPlot#getQuadrantPaint(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.LogFormat#<init(double,java.lang.String,java.lang.String,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$block.AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#setArrowStroke(java.awt.Stroke)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$PolarChartPanel#checkChart(org.jfree.chart.JFreeChart)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.TimePeriodValuesCollection#setXPosition(org.jfree.data.time.TimePeriodAnchor)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#<init(java.lang.String)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#setFaroutCoefficient(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.SimpleTimePeriod#<init(java.util.Date,java.util.Date)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$axis.CyclicNumberAxis#setAdvanceLinePaint(java.awt.Paint)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.XYSeriesCollection#getSeries(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.SpiderWebPlot#setLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$time.Minute#<init(int,org.jfree.data.time.Hour)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$xy.IntervalXYDelegate#setFixedIntervalWidth(double)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getEndValue(int,int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowKey(int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$LegendItem#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$statistics.Statistics#getMovingAverage(java.lang.Number[],java.lang.Number[],int)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.chart$plot.MeterPlot#fillArc(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double,java.awt.Paint,boolean)";
  "java.lang.IllegalArgumentException#<init(java.lang.String)" -> "org.jfree.data$general.Series#<init(java.lang.Comparable,java.lang.String)";
  "org.jfree.chart$annotations.CategoryTextAnnotation#<init(java.lang.String,java.lang.Comparable,double)" -> "annotations.CategoryPointerAnnotation#<init(java.lang.String,java.lang.Comparable,double,double)";
  "org.jfree.chart$annotations.CategoryTextAnnotation#<init(java.lang.String,java.lang.Comparable,double)" -> "CategoryPointerAnnotation#<init(java.lang.String,java.lang.Comparable,double,double)";
  "org.jfree.chart$annotations.CategoryTextAnnotation#<init(java.lang.String,java.lang.Comparable,double)" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#<init(java.lang.String,java.lang.Comparable,double,double)";
  "org.jfree.chart$title.TextTitle#setText(java.lang.String)" -> "title.DateTitle#setDateFormat(int,java.util.Locale)";
  "org.jfree.chart$title.TextTitle#setText(java.lang.String)" -> "org.jfree.chart$title.DateTitle#setDateFormat(int,java.util.Locale)";
  "org.jfree.chart$title.TextTitle#setText(java.lang.String)" -> "DateTitle#setDateFormat(int,java.util.Locale)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "TimeSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "org.jfree.data$time.TimeSeriesCollection#getSurroundingItems(int,long)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "time.TimeSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "time.TimeSeriesCollection#getSurroundingItems(int,long)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "TimeSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "TimeSeriesCollection#getSurroundingItems(int,long)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "org.jfree.data$time.TimeSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "time.TimeSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.TimeSeriesCollection#getSeries(int)" -> "org.jfree.data$time.TimeSeriesCollection#getSeriesKey(int)";
  "org.jfree.chart$util.RelativeDateFormat#setSecondSuffix(java.lang.String)" -> "RelativeDateFormat#main(java.lang.String[])";
  "org.jfree.chart$util.RelativeDateFormat#setSecondSuffix(java.lang.String)" -> "org.jfree.chart$util.RelativeDateFormat#main(java.lang.String[])";
  "org.jfree.chart$util.RelativeDateFormat#setSecondSuffix(java.lang.String)" -> "util.RelativeDateFormat#main(java.lang.String[])";
  "org.jfree.chart$block.AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)" -> "JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)";
  "org.jfree.chart$block.AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)" -> "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$JFreeChart#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "JFreeChart#<init(java.lang.String,org.jfree.chart.plot.Plot)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "org.jfree.chart$JFreeChart#<init(java.lang.String,org.jfree.chart.plot.Plot)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "JFreeChart#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)";
  "org.jfree.chart$JFreeChart#<init(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" -> "ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)";
  "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)" -> "org.jfree.chart$demo.PieChartDemo1#createChart(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)" -> "demo.PieChartDemo1#createChart(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)" -> "PieChartDemo1#createChart(org.jfree.data.general.PieDataset)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.HashMap#compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "javax.swing.RowFilter$NumberFilter#include(javax.swing.RowFilter$Entry,int)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.TreeMap#getEntry(java.lang.Object)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "javax.swing.SpinnerNumberModel#<init(java.lang.Number,java.lang.Comparable,java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.ComparableTimSort#binarySort(java.lang.Object[],int,int,int)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "util.ArrayUtilities#compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.TreeMap#put(java.lang.Object,java.lang.Object,boolean)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.TreeMap$EntrySpliterator#lambda$getComparator$d5a01062$1(java.util.Map$Entry,java.util.Map$Entry)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.Arrays#compare(java.lang.Comparable[],java.lang.Comparable[])";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.Arrays#compare(java.lang.Comparable[],int,int,java.lang.Comparable[],int,int)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap#cpr(java.util.Comparator,java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "KeyedValueComparator#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.lang.module$ModuleDescriptor#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.PriorityQueue#siftUpComparable(int,java.lang.Object,java.lang.Object[])";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.ComparableTimSort#mergeHi(int,int,int,int)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "javax.swing.SpinnerNumberModel#incrValue(int)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "java.util.Arrays#binarySearch0(java.lang.Object[],int,int,java.lang.Object)";
  "org.jfree.data$xy.XYCoordinate#compareTo(java.lang.Object)" -> "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "ComparableObjectItem#compareTo(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "ArrayUtilities#compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "javax.swing.text$InternationalFormatter#isValidValue(java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Collections$ReverseComparator#compare(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.ComparableTimSort#gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Map$Entry#lambda$comparingByValue$1065357e$1(java.util.Map$Entry,java.util.Map$Entry)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "javax.swing.SpinnerDateModel#getPreviousValue()";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.lang.CharSequence#compare(java.lang.CharSequence,java.lang.CharSequence)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.ComparableTimSort#countRunAndMakeAscending(java.lang.Object[],int,int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Comparators$NaturalOrderComparator#compare(java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.concurrent$ConcurrentSkipListMap$EntrySpliterator#lambda$getComparator$d5a01062$1(java.util.Map$Entry,java.util.Map$Entry)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Comparator#lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Arrays#mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.lang.module$ModuleDescriptor$Version#'cmp'(java.lang.Object,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Collections#indexedBinarySearch(java.util.List,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.PriorityQueue#siftDownComparable(int,java.lang.Object,java.lang.Object[],int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Collections#max(java.util.Collection)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Collections#min(java.util.Collection)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.ComparableTimSort#mergeLo(int,int,int,int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "javax.swing.table$TableRowSorter$ComparableComparator#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Map$Entry#lambda$comparingByKey$bbdbfea9$1(java.util.Map$Entry,java.util.Map$Entry)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Arrays$NaturalOrder#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.ComparableTimSort#gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.concurrent$ConcurrentHashMap#compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "javax.swing.SpinnerDateModel#<init(java.util.Date,java.lang.Comparable,java.lang.Comparable,int)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "sun.awt.shell$ShellFolder$3#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "javax.swing.SpinnerDateModel#getNextValue()";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "java.util.Collections#iteratorBinarySearch(java.util.List,java.lang.Object)";
  "ComparableObjectItem#compareTo(java.lang.Object)" -> "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)";
  "ComparableObjectItem#compareTo(java.lang.Object)" -> "org.jfree.chart$util.ArrayUtilities#compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.ArraysParallelSortHelpers$FJObject$Merger#compute()";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Objects#compare(java.lang.Object,java.lang.Object,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#binarySearch0(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.function$BinaryOperator#lambda$minBy$0(java.util.Comparator,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TimSort#gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TreeMap#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.function$BinaryOperator#lambda$maxBy$1(java.util.Comparator,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Map$Entry#lambda$comparingByKey$6d558cbf$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TreeMap#getEntryUsingComparator(java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TreeMap#merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Collections#indexedBinarySearch(java.util.List,java.lang.Object,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#equals(java.lang.Object[],java.lang.Object[],java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Collections$ReverseComparator2#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TreeMap#compute(java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TimSort#mergeLo(int,int,int,int)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#compare(java.lang.Object[],java.lang.Object[],java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Comparator#lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#compare(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TimSort#countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#equals(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Map$Entry#lambda$comparingByValue$827a17d5$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.PriorityQueue#siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Collections#iteratorBinarySearch(java.util.List,java.lang.Object,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Comparators$NullComparator#compare(java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TimSort#mergeHi(int,int,int,int)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.PriorityQueue#siftUpUsingComparator(int,java.lang.Object,java.lang.Object[],java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "javax.swing.DefaultRowSorter#compare(int,int)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TreeMap#computeIfAbsent(java.lang.Object,java.util.function.Function)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TimSort#binarySort(java.lang.Object[],int,int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Collections#max(java.util.Collection,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.TimSort#gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Comparator#lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "javax.swing.SortingFocusTraversalPolicy#mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#mismatch(java.lang.Object[],java.lang.Object[],java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Arrays#mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.util.Collections#min(java.util.Collection,java.util.Comparator)";
  "org.jfree.data$KeyedValueComparator#compare(java.lang.Object,java.lang.Object)" -> "java.lang.String#compareToIgnoreCase(java.lang.String)";
  "org.jfree.chart$util.ArrayUtilities#compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])" -> "util.ObjectUtilities#isJDK14()";
  "org.jfree.chart$util.ArrayUtilities#compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])" -> "org.jfree.chart$util.ObjectUtilities#isJDK14()";
  "org.jfree.chart$util.ArrayUtilities#compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])" -> "ObjectUtilities#isJDK14()";
  "org.jfree.chart$util.ObjectUtilities#isJDK14()" -> "text.TextUtilities#<clinit()";
  "org.jfree.chart$util.ObjectUtilities#isJDK14()" -> "org.jfree.chart$text.TextUtilities#<clinit()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "dial.DialValueIndicator#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "MeterPlot#drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.G2TextMeasurer#getStringWidth(java.lang.String,int,int)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "plot.PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "plot.dial.DialValueIndicator#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextFragment#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#setUseDrawRotatedStringWorkaround(boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$block.LabelBlock#setPaint(java.awt.Paint)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.PeriodAxis#drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "dial.DialTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$axis.MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#setUseFontMetricsGetStringBounds(boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#getUseFontMetricsGetStringBounds()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "plot.dial.DialTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$plot.dial.StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#<clinit()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "renderer.DefaultPolarItemRenderer#drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "G2TextMeasurer#getStringWidth(java.lang.String,int,int)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "DialValueIndicator#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#getUseFontMetricsGetStringBounds()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#setUseDrawRotatedStringWorkaround(boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextFragment#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$axis.SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "dial.StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "PeriodAxis#drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "SymbolAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#setUseFontMetricsGetStringBounds(boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$axis.Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "DialTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#isUseDrawRotatedStringWorkaround()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.G2TextMeasurer#getStringWidth(java.lang.String,int,int)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$block.LabelBlock#setFont(java.awt.Font)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#isUseDrawRotatedStringWorkaround()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "LabelBlock#setPaint(java.awt.Paint)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "axis.SymbolAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "block.LabelBlock#setPaint(java.awt.Paint)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextFragment#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "block.LabelBlock#setFont(java.awt.Font)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#setUseDrawRotatedStringWorkaround(boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#isUseDrawRotatedStringWorkaround()";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "LabelBlock#setFont(java.awt.Font)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "text.TextUtilities#setUseFontMetricsGetStringBounds(boolean)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)";
  "org.jfree.chart$text.TextUtilities#<clinit()" -> "org.jfree.chart$text.TextUtilities#getUseFontMetricsGetStringBounds()";
  "text.G2TextMeasurer#getStringWidth(java.lang.String,int,int)" -> "org.jfree.chart$text.TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$title.LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "LabelBlock#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "block.LabelBlock#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "title.LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "LabelBlock#<init(java.lang.String)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "block.LabelBlock#<init(java.lang.String)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$block.LabelBlock#<init(java.lang.String)";
  "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$block.LabelBlock#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$axis.MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)" -> "axis.MarkerAxisBand#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$axis.MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)" -> "MarkerAxisBand#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)" -> "TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)" -> "org.jfree.chart$text.TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)" -> "text.TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$axis.Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)" -> "axis.Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$text.TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)" -> "Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "PeriodAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "axis.PeriodAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$axis.Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$axis.PeriodAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$text.TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "org.jfree.chart$text.TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" -> "text.TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" -> "plot.dial.DialPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.dial.StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" -> "dial.DialPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.dial.StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" -> "DialPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$text.TextFragment#calculateDimensions(java.awt.Graphics2D)" -> "text.TextLine#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$text.TextFragment#calculateDimensions(java.awt.Graphics2D)" -> "TextLine#calculateDimensions(java.awt.Graphics2D)";
  "org.jfree.chart$axis.SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "SymbolAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.SymbolAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.SymbolAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)" -> "PeriodAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.PeriodAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$axis.Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)" -> "axis.PeriodAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$plot.MeterPlot#drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "DefaultPolarItemRenderer#drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$plot.dial.DialValueIndicator#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "plot.dial.StandardDialScale#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$axis.PeriodAxis#drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$text.TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)" -> "plot.MeterPlot#drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.MeterPlot#drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "MeterPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.MeterPlot#drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "plot.MeterPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$text.G2TextMeasurer#getStringWidth(java.lang.String,int,int)" -> "TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$text.G2TextMeasurer#getStringWidth(java.lang.String,int,int)" -> "text.TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)" -> "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)" -> "MeterPlot#drawArcForInterval(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.MeterInterval)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)" -> "MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)" -> "plot.MeterPlot#drawArcForInterval(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.MeterInterval)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)" -> "plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)" -> "org.jfree.chart$plot.MeterPlot#drawArcForInterval(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.MeterInterval)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" -> "org.jfree.chart$plot.MeterPlot#drawTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" -> "MeterPlot#drawTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$plot.MeterPlot#drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" -> "plot.MeterPlot#drawTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double)";
  "org.jfree.chart$text.TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)" -> "org.jfree.chart$axis.SymbolAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$entity.StandardEntityCollection#add(org.jfree.chart.entity.ChartEntity)" -> "org.jfree.chart$annotations.AbstractXYAnnotation#addEntity(org.jfree.chart.plot.PlotRenderingInfo,java.awt.Shape,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.StandardEntityCollection#add(org.jfree.chart.entity.ChartEntity)" -> "annotations.AbstractXYAnnotation#addEntity(org.jfree.chart.plot.PlotRenderingInfo,java.awt.Shape,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.StandardEntityCollection#add(org.jfree.chart.entity.ChartEntity)" -> "AbstractXYAnnotation#addEntity(org.jfree.chart.plot.PlotRenderingInfo,java.awt.Shape,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.CyclicNumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "axis.CyclicNumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "CyclicNumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.CyclicNumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "CyclicNumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "axis.CyclicNumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)" -> "org.jfree.chart$plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)" -> "Plot#setInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)" -> "plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$util.ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)" -> "org.jfree.chart$title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)" -> "title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)" -> "LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)" -> "SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)" -> "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)" -> "plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset)" -> "plot.SpiderWebPlot#<init()";
  "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset)" -> "org.jfree.chart$plot.SpiderWebPlot#<init()";
  "org.jfree.chart$plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset)" -> "SpiderWebPlot#<init()";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.ValueAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.ModuloAxis#autoAdjustRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.CyclicNumberAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "ModuloAxis#autoAdjustRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.SymbolAxis#autoAdjustRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "DateAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "PeriodAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.CyclicNumberAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.ModuloAxis#autoAdjustRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.PeriodAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.SymbolAxis#autoAdjustRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "CyclicNumberAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.PeriodAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "SymbolAxis#autoAdjustRange()";
  "axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)";
  "axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.LogarithmicAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.ValueAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.ValueAxis#setRangeAboutValue(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "ValueAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.ValueAxis#setRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "ValueAxis#setRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.LogAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "LogAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.ValueAxis#setLowerBound(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.LogAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "ValueAxis#setLowerBound(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "ValueAxis#centerRange(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "LogarithmicAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "axis.ValueAxis#centerRange(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.LogarithmicAxis#setRange(org.jfree.data.Range)";
  "axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.ValueAxis#setLowerBound(double)";
  "axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.ValueAxis#centerRange(double)";
  "axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.ValueAxis#setRangeAboutValue(double,double)";
  "axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$plot.ThermometerPlot#setAxisRange()";
  "axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.ValueAxis#setRange(double,double)";
  "axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.ValueAxis#zoomRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "org.jfree.chart$plot.ThermometerPlot#setLowerBound(double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "ThermometerPlot#setUpperBound(double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "plot.ThermometerPlot#setLowerBound(double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "ThermometerPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "org.jfree.chart$plot.ThermometerPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "org.jfree.chart$plot.ThermometerPlot#setRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "ThermometerPlot#setLowerBound(double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "ThermometerPlot#setSubrangeInfo(int,double,double,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "ThermometerPlot#setRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "plot.ThermometerPlot#setRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "plot.ThermometerPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "plot.ThermometerPlot#setUpperBound(double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "org.jfree.chart$plot.ThermometerPlot#setUpperBound(double)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisRange()" -> "plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setRange(double,double)" -> "JThermometer#setRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setRange(double,double)" -> "org.jfree.chart$plot.JThermometer#setRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setRange(double,double)" -> "plot.JThermometer#setRange(double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)" -> "org.jfree.chart$plot.JThermometer#setSubrangeInfo(int,double,double,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)" -> "ThermometerPlot#setSubrangeInfo(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)" -> "plot.ThermometerPlot#setSubrangeInfo(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)" -> "plot.JThermometer#setSubrangeInfo(int,double,double,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)" -> "JThermometer#setSubrangeInfo(int,double,double,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double,double,double)" -> "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double)" -> "org.jfree.chart$plot.JThermometer#setSubrangeInfo(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double)" -> "plot.JThermometer#setSubrangeInfo(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#setSubrangeInfo(int,double,double)" -> "JThermometer#setSubrangeInfo(int,double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "axis.ValueAxis#setUpperBound(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "ThermometerPlot#setAxisRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "org.jfree.chart$axis.CyclicNumberAxis#centerRange(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "axis.ModuloAxis#setDisplayRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "CyclicNumberAxis#centerRange(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "plot.ThermometerPlot#setAxisRange()";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "ModuloAxis#setDisplayRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "axis.CyclicNumberAxis#centerRange(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "org.jfree.chart$axis.ValueAxis#setUpperBound(double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "org.jfree.chart$axis.ModuloAxis#setDisplayRange(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRange(double,double)" -> "ValueAxis#setUpperBound(double)";
  "org.jfree.chart$axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "LogarithmicAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.LogarithmicAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "axis.LogarithmicAxis#zoomRange(double,double)";
  "org.jfree.chart$axis.LogarithmicAxis#setRange(org.jfree.data.Range)" -> "ValueAxis#setRangeAboutValue(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range)";
  "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)" -> "axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range)";
  "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)" -> "ValueAxis#setRangeWithMargins(org.jfree.data.Range)";
  "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range)" -> "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range)" -> "ValueAxis#setRangeWithMargins(double,double)";
  "org.jfree.chart$axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range)" -> "axis.ValueAxis#setRangeWithMargins(double,double)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "DateAxis#setMaximumDate(java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.DateAxis#setMaximumDate(java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.DateAxis#setMinimumDate(java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.DateAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "DateAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "DateAxis#setMinimumDate(java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "axis.DateAxis#setMinimumDate(java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "ValueAxis#setRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range,boolean,boolean)" -> "org.jfree.chart$axis.DateAxis#setMaximumDate(java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)" -> "axis.DateAxis#setRange(java.util.Date,java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.DateAxis#setRange(java.util.Date,java.util.Date)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)" -> "DateAxis#setRange(double,double)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)" -> "axis.DateAxis#setRange(double,double)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.DateAxis#setRange(double,double)";
  "org.jfree.chart$axis.DateAxis#setRange(org.jfree.data.Range)" -> "DateAxis#setRange(java.util.Date,java.util.Date)";
  "org.jfree.chart$axis.Axis#setLabelFont(java.awt.Font)" -> "editor.DefaultAxisEditor#setAxisProperties(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$axis.Axis#setLabelFont(java.awt.Font)" -> "org.jfree.chart$editor.DefaultAxisEditor#setAxisProperties(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$axis.Axis#setLabelFont(java.awt.Font)" -> "DefaultAxisEditor#setAxisProperties(org.jfree.chart.axis.Axis)";
  "org.jfree.data$time.Week#<init(int,org.jfree.data.time.Year)" -> "time.Week#parseWeek(java.lang.String)";
  "org.jfree.data$time.Week#<init(int,org.jfree.data.time.Year)" -> "org.jfree.data$time.Week#parseWeek(java.lang.String)";
  "org.jfree.data$time.Week#<init(int,org.jfree.data.time.Year)" -> "Week#parseWeek(java.lang.String)";
  "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)" -> "time.SerialDate#createInstance(int,int,int)";
  "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)" -> "SerialDate#createInstance(int,int,int)";
  "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)" -> "SerialDate#createInstance(java.util.Date)";
  "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)" -> "org.jfree.data$time.SerialDate#createInstance(int,int,int)";
  "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)" -> "org.jfree.data$time.SerialDate#createInstance(java.util.Date)";
  "org.jfree.data$time.SpreadsheetDate#<init(int,int,int)" -> "time.SerialDate#createInstance(java.util.Date)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "org.jfree.data$time.Day#<init(int,int,int)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "org.jfree.data$time.SerialDate#addYears(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "time.SerialDate#addMonths(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "time.SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "time.Day#<init(int,int,int)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "time.Day#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "SerialDate#addYears(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "org.jfree.data$time.SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "SerialDate#addMonths(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "org.jfree.data$time.SerialDate#addMonths(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "time.SerialDate#addYears(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "Day#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.SerialDate#createInstance(int,int,int)" -> "Day#<init(int,int,int)";
  "org.jfree.data$time.Day#<init(int,int,int)" -> "org.jfree.data$time.Hour#<init(int,int,int,int)";
  "org.jfree.data$time.Day#<init(int,int,int)" -> "time.Hour#<init(int,int,int,int)";
  "org.jfree.data$time.Day#<init(int,int,int)" -> "org.jfree.data$time.Minute#<init(int,int,int,int,int)";
  "org.jfree.data$time.Day#<init(int,int,int)" -> "Hour#<init(int,int,int,int)";
  "org.jfree.data$time.Day#<init(int,int,int)" -> "time.Minute#<init(int,int,int,int,int)";
  "org.jfree.data$time.Day#<init(int,int,int)" -> "Minute#<init(int,int,int,int,int)";
  "org.jfree.data$time.Minute#<init(int,int,int,int,int)" -> "Second#<init(int,int,int,int,int,int)";
  "org.jfree.data$time.Minute#<init(int,int,int,int,int)" -> "org.jfree.data$time.Second#<init(int,int,int,int,int,int)";
  "org.jfree.data$time.Minute#<init(int,int,int,int,int)" -> "time.Second#<init(int,int,int,int,int,int)";
  "org.jfree.data$time.Second#<init(int,int,int,int,int,int)" -> "time.Millisecond#<init(int,int,int,int,int,int,int)";
  "org.jfree.data$time.Second#<init(int,int,int,int,int,int)" -> "Millisecond#<init(int,int,int,int,int,int,int)";
  "org.jfree.data$time.Second#<init(int,int,int,int,int,int)" -> "time.Millisecond#getSecond()";
  "org.jfree.data$time.Second#<init(int,int,int,int,int,int)" -> "org.jfree.data$time.Millisecond#getSecond()";
  "org.jfree.data$time.Second#<init(int,int,int,int,int,int)" -> "Millisecond#getSecond()";
  "org.jfree.data$time.Second#<init(int,int,int,int,int,int)" -> "org.jfree.data$time.Millisecond#<init(int,int,int,int,int,int,int)";
  "org.jfree.data$time.Millisecond#getSecond()" -> "org.jfree.data$time.Millisecond#hashCode()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "org.jfree.data$time.Millisecond#next()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "Millisecond#previous()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "time.Millisecond#previous()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "time.Millisecond#hashCode()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "time.Millisecond#next()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "org.jfree.data$time.Millisecond#previous()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "Millisecond#hashCode()";
  "org.jfree.data$time.Millisecond#getSecond()" -> "Millisecond#next()";
  "org.jfree.data$time.Millisecond#hashCode()" -> "TimeSeriesDataItem#hashCode()";
  "org.jfree.data$time.Millisecond#hashCode()" -> "org.jfree.data$time.TimePeriodValue#hashCode()";
  "org.jfree.data$time.Millisecond#hashCode()" -> "TimePeriodValue#hashCode()";
  "org.jfree.data$time.Millisecond#hashCode()" -> "time.TimePeriodValue#hashCode()";
  "org.jfree.data$time.Millisecond#hashCode()" -> "time.TimeSeriesDataItem#hashCode()";
  "org.jfree.data$time.Millisecond#hashCode()" -> "org.jfree.data$time.TimeSeriesDataItem#hashCode()";
  "TimeSeriesDataItem#hashCode()" -> "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Comparable)";
  "TimeSeriesDataItem#hashCode()" -> "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "DialPlot#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "plot.dial.DialPlot#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "dial.DialPlot#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "Title#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "org.jfree.chart$title.Title#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "LegendGraphic#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "title.LegendGraphic#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "org.jfree.chart$title.LegendGraphic#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPlot#hashCode()";
  "org.jfree.chart$util.ObjectUtilities#hashCode(java.lang.Object)" -> "title.Title#hashCode()";
  "DialPlot#hashCode()" -> "org.jfree.data$ComparableObjectItem#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "javax.security.auth$Subject$SecureSet#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "general.Series#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "annotations.CategoryTextAnnotation#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "CategoryLineAnnotation#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "Series#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "util.HashUtilities#hashCode(int,java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "CategoryTextAnnotation#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "HashUtilities#hashCode(int,java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "annotations.CategoryLineAnnotation#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "DefaultKeyedValue#hashCode()";
  "javax.security.auth$Subject$SecureSet#hashCode()" -> "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "MultipleXYSeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "HighLowItemLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "XYTitleAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "labels.HighLowItemLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "renderer.AbstractRenderer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "org.jfree.experimental$chart.annotations.XYTitleAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "util.AbstractObjectList#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "AbstractObjectList#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "org.jfree.chart$util.AbstractObjectList#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "labels.MultipleXYSeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "org.jfree.chart$renderer.AbstractRenderer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.Object)" -> "AbstractRenderer#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "com.sun.beans$finder.Signature#addHashCode(int,java.lang.Object)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "com.sun.beans$util.Cache#hash(java.lang.Object)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.awt.font$FontRenderContext#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.ArrayList#hashCodeRange(int,int)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "sun.reflect.'annotation'$AnnotationInvocationHandler#memberValueHashCode(java.lang.Object)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.Objects#hashCode(java.lang.Object)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.Arrays#hashCode(java.lang.Object[])";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.Hashtable$EntrySet#contains(java.lang.Object)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.Hashtable#addEntry(int,java.lang.Object,java.lang.Object,int)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.ImmutableCollections$Map1#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.Hashtable#compute(java.lang.Object,java.util.function.BiFunction)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.TreeMap$Entry#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.lang.invoke$MethodType$ConcurrentWeakInternSet$WeakEntry#<init(java.lang.Object,java.lang.ref.ReferenceQueue)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.concurrent$ConcurrentHashMap$KeySetView#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.ImmutableCollections$MapN#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.ImmutableCollections$Set12#hashCode()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#hashCode()" -> "java.util.AbstractList#hashCode()";
  "java.util.AbstractList#hashCode()" -> "org.jfree.data$time.TimeSeriesCollection#hashCode()";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.concurrent$ConcurrentHashMap$MapEntry#hashCode()";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.WeakHashMap#hash(java.lang.Object)";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.Arrays#deepHashCode(java.lang.Object[])";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "jdk.internal.org$objectweb.asm.SymbolTable#copyBootstrapMethods(jdk.internal.org.objectweb.asm.ClassReader,char[])";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.AbstractMap$SimpleImmutableEntry#hashCode()";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.text.AttributeEntry#hashCode()";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.KeyValueHolder#hashCode()";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.Hashtable$EntrySet#remove(java.lang.Object)";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "sun.swing.SwingUtilities2$KeyPair#hashCode()";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "java.util.Formatter$FormatSpecifier#printHashCode(java.lang.Object,java.util.Locale)";
  "org.jfree.data$time.TimeSeriesCollection#hashCode()" -> "com.sun.org$apache.xerces.internal.impl.dv.xs.ListDV$ListData#hashCode()";
  "com.sun.org$apache.xerces.internal.impl.dv.xs.ListDV$ListData#hashCode()" -> "org.jfree.data$time.TimePeriodValues#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "com.sun.org$apache.xerces.internal.util.SymbolHash#hash(java.lang.Object)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "java.util.concurrent$ConcurrentHashMap$Node#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "java.nio.file$attribute.AclEntry#hash(int,java.lang.Object)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "sun.net.www$http.KeepAliveKey#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "java.util.AbstractMap$SimpleEntry#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "ObjectUtilities#hashCode(java.lang.Object)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "javax.swing.tree$TreePath#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "javax.security.auth$Subject#getCredHashCode(java.lang.Object)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "util.HashUtilities#hashCode(int,java.lang.Object)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "java.util.concurrent$CopyOnWriteArrayList#hashCodeOfRange(java.lang.Object[],int,int)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "sun.util.PreHashedMap$2$1$1#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "java.util.ImmutableCollections$SetN#hashCode()";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "HashUtilities#hashCode(int,java.lang.Object)";
  "org.jfree.data$time.TimePeriodValues#hashCode()" -> "java.util.AbstractSet#hashCode()";
  "java.util.AbstractSet#hashCode()" -> "org.jfree.data$xy.DefaultTableXYDataset#hashCode()";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "java.lang.invoke$ClassSpecializer$SpeciesData#hashCode()";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "java.util.EnumMap#entryHashCode(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "javax.swing.KeyboardManager$ComponentKeyStrokePair#hashCode()";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "util.ObjectUtilities#hashCode(java.lang.Object)";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "java.time.temporal$WeekFields#equals(java.lang.Object)";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "java.util.HashMap#hash(java.lang.Object)";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "java.lang.Object#toString()";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "sun.awt.SoftCache$Entry#hashCode()";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "jdk.internal.org$objectweb.asm.SymbolTable#addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])";
  "org.jfree.data$xy.DefaultTableXYDataset#hashCode()" -> "ComparableObjectItem#hashCode()";
  "java.lang.Object#toString()" -> "org.jfree.chart$axis.AxisSpace#toString()";
  "java.lang.Object#toString()" -> "org.jfree.data$statistics.BoxAndWhiskerItem#toString()";
  "ComparableObjectItem#hashCode()" -> "org.jfree.chart$annotations.CategoryTextAnnotation#hashCode()";
  "ComparableObjectItem#hashCode()" -> "org.jfree.data$DefaultKeyedValue#hashCode()";
  "ComparableObjectItem#hashCode()" -> "org.jfree.chart$annotations.CategoryLineAnnotation#hashCode()";
  "ComparableObjectItem#hashCode()" -> "org.jfree.data$general.Series#hashCode()";
  "org.jfree.chart$annotations.CategoryTextAnnotation#hashCode()" -> "javax.swing.text$StyleContext$SmallAttributeSet#hashCode()";
  "org.jfree.chart$annotations.CategoryTextAnnotation#hashCode()" -> "com.sun.org$apache.xerces.internal.impl.dtd.XMLContentSpec#hashCode()";
  "org.jfree.chart$annotations.CategoryTextAnnotation#hashCode()" -> "java.util.concurrent$ConcurrentHashMap#hashCode()";
  "org.jfree.chart$annotations.CategoryTextAnnotation#hashCode()" -> "java.util.Collections$CopiesList#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$xy.DefaultXYDataset#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.chart$text.TextBlock#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$xy.XYSeriesCollection#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$DefaultKeyedValues2D#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$xy.DefaultXYZDataset#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$KeyedObjects#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.chart$axis.MarkerAxisBand#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$KeyedObjects2D#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$xy.DefaultIntervalXYDataset#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.data$xy.MatrixSeriesCollection#hashCode()";
  "java.util.Collections$CopiesList#hashCode()" -> "org.jfree.chart$text.TextLine#hashCode()";
  "org.jfree.data$xy.DefaultXYDataset#hashCode()" -> "java.beans.WeakIdentityMap#get(java.lang.Object)";
  "org.jfree.chart$text.TextBlock#hashCode()" -> "org.jfree.chart$text.TextBox#hashCode()";
  "org.jfree.chart$text.TextBlock#hashCode()" -> "axis.CategoryTick#hashCode()";
  "org.jfree.chart$text.TextBlock#hashCode()" -> "org.jfree.chart$axis.CategoryTick#hashCode()";
  "org.jfree.chart$text.TextBlock#hashCode()" -> "CategoryTick#hashCode()";
  "org.jfree.chart$text.TextBlock#hashCode()" -> "text.TextBox#hashCode()";
  "org.jfree.chart$text.TextBlock#hashCode()" -> "TextBox#hashCode()";
  "org.jfree.data$DefaultKeyedValues2D#hashCode()" -> "org.jfree.data$category.DefaultCategoryDataset#hashCode()";
  "org.jfree.data$DefaultKeyedValues2D#hashCode()" -> "category.DefaultCategoryDataset#hashCode()";
  "org.jfree.data$DefaultKeyedValues2D#hashCode()" -> "DefaultCategoryDataset#hashCode()";
  "org.jfree.data$DefaultKeyedValue#hashCode()" -> "org.jfree.data$general.DefaultKeyedValueDataset#hashCode()";
  "org.jfree.data$general.DefaultKeyedValueDataset#hashCode()" -> "general.DefaultKeyedValueDataset#hashCode()";
  "org.jfree.data$general.DefaultKeyedValueDataset#hashCode()" -> "DefaultKeyedValueDataset#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "TimeSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "XYSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "org.jfree.data$ComparableObjectSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "xy.XYSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "org.jfree.data$xy.XYSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "org.jfree.data$time.TimeSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "ComparableObjectSeries#hashCode()";
  "org.jfree.data$general.Series#hashCode()" -> "time.TimeSeries#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "org.jfree.chart$util.ShapeList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "PaintList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "org.jfree.chart$util.PaintList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "org.jfree.chart$util.BooleanList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "util.BooleanList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "util.ShapeList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "org.jfree.chart$util.StrokeList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "ShapeList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "BooleanList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "util.StrokeList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "StrokeList#hashCode()";
  "org.jfree.chart$util.AbstractObjectList#hashCode()" -> "util.PaintList#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "StackedXYBarRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "renderer.xy.StackedXYBarRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "renderer.category.AbstractCategoryItemRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "org.jfree.chart$renderer.xy.XYStepRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "category.AbstractCategoryItemRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "renderer.xy.XYStepRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "xy.StackedXYBarRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "XYStepRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "AbstractCategoryItemRenderer#hashCode()";
  "org.jfree.chart$renderer.AbstractRenderer#hashCode()" -> "xy.XYStepRenderer#hashCode()";
  "org.jfree.chart$title.Title#hashCode()" -> "title.TextTitle#hashCode()";
  "org.jfree.chart$title.Title#hashCode()" -> "org.jfree.chart$title.TextTitle#hashCode()";
  "org.jfree.chart$title.Title#hashCode()" -> "TextTitle#hashCode()";
  "org.jfree.data$time.Millisecond#next()" -> "time.DynamicTimeSeriesCollection#setTimeBase(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.Millisecond#next()" -> "org.jfree.chart$axis.PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Millisecond#next()" -> "PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Millisecond#next()" -> "time.TimeSeries#getNextTimePeriod()";
  "org.jfree.data$time.Millisecond#next()" -> "DynamicTimeSeriesCollection#setTimeBase(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.Millisecond#next()" -> "org.jfree.data$time.TimeSeries#getNextTimePeriod()";
  "org.jfree.data$time.Millisecond#next()" -> "axis.PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Millisecond#next()" -> "TimeSeries#getNextTimePeriod()";
  "org.jfree.data$time.Millisecond#next()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#setTimeBase(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "PeriodAxis#drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.PeriodAxis#drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.PeriodAxis#drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Millisecond#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "Second#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "time.Millisecond#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Day#<init(java.util.Date)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "time.Day#<init(java.util.Date)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "Millisecond#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "time.Second#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "Day#<init(java.util.Date)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "Minute#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Second#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "time.Hour#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Hour#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "time.Minute#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "Hour#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Minute#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Millisecond#<init(java.util.Date,java.util.TimeZone)" -> "Millisecond#<init(java.util.Date)";
  "org.jfree.data$time.Millisecond#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Millisecond#<init(java.util.Date)";
  "org.jfree.data$time.Millisecond#<init(java.util.Date,java.util.TimeZone)" -> "time.Millisecond#<init(java.util.Date)";
  "org.jfree.data$time.Millisecond#<init(java.util.Date)" -> "Millisecond#<init()";
  "org.jfree.data$time.Millisecond#<init(java.util.Date)" -> "org.jfree.data$time.Millisecond#<init()";
  "org.jfree.data$time.Millisecond#<init(java.util.Date)" -> "time.Millisecond#<init()";
  "org.jfree.data$time.Millisecond#<init()" -> "DynamicTimeSeriesCollection#<init(int,int,java.util.TimeZone)";
  "org.jfree.data$time.Millisecond#<init()" -> "time.DynamicTimeSeriesCollection#<init(int,int)";
  "org.jfree.data$time.Millisecond#<init()" -> "DynamicTimeSeriesCollection#<init(int,int)";
  "org.jfree.data$time.Millisecond#<init()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int)";
  "org.jfree.data$time.Millisecond#<init()" -> "time.DynamicTimeSeriesCollection#<init(int,int,java.util.TimeZone)";
  "org.jfree.data$time.Millisecond#<init()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int,java.util.TimeZone)";
  "org.jfree.data$time.Day#<init(java.util.Date)" -> "time.Day#<init()";
  "org.jfree.data$time.Day#<init(java.util.Date)" -> "Day#parseDay(java.lang.String)";
  "org.jfree.data$time.Day#<init(java.util.Date)" -> "time.Day#parseDay(java.lang.String)";
  "org.jfree.data$time.Day#<init(java.util.Date)" -> "Day#<init()";
  "org.jfree.data$time.Day#<init(java.util.Date)" -> "org.jfree.data$time.Day#parseDay(java.lang.String)";
  "org.jfree.data$time.Day#<init(java.util.Date)" -> "org.jfree.data$time.Day#<init()";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "time.Minute#parseMinute(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "org.jfree.data$time.Minute#parseMinute(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "Second#parseSecond(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "time.Hour#parseHour(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "Hour#parseHour(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "time.Second#parseSecond(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "org.jfree.data$time.Second#parseSecond(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "org.jfree.data$time.Hour#parseHour(java.lang.String)";
  "org.jfree.data$time.Day#parseDay(java.lang.String)" -> "Minute#parseMinute(java.lang.String)";
  "org.jfree.data$time.Second#<init(java.util.Date,java.util.TimeZone)" -> "time.Second#<init(java.util.Date)";
  "org.jfree.data$time.Second#<init(java.util.Date,java.util.TimeZone)" -> "Second#<init(java.util.Date)";
  "org.jfree.data$time.Second#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Second#<init(java.util.Date)";
  "org.jfree.data$time.Second#<init(java.util.Date)" -> "time.Second#<init()";
  "org.jfree.data$time.Second#<init(java.util.Date)" -> "Second#<init()";
  "org.jfree.data$time.Second#<init(java.util.Date)" -> "org.jfree.data$time.Second#<init()";
  "org.jfree.data$time.Hour#<init(java.util.Date,java.util.TimeZone)" -> "Hour#<init(java.util.Date)";
  "org.jfree.data$time.Hour#<init(java.util.Date,java.util.TimeZone)" -> "time.Hour#<init(java.util.Date)";
  "org.jfree.data$time.Hour#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Hour#<init(java.util.Date)";
  "org.jfree.data$time.Hour#<init(java.util.Date)" -> "time.Hour#<init()";
  "org.jfree.data$time.Hour#<init(java.util.Date)" -> "org.jfree.data$time.Hour#<init()";
  "org.jfree.data$time.Hour#<init(java.util.Date)" -> "Hour#<init()";
  "org.jfree.data$time.Minute#<init(java.util.Date,java.util.TimeZone)" -> "time.Minute#<init(java.util.Date)";
  "org.jfree.data$time.Minute#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Minute#<init(java.util.Date)";
  "org.jfree.data$time.Minute#<init(java.util.Date,java.util.TimeZone)" -> "Minute#<init(java.util.Date)";
  "org.jfree.data$time.Minute#<init(java.util.Date)" -> "time.Minute#<init()";
  "org.jfree.data$time.Minute#<init(java.util.Date)" -> "Minute#<init()";
  "org.jfree.data$time.Minute#<init(java.util.Date)" -> "org.jfree.data$time.Minute#<init()";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[],boolean)" -> "QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[])";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[],boolean)" -> "axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[])";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[],boolean)" -> "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[])";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[])" -> "axis.QuarterDateFormat#<init(java.util.TimeZone)";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[])" -> "QuarterDateFormat#<init(java.util.TimeZone)";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[])" -> "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone)";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone)" -> "QuarterDateFormat#<init()";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone)" -> "axis.QuarterDateFormat#<init()";
  "org.jfree.chart$axis.QuarterDateFormat#<init(java.util.TimeZone)" -> "org.jfree.chart$axis.QuarterDateFormat#<init()";
  "org.jfree.chart$renderer.GrayPaintScale#<init(double,double)" -> "renderer.GrayPaintScale#<init()";
  "org.jfree.chart$renderer.GrayPaintScale#<init(double,double)" -> "org.jfree.chart$renderer.GrayPaintScale#<init()";
  "org.jfree.chart$renderer.GrayPaintScale#<init(double,double)" -> "GrayPaintScale#<init()";
  "org.jfree.data$KeyToGroupMap#<init(java.lang.Comparable)" -> "KeyToGroupMap#<init()";
  "org.jfree.data$KeyToGroupMap#<init(java.lang.Comparable)" -> "org.jfree.data$KeyToGroupMap#<init()";
  "org.jfree.chart$axis.ValueAxis#setDefaultAutoRange(org.jfree.data.Range)" -> "LogAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.ValueAxis#setDefaultAutoRange(org.jfree.data.Range)" -> "axis.LogAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.ValueAxis#setDefaultAutoRange(org.jfree.data.Range)" -> "org.jfree.chart$axis.LogAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.LogAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.LogAxis#<init()";
  "org.jfree.chart$axis.LogAxis#<init(java.lang.String)" -> "axis.LogAxis#<init()";
  "org.jfree.chart$axis.LogAxis#<init(java.lang.String)" -> "LogAxis#<init()";
  "org.jfree.data$statistics.HistogramDataset#getMaximum(double[])" -> "org.jfree.data$statistics.HistogramDataset#addSeries(java.lang.Comparable,double[],int)";
  "org.jfree.data$statistics.HistogramDataset#getMaximum(double[])" -> "HistogramDataset#addSeries(java.lang.Comparable,double[],int)";
  "org.jfree.data$statistics.HistogramDataset#getMaximum(double[])" -> "statistics.HistogramDataset#addSeries(java.lang.Comparable,double[],int)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$util.AbstractObjectList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "ShapeList#setShape(int,java.awt.Shape)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "StrokeList#setStroke(int,java.awt.Stroke)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "util.ShapeList#setShape(int,java.awt.Shape)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "util.ObjectList#set(int,java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$util.BooleanList#setBoolean(int,java.lang.Boolean)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "AbstractObjectList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "util.StrokeList#setStroke(int,java.awt.Stroke)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "util.BooleanList#setBoolean(int,java.lang.Boolean)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$util.StrokeList#setStroke(int,java.awt.Stroke)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "PaintList#setPaint(int,java.awt.Paint)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "ObjectList#set(int,java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "util.AbstractObjectList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "util.PaintList#setPaint(int,java.awt.Paint)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "BooleanList#setBoolean(int,java.lang.Boolean)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$util.ShapeList#setShape(int,java.awt.Shape)";
  "org.jfree.chart$util.BooleanList#setBoolean(int,java.lang.Boolean)" -> "DefaultPolarItemRenderer#setSeriesFilled(int,boolean)";
  "org.jfree.chart$util.BooleanList#setBoolean(int,java.lang.Boolean)" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#setSeriesFilled(int,boolean)";
  "org.jfree.chart$util.BooleanList#setBoolean(int,java.lang.Boolean)" -> "renderer.DefaultPolarItemRenderer#setSeriesFilled(int,boolean)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "plot.SpiderWebPlot#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "util.PaintList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "org.jfree.chart$plot.SpiderWebPlot#getSeriesPaint(int)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "org.jfree.chart$util.PaintList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "plot.SpiderWebPlot#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "SpiderWebPlot#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "plot.SpiderWebPlot#getSeriesPaint(int)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "org.jfree.chart$plot.SpiderWebPlot#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "SpiderWebPlot#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "PaintList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "SpiderWebPlot#getSeriesPaint(int)";
  "org.jfree.chart$util.PaintList#setPaint(int,java.awt.Paint)" -> "org.jfree.chart$plot.SpiderWebPlot#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$util.StrokeList#setStroke(int,java.awt.Stroke)" -> "org.jfree.chart$plot.SpiderWebPlot#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$util.StrokeList#setStroke(int,java.awt.Stroke)" -> "plot.SpiderWebPlot#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$util.StrokeList#setStroke(int,java.awt.Stroke)" -> "SpiderWebPlot#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "category.LayeredBarRenderer#setSeriesBarWidth(int,double)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "LayeredBarRenderer#setSeriesBarWidth(int,double)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "DialPlot#mapDatasetToScale(int,int)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "plot.dial.DialPlot#mapDatasetToScale(int,int)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#setSeriesBarWidth(int,double)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "dial.DialPlot#mapDatasetToScale(int,int)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPlot#mapDatasetToScale(int,int)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "renderer.category.LayeredBarRenderer#setSeriesBarWidth(int,double)";
  "org.jfree.chart$util.ObjectList#set(int,java.lang.Object)" -> "labels.StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" -> "CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "plot.XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$plot.XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" -> "XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)";
  "org.jfree.chart$util.ShapeList#setShape(int,java.awt.Shape)" -> "util.ShapeList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.ShapeList#setShape(int,java.awt.Shape)" -> "org.jfree.chart$util.ShapeList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.ShapeList#setShape(int,java.awt.Shape)" -> "ShapeList#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$block.AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)" -> "title.LegendGraphic#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)" -> "org.jfree.chart$title.LegendGraphic#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)" -> "LegendGraphic#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$plot.dial.DialBackground#<init(java.awt.Paint)" -> "dial.DialBackground#<init()";
  "org.jfree.chart$plot.dial.DialBackground#<init(java.awt.Paint)" -> "org.jfree.chart$plot.dial.DialBackground#<init()";
  "org.jfree.chart$plot.dial.DialBackground#<init(java.awt.Paint)" -> "plot.dial.DialBackground#<init()";
  "org.jfree.chart$plot.dial.DialBackground#<init(java.awt.Paint)" -> "DialBackground#<init()";
  "org.jfree.chart$renderer.xy.XYBubbleRenderer#<init(int)" -> "renderer.xy.XYBubbleRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBubbleRenderer#<init(int)" -> "org.jfree.chart$renderer.xy.XYBubbleRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBubbleRenderer#<init(int)" -> "xy.XYBubbleRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBubbleRenderer#<init(int)" -> "XYBubbleRenderer#<init()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#<init(java.lang.String)" -> "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#<init(java.lang.String)" -> "labels.MultipleXYSeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.MultipleXYSeriesLabelGenerator#<init(java.lang.String)" -> "MultipleXYSeriesLabelGenerator#<init()";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)" -> "DefaultTableXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)" -> "DefaultTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)" -> "xy.DefaultTableXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeries(int)" -> "xy.DefaultTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$gantt.Task#<init(java.lang.String,org.jfree.data.time.TimePeriod)" -> "org.jfree.data$gantt.Task#<init(java.lang.String,java.util.Date,java.util.Date)";
  "org.jfree.data$gantt.Task#<init(java.lang.String,org.jfree.data.time.TimePeriod)" -> "Task#<init(java.lang.String,java.util.Date,java.util.Date)";
  "org.jfree.data$gantt.Task#<init(java.lang.String,org.jfree.data.time.TimePeriod)" -> "gantt.Task#<init(java.lang.String,java.util.Date,java.util.Date)";
  "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.Day#previous()";
  "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.Day#next()";
  "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)" -> "Day#previous()";
  "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)" -> "time.Day#previous()";
  "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)" -> "time.Day#next()";
  "org.jfree.data$time.Day#<init(org.jfree.data.time.SerialDate)" -> "Day#next()";
  "org.jfree.data$time.Day#previous()" -> "org.jfree.data$time.Hour#previous()";
  "org.jfree.data$time.Day#previous()" -> "time.Hour#previous()";
  "org.jfree.data$time.Day#previous()" -> "Hour#previous()";
  "org.jfree.data$time.Hour#previous()" -> "org.jfree.data$time.Minute#previous()";
  "org.jfree.data$time.Hour#previous()" -> "time.Minute#previous()";
  "org.jfree.data$time.Hour#previous()" -> "Minute#previous()";
  "org.jfree.data$time.Minute#previous()" -> "org.jfree.data$time.Second#previous()";
  "org.jfree.data$time.Minute#previous()" -> "Second#previous()";
  "org.jfree.data$time.Minute#previous()" -> "time.Second#previous()";
  "org.jfree.data$time.Day#next()" -> "Hour#next()";
  "org.jfree.data$time.Day#next()" -> "org.jfree.data$time.Hour#next()";
  "org.jfree.data$time.Day#next()" -> "time.Hour#next()";
  "org.jfree.data$time.Hour#next()" -> "org.jfree.data$time.Minute#next()";
  "org.jfree.data$time.Hour#next()" -> "time.Minute#next()";
  "org.jfree.data$time.Hour#next()" -> "Minute#next()";
  "org.jfree.data$time.Minute#next()" -> "time.Second#next()";
  "org.jfree.data$time.Minute#next()" -> "org.jfree.data$time.Second#next()";
  "org.jfree.data$time.Minute#next()" -> "Second#next()";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.StandardXYItemRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.XYLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$entity.ChartEntity#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.XYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.PlotRenderingInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "XYBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.XYDifferenceRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.XYDifferenceRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "ShapeList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "block.AbstractBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.XYBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "XYAreaRenderer2#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "util.ShapeList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.StandardXYItemRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "XYDotRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "XYLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.XYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "AbstractBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.ValueAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "StandardXYItemRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$ChartRenderingInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "entity.ChartEntity#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.XYBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.XYDotRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "ChartEntity#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "XYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "axis.ValueAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$block.AbstractBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "XYDifferenceRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.XYDotRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "PlotRenderingInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "renderer.xy.XYAreaRenderer2#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.XYAreaRenderer2#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "plot.PlotRenderingInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "xy.XYLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "ValueAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "ChartRenderingInfo#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$util.ShapeList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.data$time.Quarter#<init(int,int)" -> "Quarter#next()";
  "org.jfree.data$time.Quarter#<init(int,int)" -> "Quarter#previous()";
  "org.jfree.data$time.Quarter#<init(int,int)" -> "time.Quarter#previous()";
  "org.jfree.data$time.Quarter#<init(int,int)" -> "time.Quarter#next()";
  "org.jfree.data$time.Quarter#<init(int,int)" -> "org.jfree.data$time.Quarter#previous()";
  "org.jfree.data$time.Quarter#<init(int,int)" -> "org.jfree.data$time.Quarter#next()";
  "org.jfree.chart$block.AbstractBlock#setBounds(java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.GridArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#setBounds(java.awt.geom.Rectangle2D)" -> "GridArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#setBounds(java.awt.geom.Rectangle2D)" -> "block.GridArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)" -> "TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)" -> "TextBox#<init(java.lang.String)";
  "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)" -> "text.TextBox#<init(java.lang.String)";
  "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)" -> "text.TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$text.TextBox#<init(java.lang.String)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisLocation(int)" -> "org.jfree.chart$plot.JThermometer#setShowAxisLocation(int)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisLocation(int)" -> "plot.JThermometer#setShowAxisLocation(int)";
  "org.jfree.chart$plot.ThermometerPlot#setAxisLocation(int)" -> "JThermometer#setShowAxisLocation(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "ohlc.OHLCSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "OHLCSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "ohlc.OHLCSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "time.ohlc.OHLCSeriesCollection#getItemCount(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "time.ohlc.OHLCSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "OHLCSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeries(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeriesKey(int)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "plot.JThermometer#addSubtitle(org.jfree.chart.title.Title)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "plot.JThermometer#addSubtitle(java.lang.String)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "JThermometer#addSubtitle(java.lang.String,java.awt.Font)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "org.jfree.chart$plot.JThermometer#addSubtitle(java.lang.String)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "JThermometer#addSubtitle(org.jfree.chart.title.Title)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "JThermometer#addSubtitle(java.lang.String)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "org.jfree.chart$plot.JThermometer#addSubtitle(org.jfree.chart.title.Title)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "org.jfree.chart$plot.JThermometer#addSubtitle(java.lang.String,java.awt.Font)";
  "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)" -> "plot.JThermometer#addSubtitle(java.lang.String,java.awt.Font)";
  "org.jfree.chart$plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" -> "plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" -> "org.jfree.chart$plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" -> "XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "StandardDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "DialPointer$Pin#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.StandardDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.StandardDialRange#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.StandardDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.ArcDialFrame#getOuterWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.DialPointer$Pin#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.ArcDialFrame#getOuterWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.DialCap#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "DialPointer$Pointer#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.DialCap#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "StandardDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.StandardDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "ArcDialFrame#getOuterWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "DialCap#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.ArcDialFrame#getOuterWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.StandardDialRange#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.StandardDialRange#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.StandardDialFrame#getWindow(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "StandardDialRange#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "org.jfree.chart$plot.dial.DialCap#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "dial.DialPointer$Pointer#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.DialPointer$Pin#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.DialPlot#rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" -> "plot.dial.DialPointer$Pointer#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.StandardDialFrame#getWindow(java.awt.geom.Rectangle2D)" -> "plot.dial.StandardDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.StandardDialFrame#getWindow(java.awt.geom.Rectangle2D)" -> "dial.StandardDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.dial.ArcDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)" -> "dial.ArcDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)" -> "plot.dial.ArcDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.dial.ArcDialFrame#getWindow(java.awt.geom.Rectangle2D)" -> "ArcDialFrame#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.data$time.Quarter#<init(int,org.jfree.data.time.Year)" -> "org.jfree.data$time.Quarter#parseQuarter(java.lang.String)";
  "org.jfree.data$time.Quarter#<init(int,org.jfree.data.time.Year)" -> "Quarter#parseQuarter(java.lang.String)";
  "org.jfree.data$time.Quarter#<init(int,org.jfree.data.time.Year)" -> "time.Quarter#parseQuarter(java.lang.String)";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init(java.lang.String)" -> "labels.StandardCategorySeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init(java.lang.String)" -> "StandardCategorySeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init()" -> "renderer.category.AbstractCategoryItemRenderer#<init()";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init()" -> "category.AbstractCategoryItemRenderer#<init()";
  "org.jfree.chart$labels.StandardCategorySeriesLabelGenerator#<init()" -> "AbstractCategoryItemRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.MinMaxCategoryRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.LineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "AreaRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.BoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.AreaRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.BarRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.MinMaxCategoryRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "CategoryStepRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "ScatterRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.BarRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.CategoryStepRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.LevelRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.BarRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.LineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.CategoryStepRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "BoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.AreaRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "BarRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.ScatterRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.AreaRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.BoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "MinMaxCategoryRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.ScatterRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "LineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "renderer.category.LevelRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.LevelRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "category.ScatterRenderer#<init()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#<init()" -> "LevelRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "LineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "renderer.category.LineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "renderer.category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "category.LineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "renderer.category.LineRenderer3D#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "StatisticalLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "LineRenderer3D#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "category.LineRenderer3D#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.category.LineRenderer3D#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init()" -> "renderer.category.DefaultCategoryItemRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init()" -> "DefaultCategoryItemRenderer#<init()";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#<init()" -> "category.DefaultCategoryItemRenderer#<init()";
  "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)" -> "category.StatisticalLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)" -> "StatisticalLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#<init(boolean,boolean)" -> "renderer.category.StatisticalLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.category.AreaRenderer#<init()" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AreaRenderer#<init()" -> "category.StackedAreaRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AreaRenderer#<init()" -> "StackedAreaRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.AreaRenderer#<init()" -> "renderer.category.StackedAreaRenderer#<init(boolean)";
  "org.jfree.chart$renderer.category.StackedAreaRenderer#<init(boolean)" -> "org.jfree.chart$renderer.category.StackedAreaRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedAreaRenderer#<init(boolean)" -> "StackedAreaRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedAreaRenderer#<init(boolean)" -> "category.StackedAreaRenderer#<init()";
  "org.jfree.chart$renderer.category.StackedAreaRenderer#<init(boolean)" -> "renderer.category.StackedAreaRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "IntervalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "renderer.category.StatisticalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "category.StatisticalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "StatisticalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "org.jfree.chart$renderer.category.StatisticalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "renderer.category.IntervalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "LayeredBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "renderer.category.LayeredBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "category.IntervalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "org.jfree.chart$renderer.category.IntervalBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "category.LayeredBarRenderer#<init()";
  "org.jfree.chart$renderer.category.BarRenderer#<init()" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#<init()";
  "org.jfree.chart$renderer.category.CategoryStepRenderer#<init(boolean)" -> "renderer.category.CategoryStepRenderer#<init()";
  "org.jfree.chart$renderer.category.CategoryStepRenderer#<init(boolean)" -> "CategoryStepRenderer#<init()";
  "org.jfree.chart$renderer.category.CategoryStepRenderer#<init(boolean)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#<init()";
  "org.jfree.chart$renderer.category.CategoryStepRenderer#<init(boolean)" -> "category.CategoryStepRenderer#<init()";
  "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "XYShapeAnnotation#<init(java.awt.Shape)";
  "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "annotations.XYShapeAnnotation#<init(java.awt.Shape)";
  "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$annotations.XYShapeAnnotation#<init(java.awt.Shape)";
  "org.jfree.data$statistics.Statistics#getSlope(java.lang.Number[],java.lang.Number[])" -> "org.jfree.data$statistics.Statistics#getLinearFit(java.lang.Number[],java.lang.Number[])";
  "org.jfree.data$statistics.Statistics#getSlope(java.lang.Number[],java.lang.Number[])" -> "statistics.Statistics#getLinearFit(java.lang.Number[],java.lang.Number[])";
  "org.jfree.data$statistics.Statistics#getSlope(java.lang.Number[],java.lang.Number[])" -> "Statistics#getLinearFit(java.lang.Number[],java.lang.Number[])";
  "org.jfree.data$time.TimePeriodFormatException#<init(java.lang.String)" -> "org.jfree.data$time.Year#parseYear(java.lang.String)";
  "org.jfree.data$time.TimePeriodFormatException#<init(java.lang.String)" -> "time.Year#parseYear(java.lang.String)";
  "org.jfree.data$time.TimePeriodFormatException#<init(java.lang.String)" -> "Year#parseYear(java.lang.String)";
  "org.jfree.data$time.Year#parseYear(java.lang.String)" -> "time.Month#evaluateAsYear(java.lang.String)";
  "org.jfree.data$time.Year#parseYear(java.lang.String)" -> "Month#evaluateAsYear(java.lang.String)";
  "org.jfree.data$time.Year#parseYear(java.lang.String)" -> "Week#evaluateAsYear(java.lang.String)";
  "org.jfree.data$time.Year#parseYear(java.lang.String)" -> "org.jfree.data$time.Week#evaluateAsYear(java.lang.String)";
  "org.jfree.data$time.Year#parseYear(java.lang.String)" -> "org.jfree.data$time.Month#evaluateAsYear(java.lang.String)";
  "org.jfree.data$time.Year#parseYear(java.lang.String)" -> "time.Week#evaluateAsYear(java.lang.String)";
  "org.jfree.data$time.Month#evaluateAsYear(java.lang.String)" -> "org.jfree.data$time.Month#parseMonth(java.lang.String)";
  "org.jfree.data$time.Month#evaluateAsYear(java.lang.String)" -> "time.Month#parseMonth(java.lang.String)";
  "org.jfree.data$time.Month#evaluateAsYear(java.lang.String)" -> "Month#parseMonth(java.lang.String)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "XYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "AbstractBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.XYLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.XYDotRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$ChartRenderingInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "XYDifferenceRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.XYDotRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.XYBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$block.AbstractBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.XYBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.StandardXYItemRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.XYDifferenceRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "XYDotRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "XYBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "entity.ChartEntity#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "axis.ValueAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "plot.PlotRenderingInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.XYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.XYAreaRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer2#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "XYLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.ValueAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.XYDifferenceRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$entity.ChartEntity#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "block.AbstractBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "XYAreaRenderer2#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYDotRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.XYLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "ChartRenderingInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "StandardXYItemRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "ChartEntity#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "PlotRenderingInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.XYAreaRenderer2#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "ValueAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.PlotRenderingInfo#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "xy.XYAreaRenderer2#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readShape(java.io.ObjectInputStream)" -> "renderer.xy.StandardXYItemRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$plot.ThermometerPlot#setValuePaint(java.awt.Paint)" -> "plot.JThermometer#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.ThermometerPlot#setValuePaint(java.awt.Paint)" -> "JThermometer#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.ThermometerPlot#setValuePaint(java.awt.Paint)" -> "org.jfree.chart$plot.JThermometer#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.ThermometerPlot#setValueFont(java.awt.Font)" -> "JThermometer#setValueFont(java.awt.Font)";
  "org.jfree.chart$plot.ThermometerPlot#setValueFont(java.awt.Font)" -> "plot.JThermometer#setValueFont(java.awt.Font)";
  "org.jfree.chart$plot.ThermometerPlot#setValueFont(java.awt.Font)" -> "org.jfree.chart$plot.JThermometer#setValueFont(java.awt.Font)";
  "org.jfree.chart$annotations.XYTextAnnotation#<init(java.lang.String,double,double)" -> "org.jfree.chart$annotations.XYPointerAnnotation#<init(java.lang.String,double,double,double)";
  "org.jfree.chart$annotations.XYTextAnnotation#<init(java.lang.String,double,double)" -> "annotations.XYPointerAnnotation#<init(java.lang.String,double,double,double)";
  "org.jfree.chart$annotations.XYTextAnnotation#<init(java.lang.String,double,double)" -> "XYPointerAnnotation#<init(java.lang.String,double,double,double)";
  "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#<init(int)" -> "XYSplineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#<init(int)" -> "renderer.xy.XYSplineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#<init(int)" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer#<init(int)" -> "xy.XYSplineAndShapeRenderer#<init()";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)" -> "Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)" -> "org.jfree.chart$plot.CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)" -> "plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)" -> "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)" -> "plot.CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)" -> "CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "renderer.category.AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "category.AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "plot.Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "plot.CompassPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$plot.CompassPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$plot.Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "CompassPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$DataUtilities#createNumberArray2D(double[][])" -> "DefaultIntervalCategoryDataset#<init(double[][],double[][])";
  "org.jfree.data$DataUtilities#createNumberArray2D(double[][])" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(double[][],double[][])";
  "org.jfree.data$DataUtilities#createNumberArray2D(double[][])" -> "category.DefaultIntervalCategoryDataset#<init(double[][],double[][])";
  "org.jfree.data$statistics.SimpleHistogramBin#<init(double,double,boolean,boolean)" -> "statistics.SimpleHistogramBin#<init(double,double)";
  "org.jfree.data$statistics.SimpleHistogramBin#<init(double,double,boolean,boolean)" -> "SimpleHistogramBin#<init(double,double)";
  "org.jfree.data$statistics.SimpleHistogramBin#<init(double,double,boolean,boolean)" -> "org.jfree.data$statistics.SimpleHistogramBin#<init(double,double)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)" -> "TimePeriodValuesCollection#getSeriesKey(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getSeriesKey(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)" -> "TimePeriodValuesCollection#getItemCount(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)" -> "time.TimePeriodValuesCollection#getItemCount(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)" -> "time.TimePeriodValuesCollection#getSeriesKey(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeries(int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getItemCount(int)";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)" -> "XYDifferenceRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)" -> "xy.XYDifferenceRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)" -> "renderer.xy.XYDifferenceRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#<init()";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$labels.ItemLabelPosition#<init()";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "labels.ItemLabelPosition#<init()";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "ItemLabelPosition#<init()";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)" -> "org.jfree.chart$renderer.AbstractRenderer#<init()";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)" -> "renderer.AbstractRenderer#<init()";
  "org.jfree.chart$labels.ItemLabelPosition#<init(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)" -> "AbstractRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "xy.AbstractXYItemRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "renderer.DefaultPolarItemRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "DefaultPolarItemRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "AbstractXYItemRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "renderer.xy.AbstractXYItemRenderer#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#<init()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()";
  "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)" -> "org.jfree.chart$renderer.WaferMapRenderer#<init(int,int)";
  "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)" -> "renderer.WaferMapRenderer#<init()";
  "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)" -> "WaferMapRenderer#<init()";
  "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)" -> "WaferMapRenderer#<init(int,int)";
  "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)" -> "renderer.WaferMapRenderer#<init(int,int)";
  "org.jfree.chart$renderer.WaferMapRenderer#<init(java.lang.Integer,java.lang.Integer)" -> "org.jfree.chart$renderer.WaferMapRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "WindItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.WindItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "XYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.VectorRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.XYBlockRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "YIntervalRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.XYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "XYLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.VectorRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "HighLowRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "XYDotRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.HighLowRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.XYDotRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.XYDotRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "XYBubbleRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.HighLowRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.YIntervalRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.WindItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.XYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.XYBubbleRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.YIntervalRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "XYBlockRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "VectorRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "XYDifferenceRenderer#<init(java.awt.Paint,java.awt.Paint,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.XYBlockRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.YIntervalRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.VectorRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "org.jfree.chart$renderer.xy.WindItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.XYLineAndShapeRenderer#<init(boolean,boolean)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "renderer.xy.HighLowRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.XYDotRenderer#<init()";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#<init()" -> "xy.XYBubbleRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#<init(double,boolean)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "renderer.xy.XYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "xy.ClusteredXYBarRenderer#<init(double,boolean)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "xy.XYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "ClusteredXYBarRenderer#<init(double,boolean)";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "org.jfree.chart$renderer.xy.XYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "XYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYBarRenderer#<init(double)" -> "renderer.xy.ClusteredXYBarRenderer#<init(double,boolean)";
  "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#<init(double,boolean)" -> "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#<init(double,boolean)" -> "ClusteredXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#<init(double,boolean)" -> "xy.ClusteredXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.ClusteredXYBarRenderer#<init(double,boolean)" -> "renderer.xy.ClusteredXYBarRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "XYLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "renderer.xy.XYLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "xy.XYErrorRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "renderer.xy.XYErrorRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "XYErrorRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init(boolean,boolean)" -> "xy.XYLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "DefaultXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "xy.XYSplineAndShapeRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "XYSplineAndShapeRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "renderer.xy.DefaultXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "XYLine3DRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "renderer.xy.XYLine3DRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "renderer.xy.XYSplineAndShapeRenderer#<init(int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "org.jfree.experimental$chart.renderer.xy.XYSmoothLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "xy.DefaultXYItemRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "XYSmoothLineAndShapeRenderer#<init()";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#<init()" -> "xy.XYLine3DRenderer#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "StandardCategoryItemLabelGenerator#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "StandardCategoryToolTipGenerator#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.StandardCategoryItemLabelGenerator#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.StandardCategoryToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init()" -> "plot.SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init()" -> "SpiderWebPlot#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.IntervalCategoryToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "BoxAndWhiskerToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.BoxAndWhiskerToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "IntervalCategoryToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "IntervalCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.BoxAndWhiskerToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.IntervalCategoryToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.IntervalCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.BoxAndWhiskerToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.BoxAndWhiskerToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.IntervalCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "BoxAndWhiskerToolTipGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "IntervalCategoryItemLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.IntervalCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "IntervalCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat)" -> "labels.IntervalCategoryItemLabelGenerator#<init()";
  "org.jfree.data$time.SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "SerialDate#getNearestDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "time.SerialDate#getNearestDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.SerialDate#getNearestDayOfWeek(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "org.jfree.chart$plot.XYPlot#getRangeAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "XYPlot#getDomainAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "plot.XYPlot#getRangeAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "org.jfree.chart$plot.XYPlot#getDomainAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "org.jfree.chart$axis.AxisLocation#getOpposite()";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "plot.CategoryPlot#getRangeAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "axis.AxisLocation#getOpposite()";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "plot.XYPlot#getDomainAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "CategoryPlot#getRangeAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "XYPlot#getRangeAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)";
  "org.jfree.chart$axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)" -> "AxisLocation#getOpposite()";
  "org.jfree.chart$plot.XYPlot#getRangeAxisLocation(int)" -> "plot.XYPlot#getRangeAxisEdge(int)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisLocation(int)" -> "org.jfree.chart$plot.XYPlot#getRangeAxisEdge(int)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisLocation(int)" -> "XYPlot#getRangeAxisEdge(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxisLocation(int)" -> "org.jfree.chart$plot.XYPlot#getDomainAxisEdge(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxisLocation(int)" -> "XYPlot#getDomainAxisEdge(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxisLocation(int)" -> "plot.XYPlot#getDomainAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "CategoryPlot#getDomainAxisLocation()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "plot.CategoryPlot#getDomainAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "CategoryPlot#getDomainAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "plot.CategoryPlot#getDomainAxisLocation(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "CategoryPlot#getDomainAxisLocation(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisLocation(int)" -> "plot.CategoryPlot#getDomainAxisLocation()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge(int)" -> "CategoryPlot#getDomainAxisEdge()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge(int)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge(int)" -> "plot.CategoryPlot#getDomainAxisEdge()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "category.BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "org.jfree.chart$renderer.category.LevelRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "LevelRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "renderer.category.LevelRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "category.LevelRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "renderer.category.BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "org.jfree.chart$renderer.category.BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxisEdge()" -> "BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)" -> "CategoryPlot#getRangeAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)" -> "plot.CategoryPlot#getRangeAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)" -> "CategoryPlot#getRangeAxisLocation()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisEdge(int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)" -> "plot.CategoryPlot#getRangeAxisLocation()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation(int)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisLocation()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisEdge(int)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisEdge()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisEdge(int)" -> "plot.CategoryPlot#getRangeAxisEdge()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisEdge(int)" -> "CategoryPlot#getRangeAxisEdge()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<init(java.lang.String)" -> "axis.CategoryLabelWidthType#<clinit()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "axis.CategoryLabelPositions#createUpRotationLabelPositions(double)";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "CategoryLabelPositions#<clinit()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "CategoryLabelWidthType#<clinit()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "CategoryLabelWidthType#readResolve()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPositions#createUpRotationLabelPositions(double)";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "org.jfree.chart$axis.CategoryLabelWidthType#readResolve()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "axis.CategoryLabelPosition#<init()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPosition#<init()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "CategoryLabelPosition#<init()";
  "org.jfree.chart$axis.CategoryLabelWidthType#<clinit()" -> "axis.CategoryLabelWidthType#readResolve()";
  "org.jfree.chart$axis.CategoryLabelPositions#createUpRotationLabelPositions(double)" -> "axis.CategoryLabelPositions#<clinit()";
  "org.jfree.chart$axis.CategoryLabelPositions#createUpRotationLabelPositions(double)" -> "org.jfree.chart$axis.CategoryLabelPositions#<clinit()";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryLabelPositions#replaceLeftPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "axis.CategoryLabelPositions#replaceLeftPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryLabelPositions#createDownRotationLabelPositions(double)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPositions#createDownRotationLabelPositions(double)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "axis.CategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "axis.CategoryLabelPositions#replaceTopPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "axis.CategoryLabelPositions#replaceBottomPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryLabelPositions#createUpRotationLabelPositions(double)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryLabelPositions#replaceBottomPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "axis.CategoryLabelPositions#createDownRotationLabelPositions(double)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPositions#replaceRightPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "axis.CategoryLabelPositions#replaceRightPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPositions#replaceBottomPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryLabelPositions#replaceTopPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "CategoryLabelPositions#replaceRightPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryLabelPositions#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPositions#replaceLeftPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.SubCategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "ExtendedCategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "axis.CategoryAxis3D#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "CategoryAxis3D#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryAxis#<init()";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "axis.CategoryAxis#<init()";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "SubCategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryAxis3D#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "axis.SubCategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "axis.ExtendedCategoryAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.CategoryAxis#<init(java.lang.String)" -> "CategoryAxis#<init()";
  "org.jfree.chart$axis.CategoryAxis3D#<init(java.lang.String)" -> "CategoryAxis3D#<init()";
  "org.jfree.chart$axis.CategoryAxis3D#<init(java.lang.String)" -> "axis.CategoryAxis3D#<init()";
  "org.jfree.chart$axis.CategoryAxis3D#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryAxis3D#<init()";
  "org.jfree.chart$axis.CategoryLabelPosition#<init()" -> "axis.CategoryLabelPositions#<init()";
  "org.jfree.chart$axis.CategoryLabelPosition#<init()" -> "CategoryLabelPositions#<init()";
  "org.jfree.chart$axis.CategoryLabelPosition#<init()" -> "org.jfree.chart$axis.CategoryLabelPositions#<init()";
  "org.jfree.data$time.SerialDate#monthCodeToString(int,boolean)" -> "org.jfree.data$time.SerialDate#monthCodeToString(int)";
  "org.jfree.data$time.SerialDate#monthCodeToString(int,boolean)" -> "time.SerialDate#monthCodeToString(int)";
  "org.jfree.data$time.SerialDate#monthCodeToString(int,boolean)" -> "SerialDate#monthCodeToString(int)";
  "org.jfree.data$time.SerialDate#monthCodeToString(int)" -> "Month#toString()";
  "org.jfree.data$time.SerialDate#monthCodeToString(int)" -> "org.jfree.data$time.SerialDate#toString()";
  "org.jfree.data$time.SerialDate#monthCodeToString(int)" -> "time.Month#toString()";
  "org.jfree.data$time.SerialDate#monthCodeToString(int)" -> "SerialDate#toString()";
  "org.jfree.data$time.SerialDate#monthCodeToString(int)" -> "org.jfree.data$time.Month#toString()";
  "org.jfree.data$time.SerialDate#monthCodeToString(int)" -> "time.SerialDate#toString()";
  "org.jfree.data$time.SerialDate#toString()" -> "Day#toString()";
  "org.jfree.data$time.SerialDate#toString()" -> "time.Day#toString()";
  "org.jfree.data$time.SerialDate#toString()" -> "org.jfree.data$time.Day#toString()";
  "org.jfree.chart$labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.BubbleXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" -> "BubbleXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.BubbleXYItemLabelGenerator#<init()";
  "org.jfree.chart$plot.Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)" -> "XYPlot#getDomainAxisEdge()";
  "org.jfree.chart$plot.Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)" -> "plot.XYPlot#getDomainAxisEdge()";
  "org.jfree.chart$plot.Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)" -> "org.jfree.chart$plot.XYPlot#getDomainAxisEdge()";
  "org.jfree.chart$entity.ChartEntity#getPolyCoords(java.awt.Shape)" -> "org.jfree.chart$entity.ChartEntity#getShapeCoords()";
  "org.jfree.chart$entity.ChartEntity#getPolyCoords(java.awt.Shape)" -> "entity.ChartEntity#getShapeCoords()";
  "org.jfree.chart$entity.ChartEntity#getPolyCoords(java.awt.Shape)" -> "ChartEntity#getShapeCoords()";
  "org.jfree.chart$entity.ChartEntity#getShapeCoords()" -> "ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$entity.ChartEntity#getShapeCoords()" -> "entity.ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$entity.ChartEntity#getShapeCoords()" -> "org.jfree.chart$entity.ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$entity.ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$entity.ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$entity.ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$ChartUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ChartUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ChartUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$ChartUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ChartUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$ChartUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$imagemap.ImageMapUtilities#getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ChartUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)";
  "org.jfree.chart$imagemap.ImageMapUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" -> "org.jfree.chart$ChartUtilities#writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "axis.LogAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "axis.LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.LogAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "LogAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)";
  "org.jfree.chart$axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" -> "axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)";
  "org.jfree.chart$axis.LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "LogAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.LogAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.LogAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.LogAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "LogAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.LogAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)" -> "VectorSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)" -> "xy.VectorSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)" -> "VectorSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeries(int)" -> "xy.VectorSeriesCollection#getSeriesKey(int)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "IntervalMarker#<init(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.IntervalMarker#<init(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.Marker#<init(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.Marker#<init(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.IntervalMarker#<init(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "Marker#<init(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)" -> "plot.CategoryMarker#<init(java.lang.Comparable)";
  "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)" -> "CategoryMarker#<init(java.lang.Comparable)";
  "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)" -> "org.jfree.chart$plot.CategoryMarker#<init(java.lang.Comparable)";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint)" -> "Marker#<init()";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint)" -> "org.jfree.chart$plot.Marker#<init()";
  "org.jfree.chart$plot.Marker#<init(java.awt.Paint)" -> "plot.Marker#<init()";
  "org.jfree.chart$plot.Marker#<init()" -> "ValueMarker#<init(double)";
  "org.jfree.chart$plot.Marker#<init()" -> "plot.ValueMarker#<init(double)";
  "org.jfree.chart$plot.Marker#<init()" -> "org.jfree.chart$plot.ValueMarker#<init(double)";
  "org.jfree.chart$plot.IntervalMarker#<init(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "IntervalMarker#<init(double,double)";
  "org.jfree.chart$plot.IntervalMarker#<init(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.IntervalMarker#<init(double,double)";
  "org.jfree.chart$plot.IntervalMarker#<init(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.IntervalMarker#<init(double,double)";
  "org.jfree.chart$plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "org.jfree.chart$plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$plot.ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" -> "ValueMarker#<init(double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "org.jfree.chart$title.LegendItemBlockContainer#<init(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "org.jfree.chart$title.LegendTitle#<init(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "title.CompositeTitle#<init()";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "title.LegendItemBlockContainer#<init(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "BlockContainer#<init()";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "org.jfree.chart$block.BlockContainer#<init()";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "LegendItemBlockContainer#<init(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "CompositeTitle#<init()";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "title.LegendTitle#<init(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "block.BlockContainer#<init()";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "org.jfree.chart$title.CompositeTitle#<init()";
  "org.jfree.chart$block.BlockContainer#<init(org.jfree.chart.block.Arrangement)" -> "LegendTitle#<init(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)";
  "org.jfree.chart$title.LegendTitle#<init(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)" -> "org.jfree.chart$title.LegendTitle#<init(org.jfree.chart.LegendItemSource)";
  "org.jfree.chart$title.LegendTitle#<init(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)" -> "LegendTitle#<init(org.jfree.chart.LegendItemSource)";
  "org.jfree.chart$title.LegendTitle#<init(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)" -> "title.LegendTitle#<init(org.jfree.chart.LegendItemSource)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.Title#<init()";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "Title#<init()";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.Title#<init()";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "ImageTitle#<init(java.awt.Image)";
  "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.ImageTitle#<init(java.awt.Image)";
  "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.ImageTitle#<init(java.awt.Image)";
  "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "ImageTitle#<init(java.awt.Image,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.ImageTitle#<init(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.ImageTitle#<init(java.awt.Image,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "TextTitle#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.TextTitle#<init(java.lang.String)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.TextTitle#<init(java.lang.String)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.TextTitle#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "TextTitle#<init(java.lang.String)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint)" -> "DateTitle#<init(int)";
  "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint)" -> "title.DateTitle#<init(int)";
  "org.jfree.chart$title.DateTitle#<init(int,java.util.Locale,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$title.DateTitle#<init(int)";
  "org.jfree.chart$title.DateTitle#<init(int)" -> "org.jfree.chart$title.DateTitle#<init()";
  "org.jfree.chart$title.DateTitle#<init(int)" -> "DateTitle#<init()";
  "org.jfree.chart$title.DateTitle#<init(int)" -> "title.DateTitle#<init()";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String)" -> "title.TextTitle#<init()";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String)" -> "TextTitle#<init()";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String)" -> "org.jfree.chart$editor.DefaultTitleEditor#<init(org.jfree.chart.title.Title)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String)" -> "org.jfree.chart$title.TextTitle#<init()";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String)" -> "DefaultTitleEditor#<init(org.jfree.chart.title.Title)";
  "org.jfree.chart$title.TextTitle#<init(java.lang.String)" -> "editor.DefaultTitleEditor#<init(org.jfree.chart.title.Title)";
  "org.jfree.chart$title.Title#<init()" -> "CompositeTitle#<init(org.jfree.chart.block.BlockContainer)";
  "org.jfree.chart$title.Title#<init()" -> "org.jfree.chart$title.CompositeTitle#<init(org.jfree.chart.block.BlockContainer)";
  "org.jfree.chart$title.Title#<init()" -> "title.PaintScaleLegend#<init(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$title.Title#<init()" -> "PaintScaleLegend#<init(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$title.Title#<init()" -> "title.CompositeTitle#<init(org.jfree.chart.block.BlockContainer)";
  "org.jfree.chart$annotations.TextAnnotation#<init(java.lang.String)" -> "CategoryTextAnnotation#<init(java.lang.String,java.lang.Comparable,double)";
  "org.jfree.chart$annotations.TextAnnotation#<init(java.lang.String)" -> "annotations.CategoryTextAnnotation#<init(java.lang.String,java.lang.Comparable,double)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "CombinedRangeXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "CombinedDomainXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "org.jfree.chart$ChartPanel#getScreenDataArea(int,int)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "plot.CombinedRangeXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "CombinedDomainCategoryPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "ChartPanel#getScreenDataArea(int,int)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "plot.CombinedDomainCategoryPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "plot.CombinedDomainXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)";
  "org.jfree.chart$ChartPanel#getScreenDataArea(int,int)" -> "org.jfree.chart$ChartPanel#mousePressed(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getScreenDataArea(int,int)" -> "ChartPanel#mousePressed(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getScreenDataArea(int,int)" -> "org.jfree.chart$ChartPanel#mouseDragged(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getScreenDataArea(int,int)" -> "ChartPanel#mouseDragged(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mousePressed(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mousePressed(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseDragged(java.awt.event.MouseEvent)" -> "java.awt.Component#processMouseMotionEvent(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseDragged(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mouseDragged(java.awt.event.MouseEvent)";
  "org.jfree.chart$renderer.LookupPaintScale#<init(double,double,java.awt.Paint)" -> "org.jfree.chart$renderer.LookupPaintScale#<init()";
  "org.jfree.chart$renderer.LookupPaintScale#<init(double,double,java.awt.Paint)" -> "LookupPaintScale#<init()";
  "org.jfree.chart$renderer.LookupPaintScale#<init(double,double,java.awt.Paint)" -> "renderer.LookupPaintScale#<init()";
  "org.jfree.chart$util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" -> "util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" -> "org.jfree.chart$util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" -> "RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)";
  "org.jfree.data$time.SpreadsheetDate#<init(int)" -> "time.SerialDate#createInstance(int)";
  "org.jfree.data$time.SpreadsheetDate#<init(int)" -> "org.jfree.data$time.SerialDate#createInstance(int)";
  "org.jfree.data$time.SpreadsheetDate#<init(int)" -> "SerialDate#createInstance(int)";
  "org.jfree.data$time.SerialDate#createInstance(int)" -> "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int)" -> "SerialDate#addDays(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#createInstance(int)" -> "time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "time.SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "time.SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#addDays(int,org.jfree.data.time.SerialDate)" -> "time.SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "time.SerialDate#getFollowingDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.SerialDate#getFollowingDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "SerialDate#getFollowingDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "SerialDate#getPreviousDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "time.SerialDate#getPreviousDayOfWeek(int)";
  "org.jfree.data$time.SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.SerialDate#getPreviousDayOfWeek(int)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "category.AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "AbstractXYItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "renderer.category.AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "xy.AbstractXYItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "renderer.xy.AbstractXYItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "AbstractXYItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "renderer.xy.AbstractXYItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "xy.AbstractXYItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "category.AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)" -> "renderer.category.AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "XYSeriesCollection#<init(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$xy.DefaultTableXYDataset#<init(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "xy.DefaultTableXYDataset#<init(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "org.jfree.data$xy.XYSeriesCollection#<init(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "DefaultTableXYDataset#<init(boolean)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset,boolean)" -> "xy.XYSeriesCollection#<init(org.jfree.data.xy.XYSeries)";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset)" -> "CategoryTableXYDataset#<init()";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset)" -> "xy.CategoryTableXYDataset#<init()";
  "org.jfree.data$xy.IntervalXYDelegate#<init(org.jfree.data.xy.XYDataset)" -> "org.jfree.data$xy.CategoryTableXYDataset#<init()";
  "org.jfree.data$xy.DefaultTableXYDataset#<init(boolean)" -> "org.jfree.data$xy.DefaultTableXYDataset#<init()";
  "org.jfree.data$xy.DefaultTableXYDataset#<init(boolean)" -> "DefaultTableXYDataset#<init()";
  "org.jfree.data$xy.DefaultTableXYDataset#<init(boolean)" -> "xy.DefaultTableXYDataset#<init()";
  "org.jfree.data$xy.XYSeriesCollection#<init(org.jfree.data.xy.XYSeries)" -> "xy.XYSeriesCollection#<init()";
  "org.jfree.data$xy.XYSeriesCollection#<init(org.jfree.data.xy.XYSeries)" -> "org.jfree.data$xy.XYSeriesCollection#<init()";
  "org.jfree.data$xy.XYSeriesCollection#<init(org.jfree.data.xy.XYSeries)" -> "XYSeriesCollection#<init()";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "StandardPieURLGenerator#<init(java.lang.String,java.lang.String)";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String)";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String)";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String)" -> "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String)";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String)" -> "urls.StandardPieURLGenerator#<init(java.lang.String)";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String,java.lang.String)" -> "StandardPieURLGenerator#<init(java.lang.String)";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String)" -> "org.jfree.chart$urls.StandardPieURLGenerator#<init()";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String)" -> "urls.StandardPieURLGenerator#<init()";
  "org.jfree.chart$urls.StandardPieURLGenerator#<init(java.lang.String)" -> "StandardPieURLGenerator#<init()";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$block.ColorBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "util.PaintList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "axis.ExtendedCategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "xy.CandlestickRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.MultiplePiePlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "category.WaterfallBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "SymbolAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.DialBackground#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.MeterPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.LineRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "ColorBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.xy.XYBoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.dial.StandardDialRange#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "LookupPaintScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "block.LabelBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "dial.DialBackground#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.xy.XYLine3DRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "BoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "category.BoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "XYTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.LookupPaintScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.dial.DialBackground#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.SubCategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "SubCategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "BlockBorder#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.StandardDialRange#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.xy.CandlestickRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "TextTitle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "axis.CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "title.TextTitle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.CompassPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "dial.DialTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "axis.SymbolAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.category.WaterfallBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "category.BarRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.xy.XYErrorRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "xy.XYErrorRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "ExtendedCategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "XYBoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "xy.HighLowRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.TextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$title.LegendTitle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "category.GanttRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "XYLine3DRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.xy.HighLowRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "LookupPaintScale$PaintItem#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "block.ColorBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$text.TextFragment#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "TextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "TextFragment#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "category.StatisticalLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "xy.XYLine3DRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.GanttRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "text.TextFragment#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "title.LegendTitle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$block.BlockBorder#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.BarRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.LookupPaintScale$PaintItem#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$util.PaintList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "BarRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "DialBackground#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "LineRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "annotations.XYTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "annotations.TextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "category.LineRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.dial.DialTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.MultiplePiePlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "block.BlockBorder#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "xy.XYBoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.category.LineRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.category.BoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "MeterPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "LegendTitle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "GanttRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$block.LabelBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "dial.StandardDialRange#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.category.BarRenderer3D#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.category.StatisticalLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "DialPointer$Pointer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "LabelBlock#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.CompassPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.LookupPaintScale#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "DialTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "MultiplePiePlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$axis.SymbolAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.MeterPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.category.GanttRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$title.TextTitle#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "plot.dial.DialPointer$Pointer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "HighLowRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "renderer.LookupPaintScale$PaintItem#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "PaintList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "WaterfallBarRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "XYErrorRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "axis.SubCategoryAxis#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$annotations.XYTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "CandlestickRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "CompassPlot#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "dial.DialPointer$Pointer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "StatisticalLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)" -> "StandardDialRange#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.data$time.Year#<init(int)" -> "Year#previous()";
  "org.jfree.data$time.Year#<init(int)" -> "org.jfree.data$time.Month#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "time.Week#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "time.Month#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "org.jfree.data$time.Quarter#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "Month#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "org.jfree.data$time.Year#previous()";
  "org.jfree.data$time.Year#<init(int)" -> "time.Year#next()";
  "org.jfree.data$time.Year#<init(int)" -> "Week#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "time.Quarter#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "time.Year#previous()";
  "org.jfree.data$time.Year#<init(int)" -> "org.jfree.data$time.Year#next()";
  "org.jfree.data$time.Year#<init(int)" -> "Year#next()";
  "org.jfree.data$time.Year#<init(int)" -> "Quarter#getYear()";
  "org.jfree.data$time.Year#<init(int)" -> "org.jfree.data$time.Week#getYear()";
  "org.jfree.data$time.Week#getYear()" -> "org.jfree.data$time.Week#compareTo(java.lang.Object)";
  "org.jfree.data$time.Week#getYear()" -> "Week#compareTo(java.lang.Object)";
  "org.jfree.data$time.Week#getYear()" -> "time.Week#compareTo(java.lang.Object)";
  "org.jfree.data$time.Week#compareTo(java.lang.Object)" -> "time.TimeSeriesDataItem#compareTo(java.lang.Object)";
  "org.jfree.data$time.Week#compareTo(java.lang.Object)" -> "org.jfree.data$time.TimeSeriesDataItem#compareTo(java.lang.Object)";
  "org.jfree.data$time.Week#compareTo(java.lang.Object)" -> "TimeSeriesDataItem#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.CategoryTick#<init(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "CategoryTick#<init(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.CategoryTick#<init(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.Tick#<init(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.NumberTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.NumberTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "NumberTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.DateTick#<init(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "DateTick#<init(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.DateTick#<init(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.ValueTick#<init(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "plot.PolarPlot#refreshAngleTicks()";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "PolarPlot#refreshAngleTicks()";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "LogarithmicAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.CyclicNumberAxis$CycleBoundTick#<init(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "LogarithmicAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.LogarithmicAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "CyclicNumberAxis$CycleBoundTick#<init(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$axis.LogarithmicAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "org.jfree.chart$plot.PolarPlot#refreshAngleTicks()";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.CyclicNumberAxis$CycleBoundTick#<init(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.LogarithmicAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberTick#<init(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)" -> "axis.LogarithmicAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inc(long)" -> "axis.SegmentedTimeline$Segment#inc()";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inc(long)" -> "SegmentedTimeline$Segment#inc()";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inc(long)" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "axis.SegmentedTimeline#addBaseTimelineExclusions(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "org.jfree.chart$axis.SegmentedTimeline#addBaseTimelineExclusions(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "SegmentedTimeline#containsDomainRange(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "axis.SegmentedTimeline$SegmentRange#inExcludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inExcludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inc()" -> "SegmentedTimeline$SegmentRange#inExcludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "SegmentedTimeline#addBaseTimelineException(long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "axis.SegmentedTimeline#containsDomainValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "SegmentedTimeline$SegmentRange#inIncludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "axis.SegmentedTimeline$SegmentRange#inIncludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "axis.SegmentedTimeline#containsDomainRange(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "SegmentedTimeline#containsDomainValue(long)";
  "SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(long)";
  "SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "SegmentedTimeline$SegmentRange#inIncludeSegments()" -> "org.jfree.chart$axis.SegmentedTimeline#containsDomainRange(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(long)" -> "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(long)" -> "axis.SegmentedTimeline#containsDomainValue(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(long)" -> "SegmentedTimeline#containsDomainValue(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(java.util.Date)" -> "DateAxis#isHiddenValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(java.util.Date)" -> "axis.DateAxis#isHiddenValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainValue(java.util.Date)" -> "org.jfree.chart$axis.DateAxis#isHiddenValue(long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "axis.SegmentedTimeline#addException(long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline#addException(long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "axis.SegmentedTimeline#addException(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline#addBaseTimelineExclusions(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "org.jfree.chart$axis.SegmentedTimeline#addException(long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "org.jfree.chart$axis.SegmentedTimeline#addException(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline#addException(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(long)" -> "SegmentedTimeline#addException(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(long)" -> "org.jfree.chart$axis.SegmentedTimeline#addException(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(long)" -> "axis.SegmentedTimeline#addException(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(java.util.Date)" -> "axis.SegmentedTimeline#addExceptions(java.util.List)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(java.util.Date)" -> "SegmentedTimeline#addExceptions(java.util.List)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(long,long)" -> "axis.SegmentedTimeline#addBaseTimelineException(long)";
  "org.jfree.chart$axis.SegmentedTimeline#addException(long,long)" -> "org.jfree.chart$axis.SegmentedTimeline#addBaseTimelineException(long)";
  "org.jfree.chart$axis.SegmentedTimeline#addBaseTimelineException(long)" -> "org.jfree.chart$axis.SegmentedTimeline#addBaseTimelineException(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#addBaseTimelineException(long)" -> "axis.SegmentedTimeline#addBaseTimelineException(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#addBaseTimelineException(long)" -> "SegmentedTimeline#addBaseTimelineException(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainRange(long,long)" -> "SegmentedTimeline#containsDomainRange(java.util.Date,java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainRange(long,long)" -> "org.jfree.chart$axis.SegmentedTimeline#containsDomainRange(java.util.Date,java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#containsDomainRange(long,long)" -> "axis.SegmentedTimeline#containsDomainRange(java.util.Date,java.util.Date)";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#<init(java.text.DateFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.HighLowItemLabelGenerator#<init()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#<init(java.text.DateFormat,java.text.NumberFormat)" -> "labels.HighLowItemLabelGenerator#<init()";
  "org.jfree.chart$labels.HighLowItemLabelGenerator#<init(java.text.DateFormat,java.text.NumberFormat)" -> "HighLowItemLabelGenerator#<init()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init(org.jfree.chart.util.GradientPaintTransformType)" -> "org.jfree.chart$util.StandardGradientPaintTransformer#<init()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init(org.jfree.chart.util.GradientPaintTransformType)" -> "StandardGradientPaintTransformer#<init()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init(org.jfree.chart.util.GradientPaintTransformType)" -> "util.StandardGradientPaintTransformer#<init()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "plot.dial.DialBackground#<init(java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "title.LegendGraphic#<init(java.awt.Shape,java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "dial.DialBackground#<init(java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "DialBackground#<init(java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#<init()" -> "LegendGraphic#<init(java.awt.Shape,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)" -> "plot.MeterPlot#getLegendItems()";
  "org.jfree.chart$LegendItem#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)" -> "MeterPlot#getLegendItems()";
  "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)";
  "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$LegendItem#<init(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.data$time.Month#<init(int,int)" -> "time.Month#previous()";
  "org.jfree.data$time.Month#<init(int,int)" -> "axis.MonthDateFormat#main(java.lang.String[])";
  "org.jfree.data$time.Month#<init(int,int)" -> "Month#next()";
  "org.jfree.data$time.Month#<init(int,int)" -> "org.jfree.data$time.Month#next()";
  "org.jfree.data$time.Month#<init(int,int)" -> "org.jfree.data$time.Month#previous()";
  "org.jfree.data$time.Month#<init(int,int)" -> "MonthDateFormat#main(java.lang.String[])";
  "org.jfree.data$time.Month#<init(int,int)" -> "org.jfree.chart$axis.MonthDateFormat#main(java.lang.String[])";
  "org.jfree.data$time.Month#<init(int,int)" -> "time.Month#next()";
  "org.jfree.data$time.Month#<init(int,int)" -> "Month#previous()";
  "org.jfree.data$time.Month#previous()" -> "DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.data$time.Month#previous()" -> "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.data$time.Month#previous()" -> "axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "org.jfree.chart$axis.DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "org.jfree.chart$axis.DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "axis.DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "axis.DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "org.jfree.chart$axis.DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)" -> "axis.DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)" -> "plot.CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)" -> "CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$block.AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)" -> "block.AbstractBlock#setPadding(double,double,double,double)";
  "org.jfree.chart$block.AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)" -> "AbstractBlock#setPadding(double,double,double,double)";
  "org.jfree.chart$block.AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)" -> "Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$block.AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)" -> "org.jfree.chart$block.AbstractBlock#setPadding(double,double,double,double)";
  "org.jfree.chart$block.AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)" -> "title.Title#<init(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)";
  "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" -> "TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,double)";
  "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,double)" -> "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,double)" -> "TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeriesDataItem#<init(org.jfree.data.time.RegularTimePeriod,double)" -> "time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "time.TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "org.jfree.data$time.TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "org.jfree.data$time.TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "org.jfree.data$time.TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "time.TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)" -> "time.TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)" -> "MatrixSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.MatrixSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.MatrixSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)" -> "xy.MatrixSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)" -> "MatrixSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeries(int)" -> "xy.MatrixSeriesCollection#getSeriesKey(int)";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardXYZToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYZToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardXYZToolTipGenerator#<init()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "StandardTickUnitSource#getCeilingTickUnit(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.StandardTickUnitSource#getCeilingTickUnit(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "LogAxis#createLogTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "NumberAxis#createStandardTickUnits()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.NumberAxis#createStandardTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.StandardTickUnitSource#getLargerTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.TickUnits#getCeilingTickUnit(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.LogAxis#createLogTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.NumberAxis#createIntegerTickUnits()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.NumberAxis#<clinit()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.StandardTickUnitSource#getCeilingTickUnit(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "NumberAxis#<clinit()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "NumberAxis#createIntegerTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.NumberAxis#createStandardTickUnits()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.NumberTickUnit#<init(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.NumberAxis#createIntegerTickUnits()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.LogAxis#createLogTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.NumberAxis#<clinit()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.StandardTickUnitSource#getLargerTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "TickUnits#getCeilingTickUnit(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "NumberAxis#createIntegerTickUnits()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.TickUnits#getCeilingTickUnit(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "StandardTickUnitSource#getLargerTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "NumberTickUnit#<init(double)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.NumberAxis#createStandardTickUnits()";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "NumberAxis#createStandardTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "axis.NumberAxis#createIntegerTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.NumberAxis#createIntegerTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.NumberAxis#createStandardTickUnits(java.util.Locale)";
  "org.jfree.chart$axis.NumberTickUnit#<init(double,java.text.NumberFormat)" -> "org.jfree.chart$axis.NumberTickUnit#<init(double)";
  "org.jfree.chart$axis.StandardTickUnitSource#getLargerTickUnit(org.jfree.chart.axis.TickUnit)" -> "axis.StandardTickUnitSource#getCeilingTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.StandardTickUnitSource#getLargerTickUnit(org.jfree.chart.axis.TickUnit)" -> "StandardTickUnitSource#getCeilingTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.StandardTickUnitSource#getLargerTickUnit(org.jfree.chart.axis.TickUnit)" -> "org.jfree.chart$axis.StandardTickUnitSource#getCeilingTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "CyclicNumberAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "axis.NumberAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "LogarithmicAxis#computeLogFloor(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "LogarithmicAxis#computeLogCeil(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "axis.LogarithmicAxis#adjustedLog10(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.CyclicNumberAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "axis.LogarithmicAxis#computeLogFloor(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.LogarithmicAxis#computeLogFloor(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "LogarithmicAxis#adjustedLog10(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "axis.LogarithmicAxis#switchedLog10(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.LogarithmicAxis#adjustedLog10(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "axis.LogarithmicAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.LogarithmicAxis#computeLogCeil(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "SymbolAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "LogarithmicAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "axis.LogarithmicAxis#computeLogCeil(double)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "NumberAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.SymbolAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<clinit()" -> "org.jfree.chart$axis.LogarithmicAxis#<clinit()";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "axis.LogarithmicAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "LogarithmicAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "axis.ModuloAxis#<init(java.lang.String,org.jfree.data.Range)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.NumberAxis#<init()";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "NumberAxis#<init()";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.LogarithmicAxis#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.ModuloAxis#<init(java.lang.String,org.jfree.data.Range)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "org.jfree.chart$axis.NumberAxis3D#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "axis.NumberAxis3D#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "NumberAxis3D#<init(java.lang.String)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "ModuloAxis#<init(java.lang.String,org.jfree.data.Range)";
  "org.jfree.chart$axis.NumberAxis#<init(java.lang.String)" -> "axis.NumberAxis#<init()";
  "org.jfree.chart$axis.NumberAxis3D#<init(java.lang.String)" -> "org.jfree.chart$axis.NumberAxis3D#<init()";
  "org.jfree.chart$axis.NumberAxis3D#<init(java.lang.String)" -> "axis.NumberAxis3D#<init()";
  "org.jfree.chart$axis.NumberAxis3D#<init(java.lang.String)" -> "NumberAxis3D#<init()";
  "org.jfree.chart$axis.CyclicNumberAxis#<clinit()" -> "axis.CyclicNumberAxis#<clinit()";
  "org.jfree.chart$axis.LogarithmicAxis#adjustedLog10(double)" -> "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)";
  "org.jfree.chart$axis.LogarithmicAxis#adjustedLog10(double)" -> "LogarithmicAxis#switchedLog10(double)";
  "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)" -> "axis.LogarithmicAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)" -> "axis.LogarithmicAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)" -> "org.jfree.chart$axis.LogarithmicAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)" -> "LogarithmicAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)" -> "org.jfree.chart$axis.LogarithmicAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogarithmicAxis#switchedLog10(double)" -> "LogarithmicAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.SymbolAxis#<clinit()" -> "axis.SymbolAxis#<clinit()";
  "org.jfree.data$time.Week#<init(int,int)" -> "time.Week#next()";
  "org.jfree.data$time.Week#<init(int,int)" -> "time.Week#previous()";
  "org.jfree.data$time.Week#<init(int,int)" -> "org.jfree.data$time.Week#previous()";
  "org.jfree.data$time.Week#<init(int,int)" -> "Week#next()";
  "org.jfree.data$time.Week#<init(int,int)" -> "Week#previous()";
  "org.jfree.data$time.Week#<init(int,int)" -> "org.jfree.data$time.Week#next()";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.chart$urls.StandardXYURLGenerator#<init()";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "StandardXYURLGenerator#<init()";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "urls.StandardXYURLGenerator#<init()";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String)";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "StandardXYURLGenerator#<init(java.lang.String)";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init(java.lang.String,java.lang.String,java.lang.String)" -> "urls.StandardXYURLGenerator#<init(java.lang.String)";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init()" -> "urls.StandardXYZURLGenerator#<init()";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init()" -> "org.jfree.chart$urls.StandardXYZURLGenerator#<init()";
  "org.jfree.chart$urls.StandardXYURLGenerator#<init()" -> "StandardXYZURLGenerator#<init()";
  "org.jfree.chart$annotations.XYLineAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)" -> "XYLineAnnotation#<init(double,double,double,double)";
  "org.jfree.chart$annotations.XYLineAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$annotations.XYLineAnnotation#<init(double,double,double,double)";
  "org.jfree.chart$annotations.XYLineAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)" -> "annotations.XYLineAnnotation#<init(double,double,double,double)";
  "org.jfree.data$statistics.HistogramBin#<init(double,double)" -> "HistogramDataset#addSeries(java.lang.Comparable,double[],int,double,double)";
  "org.jfree.data$statistics.HistogramBin#<init(double,double)" -> "statistics.HistogramDataset#addSeries(java.lang.Comparable,double[],int,double,double)";
  "org.jfree.data$DefaultKeyedValue#<init(java.lang.Comparable,java.lang.Number)" -> "DefaultKeyedValueDataset#<init(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValue#<init(java.lang.Comparable,java.lang.Number)" -> "org.jfree.data$general.DefaultKeyedValueDataset#<init(java.lang.Comparable,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValue#<init(java.lang.Comparable,java.lang.Number)" -> "general.DefaultKeyedValueDataset#<init(java.lang.Comparable,java.lang.Number)";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat,org.jfree.chart.util.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)" -> "PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat)";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat,org.jfree.chart.util.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat)";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat,org.jfree.chart.util.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)" -> "axis.PeriodAxisLabelInfo#<init(java.lang.Class,java.text.DateFormat)";
  "org.jfree.chart$util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" -> "org.jfree.chart$util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" -> "RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" -> "util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)" -> "SegmentedTimeline#newFifteenMinuteTimeline()";
  "org.jfree.chart$axis.SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)" -> "org.jfree.chart$axis.SegmentedTimeline#newFifteenMinuteTimeline()";
  "org.jfree.chart$axis.SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)" -> "axis.SegmentedTimeline#newFifteenMinuteTimeline()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "xy.XYIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "XYIntervalSeriesCollection#clone()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "xy.XYIntervalSeriesCollection#clone()";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "XYIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "XYIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeries(int)" -> "xy.XYIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#<init(double,double,double,double)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "block.BlockBorder#<init(java.awt.Paint)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "BlockBorder#<init(double,double,double,double)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#<clinit()";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "block.BlockBorder#<init(double,double,double,double)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#<init(double,double,double,double,java.awt.Paint)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "block.BlockBorder#<init(double,double,double,double,java.awt.Paint)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#<init(java.awt.Paint)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "BlockBorder#<init(java.awt.Paint)";
  "org.jfree.chart$block.BlockBorder#<init(org.jfree.chart.util.RectangleInsets,java.awt.Paint)" -> "BlockBorder#<init(double,double,double,double,java.awt.Paint)";
  "org.jfree.chart$block.BlockBorder#<clinit()" -> "block.BlockBorder#<clinit()";
  "org.jfree.chart$block.BlockBorder#<clinit()" -> "BlockBorder#<clinit()";
  "org.jfree.chart$block.BlockBorder#<clinit()" -> "block.AbstractBlock#<init()";
  "org.jfree.chart$block.BlockBorder#<clinit()" -> "org.jfree.chart$block.AbstractBlock#<init()";
  "org.jfree.chart$block.BlockBorder#<clinit()" -> "AbstractBlock#<init()";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "EmptyBlock#<init(double,double)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "block.EmptyBlock#<init(double,double)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "block.BlockContainer#<init(org.jfree.chart.block.Arrangement)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "BlockContainer#<init(org.jfree.chart.block.Arrangement)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "org.jfree.chart$block.EmptyBlock#<init(double,double)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "block.ColorBlock#<init(java.awt.Paint,double,double)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "ColorBlock#<init(java.awt.Paint,double,double)";
  "org.jfree.chart$block.AbstractBlock#<init()" -> "org.jfree.chart$block.ColorBlock#<init(java.awt.Paint,double,double)";
  "org.jfree.chart$block.BlockBorder#<init(java.awt.Paint)" -> "BlockBorder#<init()";
  "org.jfree.chart$block.BlockBorder#<init(java.awt.Paint)" -> "block.BlockBorder#<init()";
  "org.jfree.chart$block.BlockBorder#<init(java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#<init()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" -> "DefaultIntervalCategoryDataset#<init(java.lang.String[],java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" -> "DefaultIntervalCategoryDataset#<init(java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" -> "category.DefaultIntervalCategoryDataset#<init(java.lang.String[],java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" -> "category.DefaultIntervalCategoryDataset#<init(java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#<init(java.lang.String[],java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)" -> "XIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)" -> "xy.XIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)" -> "XIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)" -> "xy.XIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])" -> "org.jfree.data$xy.DefaultWindDataset#<init(java.lang.Object[][][])";
  "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])" -> "DefaultWindDataset#<init(java.lang.String[],java.lang.Object[][][])";
  "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])" -> "org.jfree.data$xy.DefaultWindDataset#<init(java.lang.String[],java.lang.Object[][][])";
  "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])" -> "xy.DefaultWindDataset#<init(java.lang.Object[][][])";
  "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])" -> "xy.DefaultWindDataset#<init(java.lang.String[],java.lang.Object[][][])";
  "org.jfree.data$xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])" -> "DefaultWindDataset#<init(java.lang.Object[][][])";
  "org.jfree.chart$encoders.SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)" -> "SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)" -> "org.jfree.chart$encoders.SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage)";
  "org.jfree.chart$encoders.SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage,java.io.OutputStream)" -> "encoders.SunPNGEncoderAdapter#encode(java.awt.image.BufferedImage)";
  "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)" -> "time.Minute#getHour()";
  "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)" -> "time.Second#getMinute()";
  "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)" -> "org.jfree.data$time.Minute#getHour()";
  "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)" -> "org.jfree.data$time.Second#getMinute()";
  "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)" -> "Minute#getHour()";
  "org.jfree.data$time.Hour#<init(int,org.jfree.data.time.Day)" -> "Second#getMinute()";
  "org.jfree.data$time.Minute#getHour()" -> "time.Minute#compareTo(java.lang.Object)";
  "org.jfree.data$time.Minute#getHour()" -> "Minute#compareTo(java.lang.Object)";
  "org.jfree.data$time.Minute#getHour()" -> "org.jfree.data$time.Minute#compareTo(java.lang.Object)";
  "org.jfree.data$time.Second#getMinute()" -> "org.jfree.data$time.Millisecond#<init(int,org.jfree.data.time.Second)";
  "org.jfree.data$time.Second#getMinute()" -> "time.Millisecond#<init(int,org.jfree.data.time.Second)";
  "org.jfree.data$time.Second#getMinute()" -> "Millisecond#<init(int,org.jfree.data.time.Second)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardPieToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardPieToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractPieItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardPieSectionLabelGenerator#<init(java.lang.String)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardPieSectionLabelGenerator#<init(java.lang.String,java.util.Locale)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.util.Locale)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardPieSectionLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.util.Locale)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardPieSectionLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardPieSectionLabelGenerator#<init(java.lang.String)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init()" -> "PiePlot#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init()" -> "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init()" -> "plot.PiePlot#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "org.jfree.chart$plot.PiePlot#<init()";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "plot.PiePlot#<init()";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "PiePlot3D#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "plot.RingPlot#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "PiePlot#<init()";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "plot.PiePlot3D#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "RingPlot#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "org.jfree.chart$plot.PiePlot3D#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot#<init(org.jfree.data.general.PieDataset)" -> "org.jfree.chart$plot.RingPlot#<init(org.jfree.data.general.PieDataset)";
  "org.jfree.chart$plot.PiePlot3D#<init(org.jfree.data.general.PieDataset)" -> "org.jfree.chart$plot.PiePlot3D#<init()";
  "org.jfree.chart$plot.PiePlot3D#<init(org.jfree.data.general.PieDataset)" -> "PiePlot3D#<init()";
  "org.jfree.chart$plot.PiePlot3D#<init(org.jfree.data.general.PieDataset)" -> "plot.PiePlot3D#<init()";
  "org.jfree.chart$plot.RingPlot#<init(org.jfree.data.general.PieDataset)" -> "RingPlot#<init()";
  "org.jfree.chart$plot.RingPlot#<init(org.jfree.data.general.PieDataset)" -> "org.jfree.chart$plot.RingPlot#<init()";
  "org.jfree.chart$plot.RingPlot#<init(org.jfree.data.general.PieDataset)" -> "plot.RingPlot#<init()";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.util.Locale)" -> "labels.StandardPieSectionLabelGenerator#<init(java.util.Locale)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.util.Locale)" -> "StandardPieSectionLabelGenerator#<init(java.util.Locale)";
  "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.lang.String,java.util.Locale)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#<init(java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)" -> "StandardPieToolTipGenerator#<init(java.lang.String)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)" -> "labels.StandardPieToolTipGenerator#<init(java.lang.String)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)" -> "StandardPieToolTipGenerator#<init(java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)" -> "labels.StandardPieToolTipGenerator#<init(java.util.Locale)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String,java.util.Locale)" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String)";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardPieToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String)" -> "labels.StandardPieToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardPieToolTipGenerator#<init(java.lang.String)" -> "StandardPieToolTipGenerator#<init()";
  "org.jfree.chart$util.RectangleInsets#<init(org.jfree.chart.util.UnitType,double,double,double,double)" -> "org.jfree.chart$util.RectangleInsets#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<init(org.jfree.chart.util.UnitType,double,double,double,double)" -> "org.jfree.chart$util.RectangleInsets#<init(double,double,double,double)";
  "org.jfree.chart$util.RectangleInsets#<init(org.jfree.chart.util.UnitType,double,double,double,double)" -> "util.RectangleInsets#<init(double,double,double,double)";
  "org.jfree.chart$util.RectangleInsets#<init(org.jfree.chart.util.UnitType,double,double,double,double)" -> "RectangleInsets#<init(double,double,double,double)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "editor.DefaultAxisEditor#getTickLabelInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "DialValueIndicator#<init(int)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "Axis#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "util.RectangleInsets#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$block.AbstractBlock#setMargin(double,double,double,double)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "plot.Plot#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "block.LineBorder#<init()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "plot.dial.DialValueIndicator#<init(int)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "LineBorder#<init()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "TextBox#<init(org.jfree.chart.text.TextBlock)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$block.LineBorder#<init()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "RectangleInsets#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$title.Title#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$editor.DefaultPlotEditor#getPlotInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$plot.Plot#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "DefaultPlotEditor#getPlotInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "dial.DialValueIndicator#<init(int)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "PeriodAxisLabelInfo#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$editor.DefaultAxisEditor#getLabelInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "axis.PeriodAxisLabelInfo#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "editor.DefaultPlotEditor#getPlotInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "DefaultAxisEditor#getLabelInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "editor.DefaultAxisEditor#getLabelInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$text.TextBox#<init(org.jfree.chart.text.TextBlock)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$plot.dial.DialValueIndicator#<init(int)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "axis.Axis#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "DefaultAxisEditor#getTickLabelInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "AbstractBlock#setMargin(double,double,double,double)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$editor.DefaultAxisEditor#getTickLabelInsets()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "text.TextBox#<init(org.jfree.chart.text.TextBlock)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "block.AbstractBlock#setMargin(double,double,double,double)";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "org.jfree.chart$axis.Axis#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<clinit()" -> "plot.Marker#<init(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)";
  "org.jfree.chart$title.Title#<clinit()" -> "title.Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)";
  "org.jfree.chart$title.Title#<clinit()" -> "org.jfree.chart$title.LegendTitle#<clinit()";
  "org.jfree.chart$title.Title#<clinit()" -> "title.TextTitle#<clinit()";
  "org.jfree.chart$title.Title#<clinit()" -> "TextTitle#<clinit()";
  "org.jfree.chart$title.Title#<clinit()" -> "Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)";
  "org.jfree.chart$title.Title#<clinit()" -> "title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)";
  "org.jfree.chart$title.Title#<clinit()" -> "Title#<clinit()";
  "org.jfree.chart$title.Title#<clinit()" -> "Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)";
  "org.jfree.chart$title.Title#<clinit()" -> "title.Title#<clinit()";
  "org.jfree.chart$title.Title#<clinit()" -> "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)";
  "org.jfree.chart$title.Title#<clinit()" -> "title.Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)";
  "org.jfree.chart$title.Title#<clinit()" -> "org.jfree.chart$title.Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)";
  "org.jfree.chart$title.Title#<clinit()" -> "Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)";
  "org.jfree.chart$title.Title#<clinit()" -> "org.jfree.chart$title.TextTitle#<clinit()";
  "org.jfree.chart$title.LegendTitle#<clinit()" -> "title.LegendTitle#<clinit()";
  "org.jfree.chart$title.LegendTitle#<clinit()" -> "LegendTitle#<clinit()";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setStripOutlineVisible(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.Title#setPosition(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setStripOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setAxisOffset(double)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setItemPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setToolTipText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setExpandToFitSpace(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.PaintScaleLegend#setAxisOffset(double)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setAxisOffset(double)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setSources(org.jfree.chart.LegendItemSource[])";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setExpandToFitSpace(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setStripWidth(double)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.TextTitle#setExpandToFitSpace(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setScale(org.jfree.chart.renderer.PaintScale)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setStripWidth(double)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "ImageTitle#setImage(java.awt.Image)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setStripOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.PaintScaleLegend#setStripWidth(double)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.ImageTitle#setImage(java.awt.Image)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "Title#setNotify(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setToolTipText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setSources(org.jfree.chart.LegendItemSource[])";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setFont(java.awt.Font)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.ImageTitle#setImage(java.awt.Image)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setURLText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setURLText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.Title#setNotify(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.TextTitle#setURLText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.Title#setNotify(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.LegendTitle#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setAxisLocation(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setStripOutlineVisible(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.TextTitle#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.PaintScaleLegend#setStripOutlineVisible(boolean)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.PaintScaleLegend#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setStripOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "Title#setPosition(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setFont(java.awt.Font)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setItemFont(java.awt.Font)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.PaintScaleLegend#setStripOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setItemFont(java.awt.Font)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "org.jfree.chart$title.TextTitle#setToolTipText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setText(java.lang.String)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "PaintScaleLegend#setScale(org.jfree.chart.renderer.PaintScale)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.TextTitle#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "title.LegendTitle#setItemPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)" -> "TextTitle#setPaint(java.awt.Paint)";
  "org.jfree.chart$title.Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)" -> "JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)";
  "org.jfree.chart$title.Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)" -> "JFreeChart#addSubtitle(org.jfree.chart.title.Title)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.PiePlot3D#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.PiePlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "renderer.category.BarRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.ThermometerPlot#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.CompassPlot#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "XYPlot#getRangeAxisEdge()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.MeterPlot#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "ThermometerPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.MeterPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.XYPlot#getRangeAxisEdge()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.SpiderWebPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "ThermometerPlot#setDisplayRange(int,double,double)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.XYPlot#getRangeAxisEdge()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "Plot#<init()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "CompassPlot#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.CompassPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.CompassPlot#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$renderer.category.BarRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.CompassPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "BarRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "ThermometerPlot#getPlotType()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.ThermometerPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.Plot#<init()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "org.jfree.chart$plot.ThermometerPlot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "plot.Plot#<init()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "Plot#<clinit()";
  "org.jfree.chart$plot.Plot#<clinit()" -> "category.BarRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "plot.PiePlot#getPlotType()";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "plot.PiePlot#<clinit()";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "org.jfree.chart$plot.PiePlot#getPlotType()";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "plot.PiePlot3D#getPlotType()";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "PiePlot#<clinit()";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "PiePlot#getPlotType()";
  "org.jfree.chart$plot.PiePlot#<clinit()" -> "PiePlot3D#getPlotType()";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "Plot#fireChangeEvent()";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "plot.CombinedDomainCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "CombinedRangeXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "org.jfree.chart$plot.Plot#fireChangeEvent()";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "CombinedDomainXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "CombinedDomainCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "plot.CombinedRangeXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "plot.CombinedRangeCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "org.jfree.chart$plot.CombinedDomainXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "plot.Plot#fireChangeEvent()";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "plot.CombinedDomainXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "org.jfree.chart$plot.Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "plot.Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "org.jfree.chart$plot.CombinedRangeXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)" -> "CombinedRangeCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)" -> "Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.CombinedRangeCategoryPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)" -> "plot.Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setIgnoreNullValues(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setBaseSeriesPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setMaximumLabelWidth(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setBulbRadius(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setWeight(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setIgnoreNullValues(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setRange(org.jfree.data.Range)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLegendItemShape(java.awt.Shape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelShadowPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelShadowPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setAngleGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setStartAngle(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setDialOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeZeroBaselineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeZeroBaselineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelLinksVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "RingPlot#setSeparatorsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setValueLocation(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setNoDataMessage(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setNeedlePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setRoseHighlightPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setDirection(org.jfree.chart.util.Rotation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.WaferMapPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setDialOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#clearAnnotations()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setNoDataMessagePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLegendItemShape(java.awt.Shape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setWeight(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setShadowXOffset(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setWeight(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setData(float[][])";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setBackgroundImage(java.awt.Image)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.FastScatterPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setBackgroundImageAlignment(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CombinedDomainCategoryPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.dial.DialPlot#addLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setOutlineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setStartAngle(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setAxisLineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setAxisLabelGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setSeriesOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setAngleLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setSeriesPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.FastScatterPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setShadowYOffset(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setBaseSeriesOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setRadiusGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "DialPlot#addPointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setLabelType(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "dial.DialPlot#addPointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setAxisLocation(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainTickBandPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setIgnoreNullValues(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "WaferMapPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelLinkPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainZeroBaselineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "RingPlot#setSectionDepth(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setDialShape(org.jfree.chart.plot.DialShape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setAxisLinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot3D#setDarkerSides(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setDirection(org.jfree.chart.util.Rotation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setTickSize(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setDrawSharedDomainAxis(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setThermometerStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setWeight(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#clearAnnotations()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setRadiusGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setExplodePercent(java.lang.Comparable,double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setSeriesPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setColumnRadius(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setSimpleLabels(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setBaseSectionPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setBackgroundAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setWebFilled(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setSeriesOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setNoDataMessageFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MultiplePiePlot#setLimit(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "DialPlot#setView(double,double,double,double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setCircular(boolean,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainZeroBaselineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "DialPlot#addLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CombinedDomainXYPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setUnits(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#clearCornerTextItems()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setDialOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.RingPlot#setSeparatorStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setSubrangePaint(int,java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.RingPlot#setSectionDepth(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setCircular(boolean,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setOutlineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeZeroBaselineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setValueLocation(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setHeadPercent(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CombinedDomainXYPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setColumnRadius(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setDialShape(org.jfree.chart.plot.DialShape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setValueFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setValueFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setBackgroundImageAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setThermometerStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setHeadPercent(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelShadowPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setForegroundAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setRoseCenterPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setBaseSeriesOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelLinksVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setMercuryPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "dial.DialPlot#addLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setBulbRadius(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#addInterval(org.jfree.chart.plot.MeterInterval)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeTickBandPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setNoDataMessage(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setSubrangePaint(int,java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setColumnRadius(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setThermometerPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setData(float[][])";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setAxisLabelGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setBaseSeriesOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setQuadrantPaint(int,java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setUseSubrangePaint(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setQuadrantPaint(int,java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#clearCornerTextItems()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelLinkMargin(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setBulbRadius(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MultiplePiePlot#setLimit(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setShadowXOffset(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setGap(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setCircular(boolean,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.RingPlot#setOuterSeparatorExtension(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setSimpleLabels(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setRoseHighlightPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot3D#setDepthFactor(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.RingPlot#setOuterSeparatorExtension(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setBackgroundImageAlignment(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setRadiusGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setAnchorValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setAnchorValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setDrawBorder(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeTickBandPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelLinkPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setValueFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setBackgroundImage(java.awt.Image)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setInteriorGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setThermometerPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setDirection(org.jfree.chart.util.Rotation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setSectionOutlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setRosePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setUseSubrangePaint(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CombinedRangeCategoryPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setValueFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setDialBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setRadiusGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setFollowDataInSubranges(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setAxisLinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setDialBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setUnits(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setGap(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setSectionOutlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setShadowYOffset(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setExplodePercent(java.lang.Comparable,double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.FastScatterPlot#setData(float[][])";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setHeadPercent(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setTickSize(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setMaxValue(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setInteriorGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setShadowPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#clearAnnotations()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot3D#setDarkerSides(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setDrawBorder(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleLabelsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setStartAngle(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#clearAnnotations()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setUnits(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setGap(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setInteriorGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setBackgroundAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setDirection(org.jfree.chart.util.Rotation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.RingPlot#setInnerSeparatorExtension(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.RingPlot#setInnerSeparatorExtension(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.FastScatterPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CompassPlot#setRosePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setDirection(org.jfree.chart.util.Rotation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setUnits(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setWeight(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setValueLocation(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setShadowXOffset(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setValueFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#removeCornerTextItem(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setStartAngle(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setInteriorGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setAngleLabelsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.WaferMapPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.RingPlot#setSeparatorsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setMeterAngle(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setUnits(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setValueFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setSeriesOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setBackgroundAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#clearIntervals()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelLinkStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelLinkStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setAngleGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setQuadrantPaint(int,java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.dial.DialPlot#addLayer(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setValueFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.RingPlot#setSeparatorPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setTickLabelFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setForegroundAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setFollowDataInSubranges(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#addCornerTextItem(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setInteriorGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setMercuryPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setShadowYOffset(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setAnchorValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setLegendItemShape(java.awt.Shape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setNoDataMessagePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setWebFilled(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "RingPlot#setOuterSeparatorExtension(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot3D#setDepthFactor(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CombinedRangeCategoryPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelLinkMargin(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainZeroBaselineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setMaxValue(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setSubrangePaint(int,java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setSeriesPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "RingPlot#setSeparatorPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setNoDataMessage(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.FastScatterPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setBaseSeriesOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setOutlineVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setRangeCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setNoDataMessagePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setRosePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setRangeCrosshairStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setWebFilled(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setBackgroundImage(java.awt.Image)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setDialBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setSeriesOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot3D#setDarkerSides(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CombinedDomainCategoryPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setDomainGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setNeedlePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setThermometerPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#clearIntervals()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setThermometerStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "dial.DialPlot#setView(double,double,double,double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setDrawBorder(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "RingPlot#setInnerSeparatorExtension(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeCrosshairValue(double,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setDrawBorder(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setSeriesOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setMeterAngle(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setRange(org.jfree.data.Range)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setBackgroundImageAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#setGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setForegroundAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelLinkMargin(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setBaseSeriesPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleLabelsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.ThermometerPlot#setMercuryPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#removeCornerTextItem(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setDomainCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setFollowDataInSubranges(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setLabelOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleGridlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CompassPlot#setDrawBorder(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setTickLabelFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setSeriesOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairLockedOnData(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.RingPlot#setSectionDepth(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelLinksVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setNeedlePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "RingPlot#setSeparatorStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setBackgroundImageAlpha(float)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.dial.DialPlot#setView(double,double,double,double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setStartAngle(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.dial.DialPlot#setView(double,double,double,double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#clearIntervals()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.dial.DialPlot#addPointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setAxisLineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.SpiderWebPlot#setBaseSeriesPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "FastScatterPlot#setDomainGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "MeterPlot#addInterval(org.jfree.chart.plot.MeterInterval)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setSimpleLabels(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#clearAnnotations()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MultiplePiePlot#setLimit(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setLegendItemShape(java.awt.Shape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setDialShape(org.jfree.chart.plot.DialShape)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setValuePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#setAngleGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#clearCornerTextItems()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setStartAngle(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.dial.DialPlot#addPointer(org.jfree.chart.plot.dial.DialPointer)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setAxisLinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.ThermometerPlot#setUnits(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PolarPlot#addCornerTextItem(java.lang.String)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setIgnoreZeroValues(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setRadiusGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "Plot#setBackgroundImageAlignment(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setMaximumLabelWidth(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.MeterPlot#setMeterAngle(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setBaseSeriesOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.MeterPlot#setDrawBorder(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setRoseCenterPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setShadowPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "SpiderWebPlot#setAxisLabelGap(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeCrosshairVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setBaseSectionPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setSectionOutlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CompassPlot#setLabelType(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot3D#setDepthFactor(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setShadowPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setAxisLocation(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setWeight(int)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.RingPlot#setSeparatorsVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.SpiderWebPlot#setMaxValue(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#setNoDataMessageFont(java.awt.Font)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CategoryPlot#setDrawSharedDomainAxis(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.FastScatterPlot#setRangeGridlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setMaximumLabelWidth(double)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "ThermometerPlot#setUseSubrangePaint(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setRadiusGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "PiePlot#setLabelLinkStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#clearAnnotations()";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.XYPlot#setDomainTickBandPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.PolarPlot#setAngleGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.CategoryPlot#setDrawSharedDomainAxis(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.PolarPlot#setAngleGridlinesVisible(boolean)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.Plot#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "XYPlot#setRangeTickBandPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "org.jfree.chart$plot.XYPlot#setDomainTickBandPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#fireChangeEvent()" -> "plot.CompassPlot#setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)";
  "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairValue(double,boolean)" -> "CategoryPlot#setRangeCrosshairValue(double)";
  "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairValue(double,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairValue(double)";
  "org.jfree.chart$plot.CategoryPlot#setRangeCrosshairValue(double,boolean)" -> "plot.CategoryPlot#setRangeCrosshairValue(double)";
  "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.dial.DialPlot#dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.AbstractDialLayer#setVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setTextAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer$Pointer#setWidthRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.AbstractDialLayer#setVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMajorTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setValueAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setTemplateValue(java.lang.Number)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialBackground#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setBounds(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setTickRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setNumberFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMajorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialCap#setFillPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setBounds(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setNumberFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialCap#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialBackground#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer$Pointer#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMajorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setScaleIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer$Pointer#setWidthRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer$Pin#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMinorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setValueAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMajorTickIncrement(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialBackground#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialBackground#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setFrameAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setTickLabelFormatter(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMinorTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setFirstTickLabelVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setTickRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setBounds(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialCap#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMinorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialTextAnnotation#setAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialPointer#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#setLabel(java.lang.String)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialBackground#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setTickRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialTextAnnotation#setLabel(java.lang.String)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialBackground#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialTextAnnotation#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer$Pointer#setFillPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialCap#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialTextAnnotation#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setTickLabelOffset(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialTextAnnotation#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMajorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer$Pointer#setFillPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMinorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialCap#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setTickLabelFormatter(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialPointer#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer$Pin#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialTextAnnotation#setLabel(java.lang.String)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialRange#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setScaleIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMajorTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialCap#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer$Pin#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer$Pointer#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMinorTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "AbstractDialLayer#setVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialCap#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialRange#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setTickRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMinorTickCount(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialRange#setScaleIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialTextAnnotation#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialBackground#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialTextAnnotation#setAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setFirstTickLabelVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialTextAnnotation#setFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setTextAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialCap#setFillPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMinorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialFrame#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialRange#setBounds(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#setWidthRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialCap#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setTextAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer$Pin#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMinorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setValueAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialTextAnnotation#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setTemplateValue(java.lang.Number)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setTickLabelsVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setMajorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setTickLabelOffset(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setTemplateValue(java.lang.Number)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMinorTickCount(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialCap#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setTickLabelOffset(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setTickLabelFormatter(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMinorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setFrameAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialTextAnnotation#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setNumberFormat(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setFirstTickLabelVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialPointer$Pin#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer$Pointer#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMajorTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialTextAnnotation#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialValueIndicator#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMajorTickIncrement(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialFrame#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialCap#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialRange#setScaleIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setTickLabelFormatter(java.text.NumberFormat)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.ArcDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMinorTickCount(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialTextAnnotation#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMajorTickIncrement(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialCap#setFillPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMinorTickPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMinorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setTickLabelOffset(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialFrame#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setFrameAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setLowerBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialTextAnnotation#setFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setMajorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer$Pointer#setFillPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialTextAnnotation#setAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMajorTickStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialScale#setMajorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setFirstTickLabelVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialValueIndicator#setInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setExtent(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setTemplateValue(java.lang.Number)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialValueIndicator#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.ArcDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialPointer#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialTextAnnotation#setLabel(java.lang.String)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.StandardDialScale#setUpperBound(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setOuterRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer#setDatasetIndex(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.StandardDialScale#setMajorTickLength(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer$Pointer#setWidthRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "StandardDialRange#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialCap#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "ArcDialFrame#setForegroundPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialCap#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "plot.dial.DialTextAnnotation#setRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialRange#setInnerRadius(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.StandardDialScale#setStartAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "dial.DialValueIndicator#setFont(java.awt.Font)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialPointer$Pin#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.ArcDialFrame#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#setAngle(double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "org.jfree.chart$plot.dial.AbstractDialLayer#setVisible(boolean)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)" -> "DialTextAnnotation#setFont(java.awt.Font)";
  "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "CombinedDomainCategoryPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.CombinedDomainCategoryPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.PiePlot#setCircular(boolean,boolean)" -> "plot.PiePlot#setCircular(boolean)";
  "org.jfree.chart$plot.PiePlot#setCircular(boolean,boolean)" -> "PiePlot#setCircular(boolean)";
  "org.jfree.chart$plot.PiePlot#setCircular(boolean,boolean)" -> "org.jfree.chart$plot.PiePlot#setCircular(boolean)";
  "org.jfree.chart$plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" -> "org.jfree.chart$plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" -> "CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "org.jfree.chart$plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" -> "plot.CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)";
  "plot.Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.CategoryMarker#setDrawAsLine(boolean)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.CategoryMarker#setKey(java.lang.Comparable)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.ValueMarker#setValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.IntervalMarker#setStartValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.IntervalMarker#setEndValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setAlpha(float)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "ValueMarker#setValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#setAlpha(float)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.CategoryMarker#setDrawAsLine(boolean)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabel(java.lang.String)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabel(java.lang.String)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.IntervalMarker#setEndValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.ValueMarker#setValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "IntervalMarker#setEndValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "IntervalMarker#setStartValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setAlpha(float)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#setLabel(java.lang.String)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "CategoryMarker#setKey(java.lang.Comparable)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "CategoryMarker#setDrawAsLine(boolean)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.IntervalMarker#setStartValue(double)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#setOutlineStroke(java.awt.Stroke)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "org.jfree.chart$plot.Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)";
  "org.jfree.chart$plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$plot.Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)";
  "org.jfree.chart$plot.Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)";
  "org.jfree.chart$plot.Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setRightArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "DateAxis#setDateFormatOverride(java.text.DateFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.SymbolAxis#setGridBandAlternatePaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.NumberAxis#setNumberFormatOverride(java.text.NumberFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ValueAxis#setVerticalTickLabels(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMinorTickMarkStroke(java.awt.Stroke)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "LogAxis#setBase(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setCategoryMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "SymbolAxis#setGridBandPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.DateAxis#setTimeZone(java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setAxisLineVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setAutoRangeTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setLabelToolTip(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabel(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "SubCategoryAxis#setSubLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setLabelURL(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setInverted(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setMinorTickMarkInsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setAxisLineStroke(java.awt.Stroke)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setTickMarkOutsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickMarkOutsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#setUpperMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setAutoRangeTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setInverted(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#clearCategoryLabelToolTips()";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setCategoryLabelPositionOffset(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.DateAxis#setTimeline(org.jfree.chart.axis.Timeline)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setAutoTickUnitSelection(boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickMarkStroke(java.awt.Stroke)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setAxisLinePaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#setMaximumCategoryLabelWidthRatio(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMajorTickTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setTimeZone(java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickLabelsVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setVerticalTickLabels(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMinorTickMarksVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickMarkPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setLast(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.LogAxis#setNumberFormatOverride(java.text.NumberFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setFirst(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickMarkOutsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabel(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMajorTickTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#setCategoryLabelPositionOffset(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabelAngle(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "DateAxis#setTimeZone(java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.LogAxis#setBase(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMinorTickMarkPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setAutoTickUnitSelection(boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.LogAxis#setMinorTickCount(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setLabelAngle(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "SymbolAxis#setGridBandAlternatePaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMinorTickMarkOutsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setLabel(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#setMaximumCategoryLabelLines(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "LogAxis#setNumberFormatOverride(java.text.NumberFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setLast(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "NumberAxis#setNumberFormatOverride(java.text.NumberFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabelToolTip(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "LogAxis#setSmallestValue(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMinorTickMarkInsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setPositiveArrowVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.DateAxis#setTimeZone(java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setTimeZone(java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setMinorTickMarkOutsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setTickMarkInsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setVerticalTickLabels(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setTimeZone(java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "SymbolAxis#setGridBandsVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ExtendedCategoryAxis#setSubLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#setCategoryMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.NumberAxis#setNumberFormatOverride(java.text.NumberFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setUpperMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setUpperMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setTickLabelsVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "LogAxis#setMinorTickCount(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#clearCategoryLabelToolTips()";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ExtendedCategoryAxis#setSubLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setDownArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.CategoryAxis#setLowerMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabelURL(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ValueAxis#setAutoTickUnitSelection(boolean,boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setAxisLineVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickMarkStroke(java.awt.Stroke)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setRightArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickMarkPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.SubCategoryAxis#setSubLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMinorTickMarkInsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ExtendedCategoryAxis#setSubLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "SubCategoryAxis#setSubLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setAxisLineStroke(java.awt.Stroke)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setFirst(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setLeftArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMinorTickMarkStroke(java.awt.Stroke)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setPositiveArrowVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.SubCategoryAxis#addSubCategory(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMinorTickTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMinorTickMarksVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.LogAxis#setBase(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.DateAxis#setDateFormatOverride(java.text.DateFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setNegativeArrowVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setDefaultAutoRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabelToolTip(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setMaximumCategoryLabelLines(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setTickMarksVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setCategoryLabelPositionOffset(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.NumberAxis#setRangeType(org.jfree.data.RangeType)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setFirst(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ExtendedCategoryAxis#setSubLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ValueAxis#setPositiveArrowVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.SubCategoryAxis#setSubLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.DateAxis#setDateFormatOverride(java.text.DateFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickMarksVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.SymbolAxis#setGridBandsVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setUpArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setMinorTickMarksVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickMarkInsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickMarkInsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabelAngle(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "PeriodAxis#setMinorTickTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setMaximumCategoryLabelLines(int)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMinorTickMarkPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setMajorTickTimePeriodClass(java.lang.Class)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setCategoryMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickMarksVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.NumberAxis#setRangeType(org.jfree.data.RangeType)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setLowerMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "DateAxis#setTimeline(org.jfree.chart.axis.Timeline)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setDownArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setDefaultAutoRange(org.jfree.data.Range)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#clearCategoryLabelToolTips()";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setLowerMargin(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "NumberAxis#setRangeType(org.jfree.data.RangeType)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ValueAxis#setInverted(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.PeriodAxis#setMinorTickMarkOutsideLength(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.LogAxis#setNumberFormatOverride(java.text.NumberFormat)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.CategoryAxis#setMaximumCategoryLabelWidthRatio(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.SymbolAxis#setGridBandsVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#setSubLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setAxisLinePaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#setMaximumCategoryLabelWidthRatio(float)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setUpArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "ValueAxis#setLeftArrow(java.awt.Shape)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.PeriodAxis#setLast(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickLabelsVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.LogAxis#setSmallestValue(double)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabelURL(java.lang.String)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.SymbolAxis#setGridBandPaint(java.awt.Paint)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.ValueAxis#setNegativeArrowVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setAxisLineVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "org.jfree.chart$axis.Axis#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "SubCategoryAxis#addSubCategory(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.DateAxis#setTimeline(org.jfree.chart.axis.Timeline)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "axis.ValueAxis#setNegativeArrowVisible(boolean)";
  "org.jfree.chart$axis.Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)" -> "Axis#setTickLabelPaint(java.awt.Paint)";
  "org.jfree.chart$axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)" -> "axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)" -> "DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)" -> "org.jfree.chart$axis.DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.ValueAxis#setAutoTickUnitSelection(boolean,boolean)" -> "org.jfree.chart$axis.ValueAxis#setAutoTickUnitSelection(boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoTickUnitSelection(boolean,boolean)" -> "ValueAxis#setAutoTickUnitSelection(boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoTickUnitSelection(boolean,boolean)" -> "NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)";
  "org.jfree.chart$axis.ValueAxis#setAutoTickUnitSelection(boolean,boolean)" -> "axis.ValueAxis#setAutoTickUnitSelection(boolean)";
  "org.jfree.chart$axis.Axis#setTickLabelFont(java.awt.Font)" -> "plot.JThermometer#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#setTickLabelFont(java.awt.Font)" -> "JThermometer#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$axis.Axis#setTickLabelFont(java.awt.Font)" -> "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)";
  "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)" -> "plot.JThermometer#setTickFontStyle(int)";
  "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)" -> "JThermometer#changeTickFontSize(int)";
  "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)" -> "org.jfree.chart$plot.JThermometer#changeTickFontSize(int)";
  "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)" -> "org.jfree.chart$plot.JThermometer#setTickFontStyle(int)";
  "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)" -> "JThermometer#setTickFontStyle(int)";
  "org.jfree.chart$plot.JThermometer#setTickLabelFont(java.awt.Font)" -> "plot.JThermometer#changeTickFontSize(int)";
  "org.jfree.chart$plot.XYPlot#setDomainCrosshairValue(double,boolean)" -> "plot.XYPlot#setDomainCrosshairValue(double)";
  "org.jfree.chart$plot.XYPlot#setDomainCrosshairValue(double,boolean)" -> "XYPlot#setDomainCrosshairValue(double)";
  "org.jfree.chart$plot.XYPlot#setDomainCrosshairValue(double,boolean)" -> "org.jfree.chart$plot.XYPlot#setDomainCrosshairValue(double)";
  "org.jfree.chart$plot.Plot#setOutlinePaint(java.awt.Paint)" -> "plot.JThermometer#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#setOutlinePaint(java.awt.Paint)" -> "JThermometer#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.Plot#setOutlinePaint(java.awt.Paint)" -> "org.jfree.chart$plot.JThermometer#setOutlinePaint(java.awt.Paint)";
  "org.jfree.chart$plot.CategoryPlot#setAnchorValue(double,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setAnchorValue(double)";
  "org.jfree.chart$plot.CategoryPlot#setAnchorValue(double,boolean)" -> "CategoryPlot#setAnchorValue(double)";
  "org.jfree.chart$plot.CategoryPlot#setAnchorValue(double,boolean)" -> "plot.CategoryPlot#setAnchorValue(double)";
  "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.CombinedRangeCategoryPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "CombinedRangeCategoryPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setRangeCrosshairValue(double,boolean)" -> "org.jfree.chart$plot.XYPlot#setRangeCrosshairValue(double)";
  "org.jfree.chart$plot.XYPlot#setRangeCrosshairValue(double,boolean)" -> "XYPlot#setRangeCrosshairValue(double)";
  "org.jfree.chart$plot.XYPlot#setRangeCrosshairValue(double,boolean)" -> "plot.XYPlot#setRangeCrosshairValue(double)";
  "org.jfree.chart$plot.ThermometerPlot#setValueLocation(int)" -> "plot.JThermometer#setValueLocation(int)";
  "org.jfree.chart$plot.ThermometerPlot#setValueLocation(int)" -> "org.jfree.chart$plot.JThermometer#setValueLocation(int)";
  "org.jfree.chart$plot.ThermometerPlot#setValueLocation(int)" -> "JThermometer#setValueLocation(int)";
  "org.jfree.chart$plot.ThermometerPlot#setValueFormat(java.text.NumberFormat)" -> "JThermometer#setValueFormat(java.text.DecimalFormat)";
  "org.jfree.chart$plot.ThermometerPlot#setValueFormat(java.text.NumberFormat)" -> "org.jfree.chart$plot.JThermometer#setValueFormat(java.text.DecimalFormat)";
  "org.jfree.chart$plot.ThermometerPlot#setValueFormat(java.text.NumberFormat)" -> "plot.JThermometer#setValueFormat(java.text.DecimalFormat)";
  "org.jfree.chart$plot.ThermometerPlot#setFollowDataInSubranges(boolean)" -> "org.jfree.chart$plot.JThermometer#setFollowDataInSubranges(boolean)";
  "org.jfree.chart$plot.ThermometerPlot#setFollowDataInSubranges(boolean)" -> "plot.JThermometer#setFollowDataInSubranges(boolean)";
  "org.jfree.chart$plot.ThermometerPlot#setFollowDataInSubranges(boolean)" -> "JThermometer#setFollowDataInSubranges(boolean)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)" -> "CompassPlot#setSeriesNeedle(int,int)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)" -> "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,int)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)" -> "plot.CompassPlot#setSeriesNeedle(int,int)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,int)" -> "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,int)" -> "CompassPlot#setSeriesNeedle(int)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int,int)" -> "plot.CompassPlot#setSeriesNeedle(int)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int)" -> "plot.CompassPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int)" -> "CompassPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.CompassPlot#setSeriesNeedle(int)" -> "org.jfree.chart$plot.CompassPlot#<init(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.CompassPlot#<init(org.jfree.data.general.ValueDataset)" -> "org.jfree.chart$plot.CompassPlot#<init()";
  "org.jfree.chart$plot.CompassPlot#<init(org.jfree.data.general.ValueDataset)" -> "plot.CompassPlot#<init()";
  "org.jfree.chart$plot.CompassPlot#<init(org.jfree.data.general.ValueDataset)" -> "CompassPlot#<init()";
  "org.jfree.chart$plot.ThermometerPlot#setThermometerPaint(java.awt.Paint)" -> "plot.JThermometer#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.ThermometerPlot#setThermometerPaint(java.awt.Paint)" -> "JThermometer#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.ThermometerPlot#setThermometerPaint(java.awt.Paint)" -> "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.JList$AccessibleJList$AccessibleJListChild#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "java.awt.Component$AccessibleAWTComponent#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.table$JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.plaf$basic.BasicComboBoxUI#paintCurrentValue(java.awt.Graphics,java.awt.Rectangle,boolean)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.JTable$AccessibleJTable$AccessibleJTableCell#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.JTree$AccessibleJTree$AccessibleJTreeNode#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.LookAndFeel#installColors(javax.swing.JComponent,java.lang.String,java.lang.String)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "javax.swing.JTable$AccessibleJTable$AccessibleJTableHeaderCell#setForeground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setForeground(java.awt.Color)" -> "sun.awt.windows$WPanelPeer#initialize()";
  "org.jfree.chart$plot.ThermometerPlot#setUnits(int)" -> "org.jfree.chart$plot.JThermometer#setUnits(int)";
  "org.jfree.chart$plot.ThermometerPlot#setUnits(int)" -> "plot.JThermometer#setUnits(int)";
  "org.jfree.chart$plot.ThermometerPlot#setUnits(int)" -> "JThermometer#setUnits(int)";
  "org.jfree.chart$plot.Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)" -> "plot.Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)";
  "org.jfree.chart$plot.Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)" -> "Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)";
  "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "CombinedRangeXYPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.CombinedRangeXYPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" -> "org.jfree.chart$plot.XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)";
  "org.jfree.chart$plot.Plot#setBackgroundPaint(java.awt.Paint)" -> "plot.JThermometer#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.Plot#setBackgroundPaint(java.awt.Paint)" -> "JThermometer#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.Plot#setBackgroundPaint(java.awt.Paint)" -> "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.DefaultCellEditor#getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.JList$AccessibleJList$AccessibleJListChild#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "java.awt.Component$AccessibleAWTComponent#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.table$JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.text$html.HiddenTagView#createComponent()";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.JTree$AccessibleJTree$AccessibleJTreeNode#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.JTable$AccessibleJTable$AccessibleJTableCell#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.text$html.IsindexView#createComponent()";
  "org.jfree.chart$plot.JThermometer#setBackground(java.awt.Color)" -> "javax.swing.JTable$AccessibleJTable$AccessibleJTableHeaderCell#setBackground(java.awt.Color)";
  "org.jfree.chart$plot.MeterPlot#<clinit()" -> "MeterPlot#getPlotType()";
  "org.jfree.chart$plot.MeterPlot#<clinit()" -> "plot.MeterPlot#getPlotType()";
  "org.jfree.chart$plot.MeterPlot#<clinit()" -> "MeterPlot#<clinit()";
  "org.jfree.chart$plot.MeterPlot#<clinit()" -> "plot.MeterPlot#<clinit()";
  "org.jfree.chart$plot.SpiderWebPlot#<clinit()" -> "SpiderWebPlot#<clinit()";
  "org.jfree.chart$plot.SpiderWebPlot#<clinit()" -> "plot.SpiderWebPlot#<clinit()";
  "org.jfree.chart$plot.CompassPlot#<clinit()" -> "CompassPlot#<clinit()";
  "org.jfree.chart$plot.ThermometerPlot#<clinit()" -> "plot.ThermometerPlot#setDisplayRange(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#<clinit()" -> "org.jfree.chart$plot.ThermometerPlot#setDisplayRange(int,double,double)";
  "org.jfree.chart$plot.ThermometerPlot#<clinit()" -> "plot.ThermometerPlot#getPlotType()";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()" -> "axis.PeriodAxis#clone()";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#createInstance(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()" -> "PeriodAxis#clone()";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()" -> "PeriodAxisLabelInfo#createInstance(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()" -> "org.jfree.chart$axis.PeriodAxis#clone()";
  "org.jfree.chart$axis.PeriodAxisLabelInfo#<clinit()" -> "axis.PeriodAxisLabelInfo#createInstance(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$text.TextBox#<init(org.jfree.chart.text.TextBlock)" -> "TextBox#<init()";
  "org.jfree.chart$text.TextBox#<init(org.jfree.chart.text.TextBlock)" -> "text.TextBox#<init()";
  "org.jfree.chart$text.TextBox#<init(org.jfree.chart.text.TextBlock)" -> "org.jfree.chart$text.TextBox#<init()";
  "org.jfree.chart$plot.dial.DialValueIndicator#<init(int)" -> "dial.DialValueIndicator#<init()";
  "org.jfree.chart$plot.dial.DialValueIndicator#<init(int)" -> "DialValueIndicator#<init()";
  "org.jfree.chart$plot.dial.DialValueIndicator#<init(int)" -> "plot.dial.DialValueIndicator#<init()";
  "org.jfree.chart$plot.dial.DialValueIndicator#<init(int)" -> "org.jfree.chart$plot.dial.DialValueIndicator#<init()";
  "org.jfree.chart$axis.Axis#<clinit()" -> "axis.Axis#<init(java.lang.String)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "axis.ValueAxis#<clinit()";
  "org.jfree.chart$axis.Axis#<clinit()" -> "org.jfree.chart$axis.DateAxis#createStandardDateTickUnits()";
  "org.jfree.chart$axis.Axis#<clinit()" -> "DateAxis#createStandardDateTickUnits()";
  "org.jfree.chart$axis.Axis#<clinit()" -> "axis.PeriodAxis#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "axis.ValueAxis#<init(java.lang.String,org.jfree.chart.axis.TickUnitSource)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "axis.Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "org.jfree.chart$axis.ValueAxis#<init(java.lang.String,org.jfree.chart.axis.TickUnitSource)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "org.jfree.chart$axis.ValueAxis#<clinit()";
  "org.jfree.chart$axis.Axis#<clinit()" -> "axis.Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "org.jfree.chart$axis.Axis#<init(java.lang.String)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "org.jfree.chart$axis.Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)";
  "org.jfree.chart$axis.Axis#<clinit()" -> "Axis#<init(java.lang.String)";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "axis.DateAxis#createStandardDateTickUnits()";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "ValueAxis#<clinit()";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "DateAxis#<clinit()";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "org.jfree.chart$axis.DateAxis#<clinit()";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "PeriodAxis#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "org.jfree.chart$axis.PeriodAxis#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.ValueAxis#<clinit()" -> "ValueAxis#<init(java.lang.String,org.jfree.chart.axis.TickUnitSource)";
  "org.jfree.chart$axis.DateAxis#<clinit()" -> "axis.DateAxis#<clinit()";
  "org.jfree.chart$util.RectangleInsets#<init(double,double,double,double)" -> "RectangleInsets#<init()";
  "org.jfree.chart$util.RectangleInsets#<init(double,double,double,double)" -> "org.jfree.chart$util.RectangleInsets#<init()";
  "org.jfree.chart$util.RectangleInsets#<init(double,double,double,double)" -> "util.RectangleInsets#<init()";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)" -> "org.jfree.chart$labels.IntervalCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)" -> "IntervalCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)" -> "labels.IntervalCategoryToolTipGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "org.jfree.chart$labels.IntervalCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "IntervalCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)" -> "labels.IntervalCategoryItemLabelGenerator#<init(java.lang.String,java.text.DateFormat)";
  "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)" -> "time.TimeTableXYDataset#<init(java.util.TimeZone)";
  "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)" -> "TimeTableXYDataset#<init()";
  "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)" -> "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone)";
  "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)" -> "time.TimeTableXYDataset#<init()";
  "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)" -> "TimeTableXYDataset#<init(java.util.TimeZone)";
  "org.jfree.data$time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)" -> "org.jfree.data$time.TimeTableXYDataset#<init()";
  "org.jfree.data$time.TimePeriodValue#<init(org.jfree.data.time.TimePeriod,java.lang.Number)" -> "TimePeriodValue#<init(org.jfree.data.time.TimePeriod,double)";
  "org.jfree.data$time.TimePeriodValue#<init(org.jfree.data.time.TimePeriod,java.lang.Number)" -> "org.jfree.data$time.TimePeriodValue#<init(org.jfree.data.time.TimePeriod,double)";
  "org.jfree.data$time.TimePeriodValue#<init(org.jfree.data.time.TimePeriod,java.lang.Number)" -> "time.TimePeriodValue#<init(org.jfree.data.time.TimePeriod,double)";
  "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)" -> "XYSeries#indexOf(java.lang.Number)";
  "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)" -> "xy.XYSeries#indexOf(java.lang.Number)";
  "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)" -> "org.jfree.data$xy.XYDataItem#<init(double,double)";
  "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)" -> "XYDataItem#<init(double,double)";
  "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)" -> "org.jfree.data$xy.XYSeries#indexOf(java.lang.Number)";
  "org.jfree.data$xy.XYDataItem#<init(java.lang.Number,java.lang.Number)" -> "xy.XYDataItem#<init(double,double)";
  "org.jfree.data$xy.XYSeries#indexOf(java.lang.Number)" -> "xy.DefaultTableXYDataset#canPrune(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#indexOf(java.lang.Number)" -> "org.jfree.data$xy.DefaultTableXYDataset#canPrune(java.lang.Number)";
  "org.jfree.data$xy.XYSeries#indexOf(java.lang.Number)" -> "DefaultTableXYDataset#canPrune(java.lang.Number)";
  "org.jfree.chart$plot.MeterInterval#<init(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)" -> "MeterInterval#<init(java.lang.String,org.jfree.data.Range)";
  "org.jfree.chart$plot.MeterInterval#<init(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)" -> "plot.MeterInterval#<init(java.lang.String,org.jfree.data.Range)";
  "org.jfree.chart$plot.MeterInterval#<init(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)" -> "org.jfree.chart$plot.MeterInterval#<init(java.lang.String,org.jfree.data.Range)";
  "org.jfree.chart$annotations.XYImageAnnotation#<init(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)" -> "annotations.XYImageAnnotation#<init(double,double,java.awt.Image)";
  "org.jfree.chart$annotations.XYImageAnnotation#<init(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)" -> "XYImageAnnotation#<init(double,double,java.awt.Image)";
  "org.jfree.chart$annotations.XYImageAnnotation#<init(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)" -> "org.jfree.chart$annotations.XYImageAnnotation#<init(double,double,java.awt.Image)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)" -> "renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)" -> "category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)" -> "AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "BoxAndWhiskerRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.LevelRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.LevelRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "category.BoxAndWhiskerRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.BoxAndWhiskerRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "LevelRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "category.LevelRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "category.BarRenderer3D#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.BarRenderer3D#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "BarRenderer3D#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.BarRenderer3D#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.data$DataUtilities#createNumberArray(double[])" -> "DataUtilities#createNumberArray2D(double[][])";
  "org.jfree.chart$plot.dial.StandardDialRange#<init(double,double,java.awt.Paint)" -> "StandardDialRange#<init()";
  "org.jfree.chart$plot.dial.StandardDialRange#<init(double,double,java.awt.Paint)" -> "plot.dial.StandardDialRange#<init()";
  "org.jfree.chart$plot.dial.StandardDialRange#<init(double,double,java.awt.Paint)" -> "dial.StandardDialRange#<init()";
  "org.jfree.chart$plot.dial.StandardDialRange#<init(double,double,java.awt.Paint)" -> "org.jfree.chart$plot.dial.StandardDialRange#<init()";
  "org.jfree.chart$axis.DateTickUnit#getMillisecondCount(int,int)" -> "DateTickUnit#<init(int,int,int,int,java.text.DateFormat)";
  "org.jfree.chart$axis.DateTickUnit#getMillisecondCount(int,int)" -> "org.jfree.chart$axis.DateTickUnit#<init(int,int,int,int,java.text.DateFormat)";
  "org.jfree.chart$axis.DateTickUnit#getMillisecondCount(int,int)" -> "axis.DateTickUnit#<init(int,int,int,int,java.text.DateFormat)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,int,int,java.text.DateFormat)" -> "DateAxis#createStandardDateTickUnits(java.util.TimeZone)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,int,int,java.text.DateFormat)" -> "DateTickUnit#<init(int,int,java.text.DateFormat)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,int,int,java.text.DateFormat)" -> "org.jfree.chart$axis.DateTickUnit#<init(int,int,java.text.DateFormat)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,int,int,java.text.DateFormat)" -> "axis.DateTickUnit#<init(int,int,java.text.DateFormat)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,java.text.DateFormat)" -> "axis.DateAxis#createStandardDateTickUnits(java.util.TimeZone)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,java.text.DateFormat)" -> "org.jfree.chart$axis.DateTickUnit#<init(int,int)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,java.text.DateFormat)" -> "org.jfree.chart$axis.DateAxis#createStandardDateTickUnits(java.util.TimeZone)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,java.text.DateFormat)" -> "DateTickUnit#<init(int,int)";
  "org.jfree.chart$axis.DateTickUnit#<init(int,int,java.text.DateFormat)" -> "axis.DateTickUnit#<init(int,int)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint,float)" -> "text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint,float)" -> "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint,float)" -> "TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "text.TextLine#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "TextFragment#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "org.jfree.chart$text.TextFragment#<init(java.lang.String)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "text.TextFragment#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "TextLine#<init(java.lang.String,java.awt.Font,java.awt.Paint)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "TextFragment#<init(java.lang.String)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font,java.awt.Paint)" -> "text.TextFragment#<init(java.lang.String)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font)" -> "TextLine#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font)" -> "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$text.TextFragment#<init(java.lang.String,java.awt.Font)" -> "text.TextLine#<init(java.lang.String,java.awt.Font)";
  "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font)" -> "text.TextLine#<init(java.lang.String)";
  "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font)" -> "TextLine#<init(java.lang.String)";
  "org.jfree.chart$text.TextLine#<init(java.lang.String,java.awt.Font)" -> "org.jfree.chart$text.TextLine#<init(java.lang.String)";
  "org.jfree.data$time.SerialDate#monthCodeToQuarter(int)" -> "Quarter#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.SerialDate#monthCodeToQuarter(int)" -> "time.Quarter#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.SerialDate#monthCodeToQuarter(int)" -> "org.jfree.data$time.Quarter#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Quarter#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Quarter#<init(java.util.Date)";
  "org.jfree.data$time.Quarter#<init(java.util.Date,java.util.TimeZone)" -> "time.Quarter#<init(java.util.Date)";
  "org.jfree.data$time.Quarter#<init(java.util.Date,java.util.TimeZone)" -> "Quarter#<init(java.util.Date)";
  "org.jfree.data$time.Quarter#<init(java.util.Date)" -> "org.jfree.data$time.Quarter#<init()";
  "org.jfree.data$time.Quarter#<init(java.util.Date)" -> "time.Quarter#<init()";
  "org.jfree.data$time.Quarter#<init(java.util.Date)" -> "Quarter#<init()";
  "org.jfree.data$Range#<init(double,double)" -> "DefaultBoxAndWhiskerCategoryDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "time.DateRange#<init(java.util.Date,java.util.Date)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.chart$plot.ThermometerPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "FastScatterPlot#calculateXDataRange(float[][])";
  "org.jfree.data$Range#<init(double,double)" -> "DateRange#<init(java.util.Date,java.util.Date)";
  "org.jfree.data$Range#<init(double,double)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.chart$block.AbstractBlock#trimToContentHeight(org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "block.AbstractBlock#trimToContentWidth(org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$time.DateRange#<init(double,double)";
  "org.jfree.data$Range#<init(double,double)" -> "PeriodAxis#getRange()";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.chart$plot.FastScatterPlot#calculateYDataRange(float[][])";
  "org.jfree.data$Range#<init(double,double)" -> "DefaultMultiValueCategoryDataset#<init()";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "plot.FastScatterPlot#calculateYDataRange(float[][])";
  "org.jfree.data$Range#<init(double,double)" -> "JDBCXYDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "statistics.DefaultMultiValueCategoryDataset#<init()";
  "org.jfree.data$Range#<init(double,double)" -> "time.TimeTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "ThermometerPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$Range#<init(double,double)" -> "plot.ThermometerPlot#getDataRange(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$time.DateRange#<init(java.util.Date,java.util.Date)";
  "org.jfree.data$Range#<init(double,double)" -> "time.TimeSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "time.DynamicTimeSeriesCollection#findDomainLimits()";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "block.AbstractBlock#trimToContentHeight(org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "time.DateRange#<init(double,double)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#findDomainLimits()";
  "org.jfree.data$Range#<init(double,double)" -> "statistics.DefaultBoxAndWhiskerXYDataset#add(java.util.Date,org.jfree.data.statistics.BoxAndWhiskerItem)";
  "org.jfree.data$Range#<init(double,double)" -> "TimePeriodValuesCollection#getDomainBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "jdbc.JDBCXYDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "Range#shift(org.jfree.data.Range,double,boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "FastScatterPlot#calculateYDataRange(float[][])";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "plot.FastScatterPlot#calculateXDataRange(float[][])";
  "org.jfree.data$Range#<init(double,double)" -> "TimeTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "DefaultStatisticalCategoryDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "DynamicTimeSeriesCollection#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.chart$plot.FastScatterPlot#calculateXDataRange(float[][])";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#<init()";
  "org.jfree.data$Range#<init(double,double)" -> "statistics.DefaultStatisticalCategoryDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "AbstractBlock#trimToContentHeight(org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "DateRange#<init(double,double)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "DefaultBoxAndWhiskerXYDataset#add(java.util.Date,org.jfree.data.statistics.BoxAndWhiskerItem)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.chart$axis.PeriodAxis#getRange()";
  "org.jfree.data$Range#<init(double,double)" -> "DynamicTimeSeriesCollection#findDomainLimits()";
  "org.jfree.data$Range#<init(double,double)" -> "AbstractBlock#trimToContentWidth(org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "time.DynamicTimeSeriesCollection#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "Range#expandToInclude(org.jfree.data.Range,double)";
  "org.jfree.data$Range#<init(double,double)" -> "axis.PeriodAxis#getRange()";
  "org.jfree.data$Range#<init(double,double)" -> "Range#expand(org.jfree.data.Range,double,double)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$jdbc.JDBCXYDataset#getRangeBounds(boolean)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.chart$block.AbstractBlock#trimToContentWidth(org.jfree.data.Range)";
  "org.jfree.data$Range#<init(double,double)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#add(java.util.Date,org.jfree.data.statistics.BoxAndWhiskerItem)";
  "org.jfree.data$Range#<init(double,double)" -> "Range#combine(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$block.AbstractBlock#trimToContentHeight(org.jfree.data.Range)" -> "block.AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#trimToContentHeight(org.jfree.data.Range)" -> "AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.data$time.DateRange#<init(double,double)" -> "org.jfree.data$time.DateRange#<init(org.jfree.data.Range)";
  "org.jfree.data$time.DateRange#<init(double,double)" -> "time.DateRange#<init(org.jfree.data.Range)";
  "org.jfree.data$time.DateRange#<init(double,double)" -> "DateRange#<init(org.jfree.data.Range)";
  "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double)";
  "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)" -> "Range#shift(org.jfree.data.Range,double)";
  "org.jfree.data$time.DateRange#<init(java.util.Date,java.util.Date)" -> "time.DateRange#<init()";
  "org.jfree.data$time.DateRange#<init(java.util.Date,java.util.Date)" -> "org.jfree.data$time.DateRange#<init()";
  "org.jfree.data$time.DateRange#<init(java.util.Date,java.util.Date)" -> "DateRange#<init()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#findDomainLimits()" -> "time.DynamicTimeSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#findDomainLimits()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#findDomainLimits()" -> "DynamicTimeSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "TimeSeriesCollection#getDomainBounds(boolean)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "time.TimePeriodValuesCollection#getDomainBounds(boolean)";
  "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)" -> "TimeTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)" -> "org.jfree.data$time.TimeTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)" -> "time.TimeTableXYDataset#getDomainUpperBound(boolean)";
  "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)" -> "org.jfree.data$time.TimeTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)" -> "TimeTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.data$time.TimeTableXYDataset#getDomainBounds(boolean)" -> "time.TimeTableXYDataset#getDomainLowerBound(boolean)";
  "org.jfree.experimental$chart.annotations.XYTitleAnnotation#<init(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)" -> "XYTitleAnnotation#<init(double,double,org.jfree.chart.title.Title)";
  "org.jfree.experimental$chart.annotations.XYTitleAnnotation#<init(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)" -> "org.jfree.experimental$chart.annotations.XYTitleAnnotation#<init(double,double,org.jfree.chart.title.Title)";
  "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[],boolean)" -> "Statistics#calculateMean(java.lang.Number[])";
  "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[],boolean)" -> "statistics.Statistics#calculateMean(java.lang.Number[])";
  "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[],boolean)" -> "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[])";
  "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[])" -> "statistics.Statistics#getStdDev(java.lang.Number[])";
  "org.jfree.data$statistics.Statistics#calculateMean(java.lang.Number[])" -> "Statistics#getStdDev(java.lang.Number[])";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)" -> "axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)" -> "MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)" -> "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "axis.MonthDateFormat#<init(java.util.Locale)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "MonthDateFormat#<init(java.util.Locale,int)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "axis.MonthDateFormat#<init(java.util.TimeZone,int)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "org.jfree.chart$axis.MonthDateFormat#<init(java.util.Locale,int)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "MonthDateFormat#<init(java.util.TimeZone)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "org.jfree.chart$axis.MonthDateFormat#<init(java.util.Locale)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,int)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "MonthDateFormat#<init(java.util.Locale)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "MonthDateFormat#<init(java.util.TimeZone,int)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "axis.MonthDateFormat#<init(java.util.Locale,int)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" -> "axis.MonthDateFormat#<init(java.util.TimeZone)";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone)" -> "MonthDateFormat#<init()";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone)" -> "axis.MonthDateFormat#<init()";
  "org.jfree.chart$axis.MonthDateFormat#<init(java.util.TimeZone)" -> "org.jfree.chart$axis.MonthDateFormat#<init()";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "MeterPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "CandlestickRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.BarRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "xy.CandlestickRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.StandardDialRange#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.dial.DialPointer$Pointer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.MeterPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.ExtendedCategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.SubCategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "dial.DialBackground#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "BoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.xy.XYErrorRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "category.BarRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.LookupPaintScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "block.ColorBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "SubCategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "xy.XYErrorRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$block.ColorBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "ExtendedCategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "dial.DialPointer$Pointer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "WaterfallBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "axis.CategoryAxis#readPaintMap(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.category.WaterfallBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "LabelBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "XYBoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.DialTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.TextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "category.LineRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "SymbolAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "LegendTitle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.LookupPaintScale$PaintItem#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "StatisticalLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "title.TextTitle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.category.GanttRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "text.TextFragment#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$annotations.XYTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.category.StatisticalLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "annotations.TextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "GanttRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "category.WaterfallBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "axis.SymbolAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.MultiplePiePlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.dial.DialBackground#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.dial.StandardDialRange#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "axis.SubCategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "ColorBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.StatisticalLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "XYTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$title.TextTitle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "block.BlockBorder#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "CategoryAxis#readPaintMap(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "LineRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.HighLowRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "axis.ExtendedCategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "dial.DialTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "category.StatisticalLineAndShapeRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "title.LegendTitle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.LineRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.xy.CandlestickRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.LookupPaintScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.LookupPaintScale$PaintItem#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "XYLine3DRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "TextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "LookupPaintScale#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "DialPointer$Pointer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.category.BoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.CompassPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$text.TextFragment#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.GanttRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.XYErrorRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "HighLowRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.CategoryAxis#readPaintMap(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.category.WaterfallBarRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.SymbolAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.CompassPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.xy.XYBoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "BlockBorder#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "LookupPaintScale$PaintItem#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "category.GanttRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.MeterPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.category.BarRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.MultiplePiePlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$block.BlockBorder#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "plot.dial.DialTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "dial.StandardDialRange#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$renderer.xy.CandlestickRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "PaintMap#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "BarRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "xy.XYLine3DRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "XYErrorRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.category.LineRenderer3D#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "StandardDialRange#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "xy.XYBoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "block.LabelBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.xy.HighLowRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "renderer.xy.XYLine3DRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$plot.dial.DialBackground#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "TextFragment#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$title.LegendTitle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "MultiplePiePlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "DialBackground#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "DialTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "org.jfree.chart$block.LabelBlock#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "category.BoxAndWhiskerRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "xy.HighLowRenderer#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "TextTitle#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "CompassPlot#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#readPaint(java.io.ObjectInputStream)" -> "annotations.XYTextAnnotation#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$axis.CategoryAxis#readPaintMap(java.io.ObjectInputStream)" -> "axis.CategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$axis.CategoryAxis#readPaintMap(java.io.ObjectInputStream)" -> "org.jfree.chart$axis.CategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$axis.CategoryAxis#readPaintMap(java.io.ObjectInputStream)" -> "CategoryAxis#readObject(java.io.ObjectInputStream)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.CategoryItemEntity#<init(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.XYAnnotationEntity#<init(java.awt.Shape,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "TickLabelEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "ChartEntity#<init(java.awt.Shape,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "XYItemEntity#<init(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.PieSectionEntity#<init(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.CategoryItemEntity#<init(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.XYAnnotationEntity#<init(java.awt.Shape,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "PieSectionEntity#<init(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.ChartEntity#<init(java.awt.Shape,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.TickLabelEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.PieSectionEntity#<init(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.AxisLabelEntity#<init(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "CategoryItemEntity#<init(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.TickLabelEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.XYItemEntity#<init(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "AxisLabelEntity#<init(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "XYAnnotationEntity#<init(java.awt.Shape,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.XYItemEntity#<init(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.TickLabelEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "CategoryLabelEntity#<init(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.TickLabelEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "entity.CategoryLabelEntity#<init(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.TickLabelEntity#<init(java.awt.Shape,java.lang.String,java.lang.String)" -> "org.jfree.chart$entity.CategoryLabelEntity#<init(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String)" -> "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String)" -> "entity.ChartEntity#<init(java.awt.Shape)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape,java.lang.String)" -> "ChartEntity#<init(java.awt.Shape)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape)" -> "org.jfree.chart$entity.LegendItemEntity#<init(java.awt.Shape)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape)" -> "LegendItemEntity#<init(java.awt.Shape)";
  "org.jfree.chart$entity.ChartEntity#<init(java.awt.Shape)" -> "entity.LegendItemEntity#<init(java.awt.Shape)";
  "org.jfree.chart$util.LogFormat#<init(double,java.lang.String,java.lang.String,boolean)" -> "org.jfree.chart$util.LogFormat#<init(double,java.lang.String,boolean)";
  "org.jfree.chart$util.LogFormat#<init(double,java.lang.String,java.lang.String,boolean)" -> "util.LogFormat#<init(double,java.lang.String,boolean)";
  "org.jfree.chart$util.LogFormat#<init(double,java.lang.String,java.lang.String,boolean)" -> "LogFormat#<init(double,java.lang.String,boolean)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#toRangeWidth(org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#<init(org.jfree.data.Range,double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#<init(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#toFixedWidth(double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#toFixedHeight(double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#<init(double,double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#<init(org.jfree.data.Range,double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#toUnconstrainedHeight()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#toFixedHeight(double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#toRangeHeight(org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#<init(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#<clinit()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#<init(double,double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#toFixedWidth(double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#toUnconstrainedHeight()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#toUnconstrainedWidth()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#toUnconstrainedHeight()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#<init(org.jfree.data.Range,double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#<init(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#toUnconstrainedWidth()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#toUnconstrainedWidth()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#<clinit()";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#toRangeHeight(org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#toRangeWidth(org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "RectangleConstraint#<init(double,org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#toFixedHeight(double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#toFixedWidth(double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#<init(double,double)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "block.RectangleConstraint#<init(double,org.jfree.data.Range)";
  "org.jfree.chart$block.RectangleConstraint#<init(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" -> "org.jfree.chart$block.RectangleConstraint#<clinit()";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "xy.VectorDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "xy.YIntervalDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "time.ohlc.OHLCItem#<init(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "VectorDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "YIntervalDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "ohlc.OHLCItem#<init(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "xy.XIntervalDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "XYIntervalDataItem#<init(double,double,double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "XIntervalDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "xy.XYIntervalDataItem#<init(double,double,double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "OHLCItem#<init(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "org.jfree.data$xy.YIntervalDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "org.jfree.data$xy.VectorDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "org.jfree.data$xy.XIntervalDataItem#<init(double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "org.jfree.data$time.ohlc.OHLCItem#<init(org.jfree.data.time.RegularTimePeriod,double,double,double,double)";
  "org.jfree.data$ComparableObjectItem#<init(java.lang.Comparable,java.lang.Object)" -> "org.jfree.data$xy.XYIntervalDataItem#<init(double,double,double,double,double,double)";
  "org.jfree.chart$axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)" -> "org.jfree.chart$axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)";
  "org.jfree.chart$axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)" -> "CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)";
  "org.jfree.chart$axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)" -> "axis.CategoryLabelPosition#<init(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)" -> "YIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)" -> "YIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)" -> "xy.YIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)" -> "xy.YIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getItemCount(int)";
  "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#<init(java.lang.String)" -> "labels.StandardXYSeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#<init(java.lang.String)" -> "StandardXYSeriesLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#<init(java.lang.String)" -> "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#<init()";
  "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)" -> "org.jfree.data$time.Week#<init(java.util.Date)";
  "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)" -> "Week#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)" -> "time.Week#<init(java.util.Date)";
  "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)" -> "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)" -> "Week#<init(java.util.Date)";
  "org.jfree.data$time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)" -> "time.Week#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Week#<init(java.util.Date)" -> "org.jfree.data$time.Week#<init()";
  "org.jfree.data$time.Week#<init(java.util.Date)" -> "Week#<init()";
  "org.jfree.data$time.Week#<init(java.util.Date)" -> "time.Week#<init()";
  "org.jfree.data$time.SimpleTimePeriod#<init(java.util.Date,java.util.Date)" -> "org.jfree.data$time.SimpleTimePeriod#<init(long,long)";
  "org.jfree.data$time.SimpleTimePeriod#<init(java.util.Date,java.util.Date)" -> "time.SimpleTimePeriod#<init(long,long)";
  "org.jfree.data$time.SimpleTimePeriod#<init(java.util.Date,java.util.Date)" -> "SimpleTimePeriod#<init(long,long)";
  "org.jfree.data$xy.XYSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.XYSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeries(int)" -> "org.jfree.data$xy.XYSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeries(int)" -> "xy.XYSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeries(int)" -> "XYSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeries(int)" -> "xy.XYSeriesCollection#getItemCount(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeries(int)" -> "XYSeriesCollection#getItemCount(int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getEndValue(int,int)" -> "category.DefaultIntervalCategoryDataset#getValue(int,int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getEndValue(int,int)" -> "DefaultIntervalCategoryDataset#getValue(int,int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getEndValue(int,int)" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getValue(int,int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowKey(int)" -> "CategoryToPieDataset#getKey(int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowKey(int)" -> "org.jfree.data$category.CategoryToPieDataset#getKey(int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowKey(int)" -> "category.CategoryToPieDataset#getKey(int)";
  "CategoryToPieDataset#getKey(int)" -> "org.jfree.chart$plot.PiePlot#getSectionKey(int)";
  "org.jfree.data$category.CategoryToPieDataset#getKey(int)" -> "plot.PiePlot#getSectionKey(int)";
  "org.jfree.data$category.CategoryToPieDataset#getKey(int)" -> "PiePlot#getSectionKey(int)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.AbstractXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "AbstractXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" -> "StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" -> "labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" -> "StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" -> "labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "StandardXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "labels.StandardXYToolTipGenerator#getTimeSeriesInstance()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "labels.BoxAndWhiskerXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "BoxAndWhiskerXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#getTimeSeriesInstance()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "StandardXYToolTipGenerator#getTimeSeriesInstance()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.BoxAndWhiskerXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "StandardXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "labels.BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "BubbleXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.AbstractXYItemLabelGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat)" -> "StandardXYZToolTipGenerator#<init(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardXYItemLabelGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardXYItemLabelGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardXYToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "BoxAndWhiskerXYToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardXYToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.BoxAndWhiskerXYToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "StandardXYZToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.BoxAndWhiskerXYToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "org.jfree.chart$labels.StandardXYToolTipGenerator#<init()";
  "org.jfree.chart$labels.StandardXYToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" -> "labels.StandardXYZToolTipGenerator#<init(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable,java.lang.String)" -> "Series#<init(java.lang.Comparable)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable,java.lang.String)" -> "general.Series#<init(java.lang.Comparable)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable,java.lang.String)" -> "org.jfree.data$general.Series#<init(java.lang.Comparable)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "TimePeriodValues#<init(java.lang.Comparable,java.lang.String,java.lang.String)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "org.jfree.data$time.TimePeriodValues#<init(java.lang.Comparable,java.lang.String,java.lang.String)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "time.TimePeriodValues#<init(java.lang.Comparable,java.lang.String,java.lang.String)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "gantt.TaskSeries#<init(java.lang.String)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "XYSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "org.jfree.data$gantt.TaskSeries#<init(java.lang.String)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$general.Series#<init(java.lang.Comparable)" -> "TaskSeries#<init(java.lang.String)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.XIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.YIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.XYIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "XYIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "time.ohlc.OHLCSeries#<init(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "YIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "ComparableObjectSeries#<init(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$time.ohlc.OHLCSeries#<init(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "VectorSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.XIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "ohlc.OHLCSeries#<init(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.XYIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.YIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "XIntervalSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "OHLCSeries#<init(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.VectorSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$ComparableObjectSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.VectorSeries#<init(java.lang.Comparable,boolean,boolean)";
  "org.jfree.data$xy.XIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.XIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "XIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.XIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XYIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "XYIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XYIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.XYIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XYIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.XYIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.YIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.YIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.YIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "YIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.YIntervalSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.YIntervalSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.VectorSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.VectorSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.VectorSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.VectorSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.VectorSeries#<init(java.lang.Comparable,boolean,boolean)" -> "VectorSeries#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimePeriodValues#<init(java.lang.Comparable,java.lang.String,java.lang.String)" -> "org.jfree.data$time.TimePeriodValues#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimePeriodValues#<init(java.lang.Comparable,java.lang.String,java.lang.String)" -> "time.TimePeriodValues#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimePeriodValues#<init(java.lang.Comparable,java.lang.String,java.lang.String)" -> "TimePeriodValues#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)" -> "time.TimeSeries#<init(java.lang.Comparable,java.lang.Class)";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)" -> "TimeSeries#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)" -> "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)" -> "TimeSeries#<init(java.lang.Comparable,java.lang.Class)";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)" -> "time.TimeSeries#<init(java.lang.Comparable)";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable)" -> "TimeSeriesTableModel#<init()";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable)" -> "time.TimeSeriesTableModel#<init()";
  "org.jfree.data$time.TimeSeries#<init(java.lang.Comparable)" -> "org.jfree.data$time.TimeSeriesTableModel#<init()";
  "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.XYSeries#<init(java.lang.Comparable,boolean)";
  "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)" -> "xy.XYSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)" -> "XYSeries#<init(java.lang.Comparable,boolean)";
  "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)" -> "XYSeries#<init(java.lang.Comparable)";
  "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean,boolean)" -> "org.jfree.data$xy.XYSeries#<init(java.lang.Comparable,boolean)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimePeriodValues#recalculateBounds()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getEndXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getItem(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$axis.SymbolAxis#valueToString(double)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYZDataset#getYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getEndXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$text.TextLine#getFirstTextFragment()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$text.TextBlock#getLastLine()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.MatrixSeriesCollection#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$KeyedObjects#getKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$renderer.LookupPaintScale#getPaint(double)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getVectorYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getStartX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.MatrixSeriesCollection#getY(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$axis.TickUnits#get(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimeSeriesCollection#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getEndYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.MatrixSeriesCollection#getZ(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getOpenValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getEndX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XYSeries#getDataItem(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#clone()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int,boolean)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMeanValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getStartYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultWindDataset#getWindForce(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getColumnKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYZDataset#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimeSeriesCollection#getStartX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$plot.PlotRenderingInfo#getSubplotInfo(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipCount(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimeSeries#getDataItem(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getLowValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getVectorXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getSeriesKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipText(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$gantt.TaskSeries#get(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$KeyedObjects#getObject(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYDataset#getYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getEndXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getEndY(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getOutliers(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$entity.StandardEntityCollection#getEntity(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMedianValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getQ1Value(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$ui.BasicProjectInfo#getOptionalLibraries()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$KeyedObjects2D#getColumnKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$gantt.Task#getSubtask(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$gantt.TaskSeriesCollection#getRowKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getStartYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMinRegularValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getStartXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$time.TimePeriodValues#getDataItem(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$entity.StandardEntityCollection#clone()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getY(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$ComparableObjectSeries#getDataItem(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$LegendItemCollection#get(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultWindDataset#getWindDirection(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYDataset#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getXDate(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getStartYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getStartXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$axis.SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$axis.TickUnits#getCeilingTickUnit(org.jfree.chart.axis.TickUnit)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$plot.PlotRenderingInfo#clone()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$text.TextLine#getLastTextFragment()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYZDataset#getZValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getEndXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMinOutlier(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYDataset#clone()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultXYZDataset#clone()";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,boolean)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$axis.TickUnits#getLargerTickUnit(org.jfree.chart.axis.TickUnit)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$KeyedObjects2D#getRowKey(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMaxRegularValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$gantt.TaskSeries#get(java.lang.String)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultWindDataset#getX(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getStartXValue(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$general.CombinedDataset#getDatasetInfo(int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMaxOutlier(int,int)";
  "java.util.Collections$EmptyList#get(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getQ3Value(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getYValue(int,int)" -> "org.jfree.data$xy.DefaultXYZDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getYValue(int,int)" -> "DefaultXYZDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getYValue(int,int)" -> "xy.DefaultXYZDataset#getY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getEndXValue(int,int)" -> "XYIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getEndXValue(int,int)" -> "xy.XYIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getEndXValue(int,int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.VectorSeriesCollection#getXValue(int,int)" -> "org.jfree.data$xy.VectorSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.VectorSeriesCollection#getXValue(int,int)" -> "xy.VectorSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.VectorSeriesCollection#getXValue(int,int)" -> "VectorSeriesCollection#getX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getXValue(int,int)" -> "statistics.SimpleHistogramDataset#getX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getXValue(int,int)" -> "SimpleHistogramDataset#getX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getXValue(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getEndYValue(int,int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getEndYValue(int,int)" -> "DefaultIntervalXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getEndYValue(int,int)" -> "xy.DefaultIntervalXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getZ(int,int)" -> "xy.AbstractXYZDataset#getZValue(int,int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getZ(int,int)" -> "org.jfree.data$xy.AbstractXYZDataset#getZValue(int,int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getZ(int,int)" -> "AbstractXYZDataset#getZValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getOpenValue(int,int)" -> "OHLCSeriesCollection#getOpen(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getOpenValue(int,int)" -> "time.ohlc.OHLCSeriesCollection#getOpen(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getOpenValue(int,int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getOpen(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getOpenValue(int,int)" -> "ohlc.OHLCSeriesCollection#getOpen(int,int)";
  "OHLCSeriesCollection#getOpen(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getOpen(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getOpen(int,int)" -> "SubSeriesDataset#getOpen(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getOpen(int,int)" -> "SubSeriesDataset#getOpenValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getOpen(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getOpenValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getOpen(int,int)" -> "general.SubSeriesDataset#getOpenValue(int,int)";
  "SubSeriesDataset#getOpen(int,int)" -> "org.jfree.data$general.CombinedDataset#getOpen(int,int)";
  "org.jfree.data$general.CombinedDataset#getOpen(int,int)" -> "CombinedDataset#getOpen(int,int)";
  "org.jfree.data$general.CombinedDataset#getOpen(int,int)" -> "CombinedDataset#getOpenValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getOpen(int,int)" -> "org.jfree.data$general.CombinedDataset#getOpenValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getOpen(int,int)" -> "general.SubSeriesDataset#getOpen(int,int)";
  "org.jfree.data$general.CombinedDataset#getOpen(int,int)" -> "general.CombinedDataset#getOpenValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getOpen(int,int)" -> "general.CombinedDataset#getOpen(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "org.jfree.data$xy.XYSeries#getY(int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "XYSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "org.jfree.data$xy.XYSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "xy.DefaultTableXYDataset#getX(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "XYSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "xy.XYSeries#getX(int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "org.jfree.data$xy.XYSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "XYSeries#getY(int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getX(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "DefaultTableXYDataset#getY(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "xy.XYSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "org.jfree.data$xy.XYSeries#getX(int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "xy.XYSeries#getY(int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "DefaultTableXYDataset#getX(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "xy.XYSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "XYSeries#getX(int)";
  "org.jfree.data$xy.XYSeries#getDataItem(int)" -> "xy.DefaultTableXYDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)" -> "xy.DefaultTableXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)" -> "org.jfree.data$xy.DefaultTableXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)" -> "xy.DefaultTableXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)" -> "DefaultTableXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getY(int,int)" -> "DefaultTableXYDataset#getEndY(int,int)";
  "org.jfree.data$xy.XYSeries#getY(int)" -> "org.jfree.data$xy.XYSeries#toArray()";
  "org.jfree.data$xy.XYSeries#getY(int)" -> "xy.XYSeries#toArray()";
  "org.jfree.data$xy.XYSeries#getY(int)" -> "XYSeries#toArray()";
  "org.jfree.data$xy.XYSeriesCollection#getY(int,int)" -> "XYSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XYSeriesCollection#getY(int,int)" -> "org.jfree.data$xy.XYSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XYSeriesCollection#getY(int,int)" -> "xy.XYSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XYSeriesCollection#getY(int,int)" -> "org.jfree.data$xy.XYSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XYSeriesCollection#getY(int,int)" -> "xy.XYSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XYSeriesCollection#getY(int,int)" -> "XYSeriesCollection#getEndY(int,int)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "org.jfree.chart$plot.PieLabelDistributor#spreadEvenly(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "PieLabelDistributor#isOverlap()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "plot.PieLabelDistributor#spreadEvenly(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "PieLabelDistributor#spreadEvenly(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "plot.PieLabelDistributor#adjustDownwards(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "plot.PieLabelDistributor#adjustInwards()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "org.jfree.chart$plot.PieLabelDistributor#adjustUpwards(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "org.jfree.chart$plot.PieLabelDistributor#adjustDownwards(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "PieLabelDistributor#adjustInwards()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "org.jfree.chart$plot.PieLabelDistributor#isOverlap()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "PieLabelDistributor#adjustUpwards(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "PieLabelDistributor#adjustDownwards(double,double)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "org.jfree.chart$plot.PieLabelDistributor#adjustInwards()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "plot.PieLabelDistributor#isOverlap()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#getPieLabelRecord(int)" -> "plot.PieLabelDistributor#adjustUpwards(double,double)";
  "org.jfree.chart$plot.PieLabelDistributor#spreadEvenly(double,double)" -> "org.jfree.chart$plot.PieLabelDistributor#distributeLabels(double,double)";
  "org.jfree.chart$plot.PieLabelDistributor#spreadEvenly(double,double)" -> "plot.PieLabelDistributor#distributeLabels(double,double)";
  "org.jfree.chart$plot.PieLabelDistributor#spreadEvenly(double,double)" -> "PieLabelDistributor#distributeLabels(double,double)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int,boolean)" -> "statistics.Statistics#calculateMedian(java.util.List,int,int)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int,boolean)" -> "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int,boolean)" -> "Statistics#calculateMedian(java.util.List,int,int)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int)" -> "statistics.BoxAndWhiskerCalculator#calculateQ3(java.util.List)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int)" -> "statistics.BoxAndWhiskerCalculator#calculateQ1(java.util.List)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int)" -> "BoxAndWhiskerCalculator#calculateQ3(java.util.List)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,int,int)" -> "BoxAndWhiskerCalculator#calculateQ1(java.util.List)";
  "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)" -> "time.TimePeriodValuesCollection#getEndY(int,int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)" -> "time.TimePeriodValuesCollection#getStartY(int,int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getEndY(int,int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)" -> "TimePeriodValuesCollection#getStartY(int,int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getStartY(int,int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getY(int,int)" -> "TimePeriodValuesCollection#getEndY(int,int)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMeanValue(int,int)" -> "DefaultBoxAndWhiskerXYDataset#getY(int,int)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMeanValue(int,int)" -> "statistics.DefaultBoxAndWhiskerXYDataset#getY(int,int)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getMeanValue(int,int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getStartYValue(int,int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getStartYValue(int,int)" -> "XYIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getStartYValue(int,int)" -> "xy.XYIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.DefaultWindDataset#getWindForce(int,int)" -> "xy.DefaultWindDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultWindDataset#getWindForce(int,int)" -> "org.jfree.data$xy.DefaultWindDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultWindDataset#getWindForce(int,int)" -> "DefaultWindDataset#getY(int,int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnKey(int)" -> "CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnKey(int)" -> "plot.CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.data$xy.DefaultXYZDataset#getXValue(int,int)" -> "DefaultXYZDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getXValue(int,int)" -> "xy.DefaultXYZDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getXValue(int,int)" -> "org.jfree.data$xy.DefaultXYZDataset#getX(int,int)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotInfo(int)" -> "plot.PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)";
  "org.jfree.chart$plot.PlotRenderingInfo#getSubplotInfo(int)" -> "PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipCount(int)" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipCount(int)" -> "CustomXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipCount(int)" -> "labels.CustomXYToolTipGenerator#equals(java.lang.Object)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeries#getValue(int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeries#getTimePeriod(int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeriesCollection#getXValue(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeriesCollection#getEndX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeriesCollection#getStartX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeries#getValue(int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeriesCollection#getX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "org.jfree.data$time.TimeSeriesCollection#getX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "org.jfree.data$time.TimeSeriesCollection#getEndX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeries#getTimePeriod(int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeriesCollection#getStartX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeriesCollection#getY(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeriesCollection#getXValue(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "org.jfree.data$time.TimeSeries#getValue(int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "org.jfree.data$time.TimeSeries#getTimePeriod(int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeriesCollection#getY(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "TimeSeriesCollection#getX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "time.TimeSeriesCollection#getEndX(int,int)";
  "org.jfree.data$time.TimeSeries#getDataItem(int)" -> "org.jfree.data$time.TimeSeriesCollection#getY(int,int)";
  "org.jfree.data$time.TimeSeries#getValue(int)" -> "org.jfree.data$time.TimeSeriesTableModel#getValueAt(int,int)";
  "org.jfree.data$time.TimeSeries#getValue(int)" -> "time.TimeSeriesTableModel#getValueAt(int,int)";
  "org.jfree.data$time.TimeSeries#getValue(int)" -> "TimeSeriesTableModel#getValueAt(int,int)";
  "org.jfree.data$time.TimeSeries#getTimePeriod(int)" -> "time.TimeSeries#getTimePeriods()";
  "org.jfree.data$time.TimeSeries#getTimePeriod(int)" -> "org.jfree.data$time.TimeSeries#getTimePeriods()";
  "org.jfree.data$time.TimeSeries#getTimePeriod(int)" -> "TimeSeries#getTimePeriods()";
  "org.jfree.data$time.TimeSeriesCollection#getY(int,int)" -> "TimeSeriesCollection#getStartY(int,int)";
  "org.jfree.data$time.TimeSeriesCollection#getY(int,int)" -> "time.TimeSeriesCollection#getStartY(int,int)";
  "org.jfree.data$time.TimeSeriesCollection#getY(int,int)" -> "org.jfree.data$time.TimeSeriesCollection#getEndY(int,int)";
  "org.jfree.data$time.TimeSeriesCollection#getY(int,int)" -> "time.TimeSeriesCollection#getEndY(int,int)";
  "org.jfree.data$time.TimeSeriesCollection#getY(int,int)" -> "TimeSeriesCollection#getEndY(int,int)";
  "org.jfree.data$time.TimeSeriesCollection#getY(int,int)" -> "org.jfree.data$time.TimeSeriesCollection#getStartY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getLowValue(int,int)" -> "time.ohlc.OHLCSeriesCollection#getLow(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getLowValue(int,int)" -> "OHLCSeriesCollection#getLow(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getLowValue(int,int)" -> "ohlc.OHLCSeriesCollection#getLow(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getLowValue(int,int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getLow(int,int)";
  "time.ohlc.OHLCSeriesCollection#getLow(int,int)" -> "org.jfree.data$general.CombinedDataset#getLow(int,int)";
  "org.jfree.data$general.CombinedDataset#getLow(int,int)" -> "CombinedDataset#getLow(int,int)";
  "org.jfree.data$general.CombinedDataset#getLow(int,int)" -> "org.jfree.data$general.CombinedDataset#getLowValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getLow(int,int)" -> "general.CombinedDataset#getLowValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getLow(int,int)" -> "CombinedDataset#getLowValue(int,int)";
  "CombinedDataset#getLow(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getLow(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getLow(int,int)" -> "general.SubSeriesDataset#getLow(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getLow(int,int)" -> "general.CombinedDataset#getLow(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getLow(int,int)" -> "SubSeriesDataset#getLow(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getLow(int,int)" -> "general.SubSeriesDataset#getLowValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getLow(int,int)" -> "SubSeriesDataset#getLowValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getLow(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getLowValue(int,int)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipText(int,int)" -> "CustomXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipText(int,int)" -> "labels.CustomXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getToolTipText(int,int)" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.DefaultXYDataset#getYValue(int,int)" -> "xy.DefaultXYDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultXYDataset#getYValue(int,int)" -> "org.jfree.data$xy.DefaultXYDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultXYDataset#getYValue(int,int)" -> "DefaultXYDataset#getY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getXValue(int,int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getX(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getXValue(int,int)" -> "OHLCSeriesCollection#getX(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getXValue(int,int)" -> "ohlc.OHLCSeriesCollection#getX(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getXValue(int,int)" -> "time.ohlc.OHLCSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getEndXValue(int,int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getEndXValue(int,int)" -> "DefaultIntervalXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getEndXValue(int,int)" -> "xy.DefaultIntervalXYDataset#getEndX(int,int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)" -> "xy.YIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)" -> "xy.YIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)" -> "YIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getX(int,int)" -> "YIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)" -> "xy.XIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)" -> "XIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)" -> "XIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getY(int,int)" -> "xy.XIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "statistics.DefaultStatisticalCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "DefaultMultiValueCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "DefaultStatisticalCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "statistics.DefaultMultiValueCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "DefaultBoxAndWhiskerCategoryDataset#getColumnKey(int)";
  "org.jfree.data$KeyedObjects2D#getColumnKey(int)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getColumnKey(int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getYValue(int,int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getYValue(int,int)" -> "DefaultIntervalXYDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getYValue(int,int)" -> "xy.DefaultIntervalXYDataset#getY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getStartXValue(int,int)" -> "xy.XYIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getStartXValue(int,int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getStartXValue(int,int)" -> "XYIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValues#getValue(int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "org.jfree.data$time.TimePeriodValues#getValue(int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "org.jfree.data$time.TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValuesCollection#getEndX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValues#getValue(int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValuesCollection#getY(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValuesCollection#getY(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValuesCollection#getStartX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValuesCollection#getEndX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValues#getTimePeriod(int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValuesCollection#getStartX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "org.jfree.data$time.TimePeriodValues#getTimePeriod(int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValuesCollection#getX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValuesCollection#getX(int,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "time.TimePeriodValues#getTimePeriod(int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)";
  "org.jfree.data$time.TimePeriodValues#getDataItem(int)" -> "org.jfree.data$time.TimePeriodValuesCollection#getEndX(int,int)";
  "org.jfree.data$time.TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)" -> "TimePeriodValues#recalculateBounds()";
  "org.jfree.data$time.TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)" -> "time.TimePeriodValues#recalculateBounds()";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "XIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "ohlc.OHLCSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "xy.XIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "xy.VectorSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "YIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$xy.XIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "time.ohlc.OHLCSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "xy.YIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "XYIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "OHLCSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "VectorSeries#getDataItem(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$xy.YIntervalSeries#getDataItem(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "XYIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getYHighValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "XYIntervalSeries#getYLowValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "XYIntervalSeries#getYHighValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getYLowValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "XYIntervalSeries#getXLowValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getXHighValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getYHighValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getXLowValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "XYIntervalSeries#getXHighValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "XYIntervalSeries#getX(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getYLowValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XYIntervalSeries#getX(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getX(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getXLowValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getDataItem(int)" -> "xy.XYIntervalSeries#getXHighValue(int)";
  "org.jfree.data$xy.XYIntervalSeries#getYHighValue(int)" -> "xy.XYIntervalSeriesCollection#getEndYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYHighValue(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getEndYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYHighValue(int)" -> "XYIntervalSeriesCollection#getEndYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getEndYValue(int,int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getEndYValue(int,int)" -> "XYIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getEndYValue(int,int)" -> "xy.XYIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYValue(int)" -> "xy.XYIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYValue(int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYValue(int)" -> "XYIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getYValue(int,int)" -> "XYIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getYValue(int,int)" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getYValue(int,int)" -> "xy.XYIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYLowValue(int)" -> "xy.XYIntervalSeriesCollection#getStartYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getYLowValue(int)" -> "XYIntervalSeriesCollection#getStartYValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getXHighValue(int)" -> "xy.XYIntervalSeriesCollection#getEndXValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getXHighValue(int)" -> "XYIntervalSeriesCollection#getEndXValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getXLowValue(int)" -> "xy.XYIntervalSeriesCollection#getStartXValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getXLowValue(int)" -> "XYIntervalSeriesCollection#getStartXValue(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getX(int)" -> "xy.XYIntervalSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.XYIntervalSeries#getX(int)" -> "XYIntervalSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeries#getVectorYValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeriesCollection#getVector(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeries#getYValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeriesCollection#getVectorXValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeries#getXValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeries#getXValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeriesCollection#getVector(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeriesCollection#getVectorYValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeries#getVectorXValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeries#getVectorXValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeries#getVectorXValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeries#getXValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeriesCollection#getVectorXValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "xy.VectorSeriesCollection#getXValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeries#getYValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeriesCollection#getXValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeriesCollection#getVectorYValue(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeries#getYValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeriesCollection#getVector(int,int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "org.jfree.data$xy.VectorSeries#getVectorYValue(int)";
  "org.jfree.data$xy.VectorSeries#getDataItem(int)" -> "VectorSeries#getVectorYValue(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getYValue(int,int)" -> "org.jfree.data$xy.VectorSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.VectorSeriesCollection#getYValue(int,int)" -> "VectorSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.VectorSeriesCollection#getYValue(int,int)" -> "xy.VectorSeriesCollection#getY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeriesCollection#getY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeriesCollection#getCloseValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeriesCollection#getXValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeriesCollection#getOpenValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeriesCollection#getCloseValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeries#getPeriod(int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getCloseValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeriesCollection#getCloseValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeries#getPeriod(int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeriesCollection#getOpenValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeriesCollection#getLowValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeriesCollection#getHighValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeriesCollection#getY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "time.ohlc.OHLCSeriesCollection#getLowValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeriesCollection#getY(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeries#getPeriod(int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeriesCollection#getOpenValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeriesCollection#getHighValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "org.jfree.data$time.ohlc.OHLCSeries#getPeriod(int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeriesCollection#getXValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeriesCollection#getHighValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "ohlc.OHLCSeriesCollection#getLowValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "OHLCSeriesCollection#getXValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeries#getDataItem(int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getHighValue(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getCloseValue(int,int)" -> "ohlc.OHLCSeriesCollection#getClose(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getCloseValue(int,int)" -> "time.ohlc.OHLCSeriesCollection#getClose(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getCloseValue(int,int)" -> "OHLCSeriesCollection#getClose(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getCloseValue(int,int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getClose(int,int)";
  "ohlc.OHLCSeriesCollection#getClose(int,int)" -> "org.jfree.data$general.CombinedDataset#getClose(int,int)";
  "org.jfree.data$general.CombinedDataset#getClose(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getClose(int,int)";
  "org.jfree.data$general.CombinedDataset#getClose(int,int)" -> "CombinedDataset#getCloseValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getClose(int,int)" -> "org.jfree.data$general.CombinedDataset#getCloseValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getClose(int,int)" -> "general.CombinedDataset#getCloseValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "general.SubSeriesDataset#getCloseValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getCloseValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "CombinedDataset#getClose(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "SubSeriesDataset#getCloseValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "general.SubSeriesDataset#getClose(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "general.CombinedDataset#getClose(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getClose(int,int)" -> "SubSeriesDataset#getClose(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getHighValue(int,int)" -> "ohlc.OHLCSeriesCollection#getHigh(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getHighValue(int,int)" -> "OHLCSeriesCollection#getHigh(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getHighValue(int,int)" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getHigh(int,int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getHighValue(int,int)" -> "time.ohlc.OHLCSeriesCollection#getHigh(int,int)";
  "ohlc.OHLCSeriesCollection#getHigh(int,int)" -> "org.jfree.data$general.CombinedDataset#getHigh(int,int)";
  "org.jfree.data$general.CombinedDataset#getHigh(int,int)" -> "CombinedDataset#getHigh(int,int)";
  "org.jfree.data$general.CombinedDataset#getHigh(int,int)" -> "general.CombinedDataset#getHighValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getHigh(int,int)" -> "CombinedDataset#getHighValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getHigh(int,int)" -> "org.jfree.data$general.CombinedDataset#getHighValue(int,int)";
  "CombinedDataset#getHigh(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)" -> "SubSeriesDataset#getHighValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)" -> "general.CombinedDataset#getHigh(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getHighValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)" -> "SubSeriesDataset#getHigh(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)" -> "general.SubSeriesDataset#getHighValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getHigh(int,int)" -> "general.SubSeriesDataset#getHigh(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XIntervalSeries#getX(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XIntervalSeries#getXLowValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeries#getX(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XIntervalSeries#getXHighValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeriesCollection#getEndX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeries#getXHighValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeriesCollection#getStartX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "xy.XIntervalSeries#getXLowValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeries#getXHighValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeries#getX(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "XIntervalSeries#getXLowValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.XIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.XIntervalSeries#getXLowValue(int)" -> "XIntervalSeriesCollection#getStartXValue(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getXLowValue(int)" -> "xy.XIntervalSeriesCollection#getStartXValue(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getXLowValue(int)" -> "org.jfree.data$xy.XIntervalSeriesCollection#getStartXValue(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getXHighValue(int)" -> "XIntervalSeriesCollection#getEndXValue(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getXHighValue(int)" -> "xy.XIntervalSeriesCollection#getEndXValue(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getYValue(int)" -> "xy.XIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.XIntervalSeries#getYValue(int)" -> "XIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "YIntervalSeries#getX(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.YIntervalSeries#getYHighValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "xy.YIntervalSeries#getYHighValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "xy.YIntervalSeries#getYLowValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.YIntervalSeries#getX(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "YIntervalSeries#getYLowValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "YIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.YIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "org.jfree.data$xy.YIntervalSeries#getYLowValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "YIntervalSeries#getYHighValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "xy.YIntervalSeries#getYValue(int)";
  "org.jfree.data$xy.YIntervalSeries#getDataItem(int)" -> "xy.YIntervalSeries#getX(int)";
  "org.jfree.data$xy.YIntervalSeries#getYHighValue(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getEndYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYHighValue(int)" -> "YIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYHighValue(int)" -> "YIntervalSeriesCollection#getEndYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYHighValue(int)" -> "xy.YIntervalSeriesCollection#getEndYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYHighValue(int)" -> "xy.YIntervalSeriesCollection#getEndY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getX(int)" -> "YIntervalSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getX(int)" -> "xy.YIntervalSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYValue(int)" -> "xy.YIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYValue(int)" -> "xy.YIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYValue(int)" -> "YIntervalSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYValue(int)" -> "YIntervalSeriesCollection#getYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYLowValue(int)" -> "org.jfree.data$xy.YIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYLowValue(int)" -> "YIntervalSeriesCollection#getStartYValue(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYLowValue(int)" -> "xy.YIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYLowValue(int)" -> "YIntervalSeriesCollection#getStartY(int,int)";
  "org.jfree.data$xy.YIntervalSeries#getYLowValue(int)" -> "xy.YIntervalSeriesCollection#getStartYValue(int,int)";
  "org.jfree.data$xy.DefaultXYDataset#getXValue(int,int)" -> "xy.DefaultXYDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultXYDataset#getXValue(int,int)" -> "org.jfree.data$xy.DefaultXYDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultXYDataset#getXValue(int,int)" -> "DefaultXYDataset#getX(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "xy.CategoryTableXYDataset#getX(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "org.jfree.data$time.TimeTableXYDataset#getTimePeriod(int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "TimeTableXYDataset#getXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "time.TimeTableXYDataset#getXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "org.jfree.data$time.TimeTableXYDataset#getEndXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "org.jfree.data$category.DefaultCategoryDataset#getRowKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "time.TimeTableXYDataset#getEndXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "time.TimeTableXYDataset#getTimePeriod(int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "category.DefaultCategoryDataset#getRowKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getX(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "TimeTableXYDataset#getEndXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "CategoryTableXYDataset#getX(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "org.jfree.data$time.TimeTableXYDataset#getStartXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "DefaultCategoryDataset#getRowKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "time.TimeTableXYDataset#getStartXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "org.jfree.data$time.TimeTableXYDataset#getXValue(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "TimeTableXYDataset#getTimePeriod(int)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)" -> "TimeTableXYDataset#getStartXValue(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getEndXValue(int,int)" -> "org.jfree.data$time.TimeTableXYDataset#getEndX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getEndXValue(int,int)" -> "TimeTableXYDataset#getEndX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getEndXValue(int,int)" -> "time.TimeTableXYDataset#getEndX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getStartXValue(int,int)" -> "TimeTableXYDataset#getStartX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getStartXValue(int,int)" -> "time.TimeTableXYDataset#getStartX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getStartXValue(int,int)" -> "org.jfree.data$time.TimeTableXYDataset#getStartX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getXValue(int,int)" -> "time.TimeTableXYDataset#getX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getXValue(int,int)" -> "org.jfree.data$time.TimeTableXYDataset#getX(int,int)";
  "org.jfree.data$time.TimeTableXYDataset#getXValue(int,int)" -> "TimeTableXYDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getStartYValue(int,int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getStartYValue(int,int)" -> "DefaultIntervalXYDataset#getStartY(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getStartYValue(int,int)" -> "xy.DefaultIntervalXYDataset#getStartY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getStartXValue(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getStartX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getStartXValue(int,int)" -> "statistics.SimpleHistogramDataset#getStartX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getStartXValue(int,int)" -> "SimpleHistogramDataset#getStartX(int,int)";
  "org.jfree.chart$axis.SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "axis.SegmentedTimeline#access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline#access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "org.jfree.chart$axis.SegmentedTimeline#access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline#access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "axis.SegmentedTimeline$Segment#inExceptionSegments()";
  "org.jfree.chart$axis.SegmentedTimeline#access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline$Segment#inExceptionSegments()";
  "org.jfree.chart$axis.SegmentedTimeline#access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#inExceptionSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inExceptionSegments()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#inIncludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inExceptionSegments()" -> "axis.SegmentedTimeline$Segment#inIncludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#inExceptionSegments()" -> "SegmentedTimeline$Segment#inIncludeSegments()";
  "org.jfree.chart$plot.PlotRenderingInfo#clone()" -> "PlotRenderingInfo#clone()";
  "org.jfree.chart$plot.PlotRenderingInfo#clone()" -> "plot.PlotRenderingInfo#clone()";
  "org.jfree.data$xy.DefaultXYZDataset#getZValue(int,int)" -> "DefaultXYZDataset#getZ(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getZValue(int,int)" -> "xy.DefaultXYZDataset#getZ(int,int)";
  "org.jfree.data$xy.DefaultXYZDataset#getZValue(int,int)" -> "org.jfree.data$xy.DefaultXYZDataset#getZ(int,int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "org.jfree.data$time.TimeTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "category.DefaultCategoryDataset#getColumnKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "org.jfree.data$xy.CategoryTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "DefaultCategoryDataset#getColumnKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "xy.CategoryTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "time.TimeTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "CategoryTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "TimeTableXYDataset#getSeriesKey(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)" -> "org.jfree.data$category.DefaultCategoryDataset#getColumnKey(int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getEndXValue(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getEndX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getEndXValue(int,int)" -> "statistics.SimpleHistogramDataset#getEndX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getEndXValue(int,int)" -> "SimpleHistogramDataset#getEndX(int,int)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "ChartPanel#getToolTipText(java.awt.event.MouseEvent)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "org.jfree.chart$ChartPanel#getEntityForPoint(int,int)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "org.jfree.chart$ChartPanel#mouseClicked(java.awt.event.MouseEvent)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "ChartPanel#mouseMoved(java.awt.event.MouseEvent)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "ChartPanel#getEntityForPoint(int,int)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "org.jfree.chart$ChartPanel#mouseMoved(java.awt.event.MouseEvent)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntity(double,double)" -> "ChartPanel#mouseClicked(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseClicked(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mouseClicked(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.JTable#getToolTipText(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.table$JTableHeader#getToolTipText(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.ToolTipManager#checkForTipChange(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.JList#getToolTipText(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.ToolTipManager#initiateToolTip(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.JTree#getToolTipText(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.ToolTipManager#mouseMoved(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#getToolTipText(java.awt.event.MouseEvent)" -> "javax.swing.ToolTipManager$insideTimerAction#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ChartPanel#mouseMoved(java.awt.event.MouseEvent)" -> "java.awt.TrayIcon#processMouseMotionEvent(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseMoved(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mouseMoved(java.awt.event.MouseEvent)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,boolean)" -> "Statistics#calculateMedian(java.util.List,int,int,boolean)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,boolean)" -> "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,boolean)" -> "statistics.Statistics#calculateMedian(java.util.List)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,boolean)" -> "Statistics#calculateMedian(java.util.List)";
  "org.jfree.data$statistics.Statistics#calculateMedian(java.util.List,boolean)" -> "statistics.Statistics#calculateMedian(java.util.List,int,int,boolean)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "DefaultMultiValueCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "statistics.DefaultStatisticalCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "DefaultBoxAndWhiskerCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "DefaultStatisticalCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getRowKey(int)";
  "org.jfree.data$KeyedObjects2D#getRowKey(int)" -> "statistics.DefaultMultiValueCategoryDataset#getRowKey(int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getXValue(int,int)" -> "DefaultIntervalXYDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getXValue(int,int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getXValue(int,int)" -> "xy.DefaultIntervalXYDataset#getX(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "SimpleHistogramDataset#getY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "statistics.SimpleHistogramDataset#getY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getEndYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getStartYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "SimpleHistogramDataset#getStartYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "statistics.SimpleHistogramDataset#getStartYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "statistics.SimpleHistogramDataset#getEndYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "SimpleHistogramDataset#getEndYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getYValue(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)" -> "SimpleHistogramDataset#getStartY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)" -> "SimpleHistogramDataset#getEndY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)" -> "statistics.SimpleHistogramDataset#getStartY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getStartY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)" -> "org.jfree.data$statistics.SimpleHistogramDataset#getEndY(int,int)";
  "org.jfree.data$statistics.SimpleHistogramDataset#getY(int,int)" -> "statistics.SimpleHistogramDataset#getEndY(int,int)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)" -> "urls.CustomXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)" -> "urls.CustomXYURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)" -> "org.jfree.chart$urls.CustomXYURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)" -> "org.jfree.chart$urls.CustomXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)" -> "CustomXYURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getURL(int,int)" -> "CustomXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getStartXValue(int,int)" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getStartXValue(int,int)" -> "DefaultIntervalXYDataset#getStartX(int,int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getStartXValue(int,int)" -> "xy.DefaultIntervalXYDataset#getStartX(int,int)";
  "org.jfree.data$general.CombinedDataset#getDatasetInfo(int)" -> "general.CombinedDataset#getChildPosition(org.jfree.data.general.Dataset)";
  "org.jfree.data$general.CombinedDataset#getDatasetInfo(int)" -> "general.CombinedDataset#getParent()";
  "org.jfree.data$general.CombinedDataset#getDatasetInfo(int)" -> "org.jfree.data$general.CombinedDataset#getVolume(int,int)";
  "org.jfree.data$general.CombinedDataset#getDatasetInfo(int)" -> "CombinedDataset#getChildPosition(org.jfree.data.general.Dataset)";
  "org.jfree.data$general.CombinedDataset#getDatasetInfo(int)" -> "org.jfree.data$general.CombinedDataset#getChildPosition(org.jfree.data.general.Dataset)";
  "general.CombinedDataset#getParent()" -> "org.jfree.data$general.CombinedDataset#getParent()";
  "org.jfree.data$general.CombinedDataset#getParent()" -> "CombinedDataset#getParent()";
  "org.jfree.data$general.CombinedDataset#getVolume(int,int)" -> "org.jfree.data$general.CombinedDataset#getVolumeValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getVolume(int,int)" -> "CombinedDataset#getVolume(int,int)";
  "org.jfree.data$general.CombinedDataset#getVolume(int,int)" -> "CombinedDataset#getVolumeValue(int,int)";
  "org.jfree.data$general.CombinedDataset#getVolume(int,int)" -> "general.CombinedDataset#getVolumeValue(int,int)";
  "CombinedDataset#getVolume(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)" -> "org.jfree.data$general.SubSeriesDataset#getVolumeValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)" -> "general.SubSeriesDataset#getVolumeValue(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)" -> "SubSeriesDataset#getVolume(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)" -> "general.SubSeriesDataset#getVolume(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)" -> "general.CombinedDataset#getVolume(int,int)";
  "org.jfree.data$general.SubSeriesDataset#getVolume(int,int)" -> "SubSeriesDataset#getVolumeValue(int,int)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$plot.Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$block.LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$plot.PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$renderer.category.LineRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$renderer.category.LineRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$plot.MeterPlot#drawArc(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double,java.awt.Paint,java.awt.Stroke)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$axis.Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$renderer.category.BarRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$ui.PaintSample#paintComponent(java.awt.Graphics)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$plot.dial.DialBackground#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$needle.PointerNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$renderer.category.BarRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$needle.LongNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$renderer.category.LineRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "sun.print.ProxyGraphics2D#setPaint(java.awt.Paint)" -> "org.jfree.chart$axis.ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$plot.Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "category.AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "renderer.category.AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "block.ColorBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" -> "org.jfree.chart$block.EmptyBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "LineNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "needle.ShipNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "MiddlePinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "org.jfree.chart$needle.MiddlePinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "org.jfree.chart$needle.PinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "org.jfree.chart$needle.ArrowNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "PlumNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "ShipNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "org.jfree.chart$needle.LineNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "PinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "needle.MiddlePinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "ArrowNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "needle.PinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "needle.LineNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "org.jfree.chart$needle.PlumNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "org.jfree.chart$needle.ShipNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "needle.PlumNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#defaultDisplay(java.awt.Graphics2D,java.awt.Shape)" -> "needle.ArrowNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "LineNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" -> "MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" -> "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" -> "needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$needle.MiddlePinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "needle.MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MiddlePinNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "MeterNeedle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.ArrowNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "needle.WindNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.ArrowNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "WindNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.ArrowNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" -> "org.jfree.chart$needle.WindNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.text$IconView#paint(java.awt.Graphics,java.awt.Shape)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.plaf$basic.BasicMenuItemUI#paintArrowIcon(java.awt.Graphics,sun.swing.MenuItemLayoutHelper,sun.swing.MenuItemLayoutHelper$LayoutResult,java.awt.Color)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.plaf$metal.OceanTheme$COIcon#paintIcon(java.awt.Component,java.awt.Graphics,int,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "sun.swing.table$DefaultTableCellHeaderRenderer#paintComponent(java.awt.Graphics)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.plaf$metal.OceanTheme$IFIcon#paintIcon(java.awt.Component,java.awt.Graphics,int,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.plaf$basic.BasicMenuItemUI#paintCheckIcon(java.awt.Graphics,sun.swing.MenuItemLayoutHelper,sun.swing.MenuItemLayoutHelper$LayoutResult,java.awt.Color,java.awt.Color)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.plaf$IconUIResource#paintIcon(java.awt.Component,java.awt.Graphics,int,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.text$html.ImageView#paint(java.awt.Graphics,java.awt.Shape)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.plaf$basic.BasicMenuItemUI#paintIcon(java.awt.Graphics,sun.swing.MenuItemLayoutHelper,sun.swing.MenuItemLayoutHelper$LayoutResult,java.awt.Color)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.border$MatteBorder#paintEdge(java.awt.Component,java.awt.Graphics,int,int,int,int,int,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#paintIcon(java.awt.Component,java.awt.Graphics,int,int)" -> "javax.swing.text$html.StyleSheet$ListPainter#drawIcon(java.awt.Graphics,int,int,int,int,float,java.awt.Component)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$axis.TickUnit#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.XYBoxAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#<init(double[],double[],org.jfree.data.xy.XYDataset)";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.NormalizedMatrixSeries#getItem(int)";
  "java.lang.Double#<clinit()" -> "org.jfree.data$general.WaferMapDataset#<init(int,int,java.lang.Number)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.XYPointerAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.XYTextAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$plot.dial.StandardDialRange#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$general.DefaultValueDataset#<init(double)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$plot.dial.StandardDialScale#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$util.HashUtilities#hashCodeForDoubleArray(double[])";
  "java.lang.Double#<clinit()" -> "org.jfree.data$Range#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.DefaultHighLowDataset#createNumberArray(double[])";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.XYLineAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xml.ValueHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$plot.dial.StandardDialFrame#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$renderer.AbstractRenderer#<clinit()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$gantt.Task#setPercentComplete(double)";
  "java.lang.Double#<clinit()" -> "org.jfree.data$statistics.SimpleHistogramBin#accepts(double)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#toggleAutoRange()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.TextAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$axis.AxisSpace#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.MatrixSeries#getItem(int)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.CategoryPointerAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.XYDataItem#setY(double)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$util.Rotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$plot.dial.DialTextAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#validateMinimum()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#<init(org.jfree.chart.axis.NumberAxis)";
  "java.lang.Double#<clinit()" -> "org.jfree.data$statistics.MeanAndStandardDeviation#<init(double,double)";
  "java.lang.Double#<clinit()" -> "org.jfree.data$statistics.BoxAndWhiskerItem#<init(double,double,double,double,double,double,double,double,java.util.List)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$util.HashUtilities#hashCode(int,double)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$util.RectangleInsets#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.Vector#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.data$xy.XYCoordinate#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$plot.dial.ArcDialFrame#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$annotations.XYDrawableAnnotation#hashCode()";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$plot.ThermometerPlot#isValidNumber(double)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$renderer.xy.XYStepRenderer#drawLine(java.awt.Graphics2D,java.awt.geom.Line2D,double,double,double,double)";
  "java.lang.Double#<clinit()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#validateMaximum()";
  "org.jfree.chart$axis.TickUnit#hashCode()" -> "NumberTickUnit#hashCode()";
  "org.jfree.chart$axis.TickUnit#hashCode()" -> "org.jfree.chart$axis.NumberTickUnit#hashCode()";
  "org.jfree.chart$axis.TickUnit#hashCode()" -> "axis.NumberTickUnit#hashCode()";
  "org.jfree.chart$axis.NumberTickUnit#hashCode()" -> "axis.LogAxis#hashCode()";
  "org.jfree.chart$axis.NumberTickUnit#hashCode()" -> "org.jfree.chart$axis.LogAxis#hashCode()";
  "org.jfree.chart$axis.NumberTickUnit#hashCode()" -> "LogAxis#hashCode()";
  "org.jfree.data$xy.NormalizedMatrixSeries#getItem(int)" -> "MatrixSeriesCollection#getZ(int,int)";
  "org.jfree.data$xy.NormalizedMatrixSeries#getItem(int)" -> "xy.MatrixSeriesCollection#getZ(int,int)";
  "org.jfree.data$general.WaferMapDataset#<init(int,int,java.lang.Number)" -> "WaferMapDataset#<init(int,int)";
  "org.jfree.data$general.WaferMapDataset#<init(int,int,java.lang.Number)" -> "org.jfree.data$general.WaferMapDataset#<init(int,int)";
  "org.jfree.data$general.WaferMapDataset#<init(int,int,java.lang.Number)" -> "general.WaferMapDataset#<init(int,int)";
  "org.jfree.chart$annotations.XYTextAnnotation#hashCode()" -> "XYPointerAnnotation#hashCode()";
  "org.jfree.chart$annotations.XYTextAnnotation#hashCode()" -> "annotations.XYPointerAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForDoubleArray(double[])" -> "XYPolygonAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForDoubleArray(double[])" -> "org.jfree.chart$annotations.XYPolygonAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForDoubleArray(double[])" -> "annotations.XYPolygonAnnotation#hashCode()";
  "org.jfree.data$xy.DefaultHighLowDataset#createNumberArray(double[])" -> "xy.DefaultHighLowDataset#<init(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])";
  "org.jfree.data$xy.DefaultHighLowDataset#createNumberArray(double[])" -> "DefaultHighLowDataset#<init(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "XYSmoothLineAndShapeRenderer#getBezierCurve(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,int)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "renderer.category.BarRenderer3D#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "org.jfree.chart$renderer.AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "renderer.AbstractRenderer#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "XYLine3DRenderer#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "org.jfree.chart$renderer.category.LineRenderer3D#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "AbstractRenderer#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "org.jfree.experimental$chart.renderer.xy.XYSmoothLineAndShapeRenderer#getBezierCurve(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,int)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "org.jfree.chart$renderer.category.BarRenderer3D#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "renderer.AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "xy.XYLine3DRenderer#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "org.jfree.chart$renderer.xy.XYLine3DRenderer#<clinit()";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "renderer.AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)";
  "org.jfree.chart$renderer.AbstractRenderer#<clinit()" -> "renderer.AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$renderer.category.LineRenderer3D#<clinit()" -> "renderer.category.LineRenderer3D#<clinit()";
  "org.jfree.chart$renderer.category.LineRenderer3D#<clinit()" -> "LineRenderer3D#<clinit()";
  "org.jfree.chart$renderer.category.LineRenderer3D#<clinit()" -> "category.LineRenderer3D#<clinit()";
  "org.jfree.chart$renderer.category.BarRenderer3D#<clinit()" -> "category.BarRenderer3D#<clinit()";
  "org.jfree.chart$renderer.category.BarRenderer3D#<clinit()" -> "BarRenderer3D#<clinit()";
  "org.jfree.chart$renderer.xy.XYLine3DRenderer#<clinit()" -> "renderer.xy.XYLine3DRenderer#<clinit()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "xy.CategoryTableXYDataset#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "DefaultTableXYDataset#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "xy.DefaultTableXYDataset#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "xy.XYSeriesCollection#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "org.jfree.data$xy.DefaultTableXYDataset#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "CategoryTableXYDataset#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "org.jfree.data$xy.CategoryTableXYDataset#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "org.jfree.data$xy.XYSeriesCollection#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalWidth()" -> "XYSeriesCollection#getIntervalWidth()";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#validateMinimum()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#focusLost(java.awt.event.FocusEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#validateMinimum()" -> "DefaultNumberAxisEditor#focusLost(java.awt.event.FocusEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#validateMinimum()" -> "editor.DefaultNumberAxisEditor#focusLost(java.awt.event.FocusEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#focusLost(java.awt.event.FocusEvent)" -> "java.awt.AWTEventMulticaster#focusLost(java.awt.event.FocusEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#focusLost(java.awt.event.FocusEvent)" -> "java.awt.Component#processFocusEvent(java.awt.event.FocusEvent)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<init(org.jfree.chart.axis.NumberAxis)" -> "editor.DefaultAxisEditor#getInstance(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<init(org.jfree.chart.axis.NumberAxis)" -> "DefaultAxisEditor#getInstance(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<init(org.jfree.chart.axis.NumberAxis)" -> "org.jfree.chart$editor.DefaultAxisEditor#getInstance(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "plot.dial.DialPointer$Pointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "dial.DialPointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "plot.dial.DialPointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "DialPointer$Pointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "dial.DialPointer$Pointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "DialPointer#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,double)" -> "org.jfree.chart$plot.dial.DialPointer#hashCode()";
  "org.jfree.chart$plot.dial.DialPointer#hashCode()" -> "plot.dial.DialPointer$Pin#hashCode()";
  "org.jfree.chart$plot.dial.DialPointer#hashCode()" -> "org.jfree.chart$plot.dial.DialPointer$Pin#hashCode()";
  "org.jfree.chart$plot.dial.DialPointer#hashCode()" -> "DialPointer$Pin#hashCode()";
  "org.jfree.chart$plot.dial.DialPointer#hashCode()" -> "dial.DialPointer$Pin#hashCode()";
  "org.jfree.chart$plot.Marker#clone()" -> "org.jfree.chart$plot.IntervalMarker#clone()";
  "org.jfree.chart$plot.Marker#clone()" -> "IntervalMarker#clone()";
  "org.jfree.chart$plot.Marker#clone()" -> "plot.IntervalMarker#clone()";
  "org.jfree.chart$util.RelativeDateFormat#equals(java.lang.Object)" -> "axis.PeriodAxisLabelInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.RelativeDateFormat#equals(java.lang.Object)" -> "TimeSeriesURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.RelativeDateFormat#equals(java.lang.Object)" -> "labels.HighLowItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.RelativeDateFormat#equals(java.lang.Object)" -> "org.jfree.chart$labels.HighLowItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.RelativeDateFormat#equals(java.lang.Object)" -> "PeriodAxisLabelInfo#equals(java.lang.Object)";
  "org.jfree.chart$util.RelativeDateFormat#equals(java.lang.Object)" -> "org.jfree.chart$axis.MonthDateFormat#equals(java.lang.Object)";
  "org.jfree.chart$axis.MonthDateFormat#equals(java.lang.Object)" -> "urls.TimeSeriesURLGenerator#equals(java.lang.Object)";
  "org.jfree.chart$axis.MonthDateFormat#equals(java.lang.Object)" -> "axis.MonthDateFormat#equals(java.lang.Object)";
  "org.jfree.chart$axis.MonthDateFormat#equals(java.lang.Object)" -> "java.text.MessageFormat#toPattern()";
  "org.jfree.chart$axis.MonthDateFormat#equals(java.lang.Object)" -> "MonthDateFormat#equals(java.lang.Object)";
  "org.jfree.chart$axis.MonthDateFormat#equals(java.lang.Object)" -> "HighLowItemLabelGenerator#equals(java.lang.Object)";
  "axis.MonthDateFormat#equals(java.lang.Object)" -> "org.jfree.chart$urls.TimeSeriesURLGenerator#equals(java.lang.Object)";
  "axis.MonthDateFormat#equals(java.lang.Object)" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#equals(java.lang.Object)";
  "org.jfree.chart$annotations.XYTextAnnotation#clone()" -> "annotations.XYPointerAnnotation#clone()";
  "org.jfree.chart$annotations.XYTextAnnotation#clone()" -> "org.jfree.chart$annotations.XYPointerAnnotation#clone()";
  "org.jfree.chart$annotations.XYTextAnnotation#clone()" -> "XYPointerAnnotation#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.DialCap#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.StandardDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.DialPointer#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.DialCap#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.ArcDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "DialCap#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.DialBackground#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.StandardDialRange#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.StandardDialScale#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.DialTextAnnotation#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.StandardDialRange#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.DialCap#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.ArcDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.DialTextAnnotation#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "DialBackground#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.DialValueIndicator#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.StandardDialScale#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.StandardDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.DialValueIndicator#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "StandardDialRange#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "StandardDialScale#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.DialBackground#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.StandardDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "DialPointer#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "DialTextAnnotation#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.ArcDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.DialTextAnnotation#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "StandardDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.DialValueIndicator#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "DialValueIndicator#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.StandardDialRange#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "dial.DialPointer#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "ArcDialFrame#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "plot.dial.StandardDialScale#clone()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#clone()" -> "org.jfree.chart$plot.dial.DialBackground#clone()";
  "org.jfree.chart$event.ChartChangeEventType#equals(java.lang.Object)" -> "event.ChartChangeEventType#readResolve()";
  "org.jfree.chart$event.ChartChangeEventType#equals(java.lang.Object)" -> "org.jfree.chart$event.ChartChangeEventType#readResolve()";
  "org.jfree.chart$event.ChartChangeEventType#equals(java.lang.Object)" -> "ChartChangeEventType#readResolve()";
  "org.jfree.data$category.CategoryToPieDataset#getKeys()" -> "plot.PiePlot#getMaximumExplodePercent()";
  "org.jfree.data$category.CategoryToPieDataset#getKeys()" -> "PiePlot#getMaximumExplodePercent()";
  "java.util.concurrent$CopyOnWriteArrayList$COWSubListIterator#hasNext()" -> "org.jfree.chart$servlet.ChartDeleter#valueUnbound(javax.servlet.http.HttpSessionBindingEvent)";
  "xml.KeyHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "org.jfree.data$xml.CategoryDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.CategoryDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.serializer.ToHTMLSAXHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xerces.internal.parsers.AbstractSAXParser#startElement(com.sun.org.apache.xerces.internal.xni.QName,com.sun.org.apache.xerces.internal.xni.XMLAttributes,com.sun.org.apache.xerces.internal.xni.Augmentations)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "xml.CategoryDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.StAXEvent2SAX#handleStartElement(javax.xml.stream.events.StartElement)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "CategoryDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.utils.TreeWalker#startNode(org.w3c.dom.Node)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.serializer.ToHTMLSAXHandler#closeStartTag()";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xerces.internal.jaxp.JAXPValidatorComponent$XNI2SAX#startElement(com.sun.org.apache.xerces.internal.xni.QName,com.sun.org.apache.xerces.internal.xni.XMLAttributes,com.sun.org.apache.xerces.internal.xni.Augmentations)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.serializer.TreeWalker#startNode(org.w3c.dom.Node)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.TransformerHandlerImpl#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.dtm.ref.DTMTreeWalker#startNode(int)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xml.internal.serializer.ToXMLSAXHandler#closeStartTag()";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "org.xml.sax$helpers.XMLFilterImpl#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.PieDatasetHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.StAXStream2SAX#handleStartElement()";
  "org.jfree.data$DefaultKeyedValues#clone()" -> "DefaultPieDataset#clone()";
  "org.jfree.data$DefaultKeyedValues#clone()" -> "general.DefaultPieDataset#clone()";
  "org.jfree.data$DefaultKeyedValues#clone()" -> "org.jfree.data$general.DefaultPieDataset#clone()";
  "org.jfree.data$time.Millisecond#equals(java.lang.Object)" -> "TimePeriodValue#equals(java.lang.Object)";
  "org.jfree.data$time.Millisecond#equals(java.lang.Object)" -> "time.TimePeriodValue#equals(java.lang.Object)";
  "org.jfree.data$time.Millisecond#equals(java.lang.Object)" -> "org.jfree.data$time.TimePeriodValue#equals(java.lang.Object)";
  "org.jfree.data$time.Millisecond#equals(java.lang.Object)" -> "org.jfree.data$time.TimeSeriesDataItem#equals(java.lang.Object)";
  "org.jfree.data$time.Millisecond#equals(java.lang.Object)" -> "TimeSeriesDataItem#equals(java.lang.Object)";
  "org.jfree.data$time.Millisecond#equals(java.lang.Object)" -> "time.TimeSeriesDataItem#equals(java.lang.Object)";
  "org.jfree.chart$entity.LegendItemEntity#clone()" -> "entity.StandardEntityCollection#clone()";
  "org.jfree.chart$entity.LegendItemEntity#clone()" -> "StandardEntityCollection#clone()";
  "org.jfree.chart$util.VerticalAlignment#equals(java.lang.Object)" -> "util.VerticalAlignment#readResolve()";
  "org.jfree.chart$util.VerticalAlignment#equals(java.lang.Object)" -> "org.jfree.chart$util.VerticalAlignment#readResolve()";
  "org.jfree.chart$util.VerticalAlignment#equals(java.lang.Object)" -> "VerticalAlignment#readResolve()";
  "java.awt.geom$Line2D$Double#setLine(double,double,double,double)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#drawLine(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryStepRenderer$State,org.jfree.chart.plot.PlotOrientation,double,double,double,double)";
  "java.awt.geom$Line2D$Double#setLine(double,double,double,double)" -> "org.jfree.chart$ChartPanel#drawHorizontalAxisTrace(java.awt.Graphics2D,int)";
  "java.awt.geom$Line2D$Double#setLine(double,double,double,double)" -> "org.jfree.chart$ChartPanel#drawVerticalAxisTrace(java.awt.Graphics2D,int)";
  "java.awt.Point#getY()" -> "org.jfree.chart$renderer.Outlier#compareTo(java.lang.Object)";
  "java.awt.Point#getY()" -> "org.jfree.chart$ChartPanel#translateScreenToJava2D(java.awt.Point)";
  "java.awt.Point#getY()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)";
  "java.awt.Point#getY()" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)";
  "java.awt.Point#getY()" -> "org.jfree.chart$ChartPanel#translateJava2DToScreen(java.awt.geom.Point2D)";
  "java.awt.Point#getY()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)";
  "java.awt.Point#getY()" -> "org.jfree.chart$plot.CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "java.awt.Point#getY()" -> "org.jfree.chart$plot.PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)";
  "java.awt.Point#getY()" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)";
  "java.awt.Point#getY()" -> "org.jfree.chart$plot.SpiderWebPlot#calculateLabelLocation(java.awt.geom.Rectangle2D,double,java.awt.geom.Rectangle2D,double)";
  "java.awt.Point#getY()" -> "org.jfree.chart$renderer.Outlier#getY()";
  "org.jfree.chart$plot.CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)" -> "renderer.xy.AbstractXYItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)" -> "AbstractXYItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)" -> "xy.AbstractXYItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$renderer.Outlier#getY()" -> "Outlier#overlaps(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.Outlier#getY()" -> "org.jfree.chart$renderer.Outlier#overlaps(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.Outlier#getY()" -> "renderer.Outlier#toString()";
  "org.jfree.chart$renderer.Outlier#getY()" -> "OutlierList#updateAveragedOutlier()";
  "org.jfree.chart$renderer.Outlier#getY()" -> "Outlier#toString()";
  "org.jfree.chart$renderer.Outlier#getY()" -> "renderer.OutlierList#updateAveragedOutlier()";
  "org.jfree.chart$renderer.Outlier#getY()" -> "org.jfree.chart$renderer.Outlier#toString()";
  "org.jfree.chart$renderer.Outlier#getY()" -> "renderer.Outlier#overlaps(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.Outlier#overlaps(org.jfree.chart.renderer.Outlier)" -> "org.jfree.chart$renderer.OutlierList#isOverlapped(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.Outlier#overlaps(org.jfree.chart.renderer.Outlier)" -> "OutlierList#isOverlapped(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.Outlier#overlaps(org.jfree.chart.renderer.Outlier)" -> "renderer.OutlierList#isOverlapped(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "renderer.category.StackedBarRenderer3D#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "category.BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "renderer.category.StackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "org.jfree.chart$renderer.category.GroupedStackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "GroupedStackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "StackedBarRenderer3D#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "category.StackedBarRenderer3D#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "org.jfree.chart$renderer.category.StackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "category.LayeredBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "LayeredBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "renderer.category.LayeredBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "category.StackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "category.GroupedStackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "renderer.category.BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "StackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "org.jfree.chart$renderer.category.BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$renderer.category.BarRenderer#getMaximumBarWidth()" -> "renderer.category.GroupedStackedBarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.chart$axis.CategoryAxis#clone()" -> "CategoryAxis3D#clone()";
  "org.jfree.chart$axis.CategoryAxis#clone()" -> "axis.CategoryAxis3D#clone()";
  "org.jfree.chart$axis.CategoryAxis#clone()" -> "org.jfree.chart$axis.CategoryAxis3D#clone()";
  "org.jfree.chart$axis.CategoryAxis#clone()" -> "ExtendedCategoryAxis#clone()";
  "org.jfree.chart$axis.CategoryAxis#clone()" -> "axis.ExtendedCategoryAxis#clone()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.XIntervalSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$plot.PlotRenderingInfo#getSubplotCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.DefaultWindDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$ComparableObjectSeries#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$time.TimePeriodValues#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.DefaultIntervalXYDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$statistics.SimpleHistogramDataset#getItemCount(int)";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$KeyedObjects#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$axis.MarkerAxisBand#getHeight(java.awt.Graphics2D)";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.XYSeries#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$time.TimePeriodValuesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$DefaultKeyedValues2D#getColumnCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$urls.CustomXYURLGenerator#getURLCount(int)";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$axis.TickUnits#size()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$KeyedObjects2D#getColumnCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.DefaultXYZDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.XYSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.DefaultTableXYDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$KeyedObjects2D#getRowCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$KeyToGroupMap#getGroupCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$plot.AbstractPieLabelDistributor#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$time.TimeSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$renderer.OutlierList#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.XYIntervalSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#getListCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$JFreeChart#getSubtitleCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$axis.SymbolAxis#getSymbols()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$entity.StandardEntityCollection#getEntityCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$statistics.HistogramDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$gantt.Task#getSubtaskCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$LegendItemCollection#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$gantt.TaskSeriesCollection#getRowCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$general.CombinedDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.VectorSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getItemCount(int)";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$time.TimeSeries#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.chart$ui.BasicProjectInfo#getLibraries()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$gantt.TaskSeries#getItemCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$DefaultKeyedValues2D#getRowCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.MatrixSeriesCollection#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.DefaultXYDataset#getSeriesCount()";
  "com.sun.org$apache.xerces.internal.impl.xs.util.ShortListImpl#size()" -> "org.jfree.data$xy.YIntervalSeriesCollection#getSeriesCount()";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeriesCount()" -> "plot.XYPlot#getSeriesCount()";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeriesCount()" -> "XYBarDataset#getSeriesCount()";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeriesCount()" -> "xy.XIntervalSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.XIntervalSeriesCollection#getSeriesCount()" -> "XIntervalSeriesCollection#getSeries(int)";
  "XYBarDataset#getSeriesCount()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()" -> "CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()";
  "CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()" -> "org.jfree.chart$plot.PolarPlot#getSeriesCount()";
  "CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()" -> "org.jfree.chart$plot.XYPlot#getSeriesCount()";
  "CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()" -> "org.jfree.data$general.CombinedDataset#fastAdd(org.jfree.data.general.SeriesDataset)";
  "CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()" -> "org.jfree.data$xy.XYBarDataset#getSeriesCount()";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "plot.PolarPlot#getSeriesCount()";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "XYPlot#getSeriesCount()";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getSeriesCount()";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "PolarPlot#getSeriesCount()";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "general.CombinedDataset#fastAdd(org.jfree.data.general.SeriesDataset)";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "CombinedDataset#fastAdd(org.jfree.data.general.SeriesDataset)";
  "org.jfree.data$xy.XYBarDataset#getSeriesCount()" -> "xy.XYBarDataset#getSeriesCount()";
  "org.jfree.data$xy.DefaultWindDataset#getSeriesCount()" -> "xy.DefaultWindDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultWindDataset#getSeriesCount()" -> "DefaultWindDataset#getSeriesKey(int)";
  "org.jfree.data$xy.DefaultWindDataset#getSeriesCount()" -> "DefaultWindDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultWindDataset#getSeriesCount()" -> "xy.DefaultWindDataset#getSeriesKey(int)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$general.Series#isEmpty()";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "Series#isEmpty()";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "general.Series#isEmpty()";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "org.jfree.data$category.CategoryToPieDataset#getItemCount()";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "category.LevelRenderer#calculateItemWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "renderer.category.LevelRenderer#calculateItemWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "org.jfree.chart$renderer.category.LevelRenderer#calculateItemWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "LevelRenderer#calculateItemWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "category.CategoryToPieDataset#getItemCount()";
  "org.jfree.data$gantt.TaskSeriesCollection#getColumnCount()" -> "CategoryToPieDataset#getItemCount()";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getSeriesCount()" -> "DefaultIntervalXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getSeriesCount()" -> "xy.DefaultIntervalXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getSeriesCount()" -> "xy.DefaultIntervalXYDataset#getSeriesKey(int)";
  "org.jfree.data$xy.DefaultIntervalXYDataset#getSeriesCount()" -> "DefaultIntervalXYDataset#getSeriesKey(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeriesCount()" -> "time.TimePeriodValuesCollection#getSeries(int)";
  "org.jfree.data$time.TimePeriodValuesCollection#getSeriesCount()" -> "TimePeriodValuesCollection#getSeries(int)";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "DefaultCategoryDataset#getColumnCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "org.jfree.data$category.DefaultCategoryDataset#getColumnCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "time.TimeTableXYDataset#getSeriesCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "xy.CategoryTableXYDataset#getSeriesCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "org.jfree.data$time.TimeTableXYDataset#getSeriesCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "TimeTableXYDataset#getSeriesCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "CategoryTableXYDataset#getSeriesCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "org.jfree.data$xy.CategoryTableXYDataset#getSeriesCount()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnCount()" -> "category.DefaultCategoryDataset#getColumnCount()";
  "time.TimeTableXYDataset#getSeriesCount()" -> "org.jfree.data$xy.XYDatasetTableModel#getColumnCount()";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnCount()" -> "RefineryUtilities#createTablePanel(javax.swing.table.TableModel)";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnCount()" -> "javax.swing.table$TableRowSorter$TableRowSorterModelWrapper#getColumnCount()";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnCount()" -> "util.RefineryUtilities#createTablePanel(javax.swing.table.TableModel)";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnCount()" -> "javax.swing.JTable#createDefaultColumnsFromModel()";
  "org.jfree.data$xy.XYDatasetTableModel#getColumnCount()" -> "org.jfree.chart$util.RefineryUtilities#createTablePanel(javax.swing.table.TableModel)";
  "org.jfree.data$time.TimeTableXYDataset#getSeriesCount()" -> "XYDatasetTableModel#getColumnCount()";
  "org.jfree.data$time.TimeTableXYDataset#getSeriesCount()" -> "xy.XYDatasetTableModel#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "statistics.DefaultMultiValueCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "DefaultBoxAndWhiskerCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "statistics.DefaultStatisticalCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "DefaultMultiValueCategoryDataset#getColumnCount()";
  "org.jfree.data$KeyedObjects2D#getColumnCount()" -> "DefaultStatisticalCategoryDataset#getColumnCount()";
  "org.jfree.data$xy.DefaultXYZDataset#getSeriesCount()" -> "xy.DefaultXYZDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultXYZDataset#getSeriesCount()" -> "DefaultXYZDataset#getSeriesKey(int)";
  "org.jfree.data$xy.DefaultXYZDataset#getSeriesCount()" -> "DefaultXYZDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultXYZDataset#getSeriesCount()" -> "xy.DefaultXYZDataset#getSeriesKey(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeriesCount()" -> "XYSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.XYSeriesCollection#getSeriesCount()" -> "xy.XYSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeriesCount()" -> "DefaultTableXYDataset#getSeries(int)";
  "org.jfree.data$xy.DefaultTableXYDataset#getSeriesCount()" -> "xy.DefaultTableXYDataset#getSeries(int)";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "DefaultStatisticalCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "DefaultBoxAndWhiskerCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "statistics.DefaultStatisticalCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "DefaultMultiValueCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "statistics.DefaultMultiValueCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getRowCount()";
  "org.jfree.data$KeyedObjects2D#getRowCount()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getRowCount()";
  "org.jfree.data$time.TimeSeriesCollection#getSeriesCount()" -> "time.TimeSeriesCollection#getSeries(int)";
  "org.jfree.data$time.TimeSeriesCollection#getSeriesCount()" -> "TimeSeriesCollection#getSeries(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeriesCount()" -> "time.ohlc.OHLCSeriesCollection#getSeries(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeriesCount()" -> "ohlc.OHLCSeriesCollection#getSeries(int)";
  "org.jfree.data$time.ohlc.OHLCSeriesCollection#getSeriesCount()" -> "OHLCSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeriesCount()" -> "xy.XYIntervalSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.XYIntervalSeriesCollection#getSeriesCount()" -> "XYIntervalSeriesCollection#getSeries(int)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getListCount()" -> "labels.CustomXYToolTipGenerator#getToolTipText(int,int)";
  "org.jfree.chart$labels.CustomXYToolTipGenerator#getListCount()" -> "CustomXYToolTipGenerator#getToolTipText(int,int)";
  "org.jfree.chart$JFreeChart#getSubtitleCount()" -> "JFreeChart#getSubtitle(int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowCount()" -> "org.jfree.data$gantt.TaskSeriesCollection#getSeriesCount()";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowCount()" -> "TaskSeriesCollection#getSeriesCount()";
  "org.jfree.data$gantt.TaskSeriesCollection#getRowCount()" -> "gantt.TaskSeriesCollection#getSeriesCount()";
  "org.jfree.data$gantt.TaskSeriesCollection#getSeriesCount()" -> "TaskSeriesCollection#refreshKeys()";
  "org.jfree.data$gantt.TaskSeriesCollection#getSeriesCount()" -> "TaskSeriesCollection#getSeries(int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getSeriesCount()" -> "gantt.TaskSeriesCollection#getSeries(int)";
  "org.jfree.data$gantt.TaskSeriesCollection#getSeriesCount()" -> "gantt.TaskSeriesCollection#refreshKeys()";
  "org.jfree.data$xy.VectorSeriesCollection#getSeriesCount()" -> "VectorSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.VectorSeriesCollection#getSeriesCount()" -> "xy.VectorSeriesCollection#getSeries(int)";
  "org.jfree.data$time.TimeSeries#getItemCount()" -> "TimeSeriesTableModel#getRowCount()";
  "org.jfree.data$time.TimeSeries#getItemCount()" -> "org.jfree.data$time.TimeSeriesTableModel#getRowCount()";
  "org.jfree.data$time.TimeSeries#getItemCount()" -> "time.TimeSeriesTableModel#getRowCount()";
  "org.jfree.data$time.TimeSeriesTableModel#getRowCount()" -> "javax.swing.table$TableRowSorter$TableRowSorterModelWrapper#getRowCount()";
  "org.jfree.data$time.TimeSeriesTableModel#getRowCount()" -> "javax.swing.JTable#getRowCount()";
  "org.jfree.data$time.TimeSeriesTableModel#getRowCount()" -> "javax.swing.JTable$SortManager#setViewRowHeight(int,int)";
  "org.jfree.data$time.TimeSeriesTableModel#getRowCount()" -> "javax.swing.JTable$SortManager#cacheSelection(javax.swing.event.RowSorterEvent,javax.swing.JTable$ModelChange)";
  "org.jfree.data$time.TimeSeriesTableModel#getRowCount()" -> "javax.swing.JTable$ModelChange#<init(javax.swing.JTable,javax.swing.event.TableModelEvent)";
  "org.jfree.data$time.TimeSeriesTableModel#getRowCount()" -> "javax.swing.JTable#convertRowIndexToView(int,javax.swing.JTable$ModelChange)";
  "org.jfree.chart$ui.BasicProjectInfo#getLibraries()" -> "ProjectInfo#toString()";
  "org.jfree.chart$ui.BasicProjectInfo#getLibraries()" -> "ui.ProjectInfo#toString()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "org.jfree.data$category.DefaultCategoryDataset#getRowCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "org.jfree.data$time.TimeTableXYDataset#getItemCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "TimeTableXYDataset#getItemCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "DefaultCategoryDataset#getRowCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "org.jfree.data$xy.CategoryTableXYDataset#getItemCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "CategoryTableXYDataset#getItemCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "category.DefaultCategoryDataset#getRowCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "time.TimeTableXYDataset#getItemCount()";
  "org.jfree.data$DefaultKeyedValues2D#getRowCount()" -> "xy.CategoryTableXYDataset#getItemCount()";
  "org.jfree.data$time.TimeTableXYDataset#getItemCount()" -> "TimeTableXYDataset#getItemCount(int)";
  "org.jfree.data$time.TimeTableXYDataset#getItemCount()" -> "org.jfree.data$xy.XYDatasetTableModel#getRowCount()";
  "org.jfree.data$time.TimeTableXYDataset#getItemCount()" -> "XYDatasetTableModel#getRowCount()";
  "org.jfree.data$time.TimeTableXYDataset#getItemCount()" -> "time.TimeTableXYDataset#getItemCount(int)";
  "org.jfree.data$time.TimeTableXYDataset#getItemCount()" -> "xy.XYDatasetTableModel#getRowCount()";
  "org.jfree.data$xy.CategoryTableXYDataset#getItemCount()" -> "org.jfree.data$xy.CategoryTableXYDataset#getItemCount(int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getItemCount()" -> "xy.CategoryTableXYDataset#getItemCount(int)";
  "org.jfree.data$xy.CategoryTableXYDataset#getItemCount()" -> "CategoryTableXYDataset#getItemCount(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeriesCount()" -> "xy.MatrixSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.MatrixSeriesCollection#getSeriesCount()" -> "MatrixSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.DefaultXYDataset#getSeriesCount()" -> "xy.DefaultXYDataset#getSeriesKey(int)";
  "org.jfree.data$xy.DefaultXYDataset#getSeriesCount()" -> "DefaultXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultXYDataset#getSeriesCount()" -> "xy.DefaultXYDataset#getItemCount(int)";
  "org.jfree.data$xy.DefaultXYDataset#getSeriesCount()" -> "DefaultXYDataset#getSeriesKey(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeriesCount()" -> "xy.YIntervalSeriesCollection#getSeries(int)";
  "org.jfree.data$xy.YIntervalSeriesCollection#getSeriesCount()" -> "YIntervalSeriesCollection#getSeries(int)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$Range#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$axis.NumberTickUnit#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$util.LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$time.Quarter#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xy.XYDataItem#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$axis.SegmentedTimeline#firstMondayAfter1900()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$editor.DefaultTitleEditor#attemptFontSelection()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$servlet.ServletUtilities#searchReplace(java.lang.String,java.lang.String,java.lang.String)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$axis.SegmentedTimeline#<init(long,int,int)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$editor.DefaultAxisEditor#attemptTickLabelFontSelection()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$imagemap.StandardToolTipTagFragmentGenerator#generateToolTipFragment(java.lang.String)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xml.KeyHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$time.Week#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$block.RectangleConstraint#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xy.XYCoordinate#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$entity.LegendItemEntity#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$statistics.MeanAndStandardDeviation#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$util.ObjectUtilities#convertName(java.lang.String,java.lang.Class)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$urls.StandardXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$entity.CategoryItemEntity#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$axis.SegmentedTimeline#<clinit()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$imagemap.StandardURLTagFragmentGenerator#generateURLFragment(java.lang.String)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xml.ValueHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$editor.DefaultAxisEditor#attemptLabelFontSelection()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$imagemap.OverLIBToolTipTagFragmentGenerator#generateToolTipFragment(java.lang.String)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$entity.XYItemEntity#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xy.DefaultWindDataset#seriesNameListFromDataArray(java.lang.Object[][])";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$axis.DateTickUnit#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$imagemap.DynamicDriveToolTipTagFragmentGenerator#generateToolTipFragment(java.lang.String)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#generateKeys(int,java.lang.String)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.data$xml.KeyHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$entity.CategoryLabelEntity#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$util.RectangleInsets#toString()";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$ui.FontDisplayField#fontToString(java.awt.Font)";
  "java.lang.StringBuffer#<init()" -> "org.jfree.chart$util.Size2D#toString()";
  "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" -> "org.jfree.data$xml.KeyHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" -> "ItemHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" -> "KeyHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" -> "xml.KeyHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" -> "org.jfree.data$xml.ItemHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ValueHandler#<init(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" -> "xml.ItemHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ItemHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "xml.CategorySeriesHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ItemHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "CategorySeriesHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ItemHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" -> "org.jfree.data$xml.CategorySeriesHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.chart$util.LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)" -> "java.text.NumberFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)" -> "java.text.NumberFormat#format(double)";
  "java.text.NumberFormat#format(double)" -> "org.jfree.chart$axis.LogarithmicAxis#makeTickLabel(double,boolean)";
  "java.text.NumberFormat#format(double)" -> "org.jfree.chart$axis.NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)";
  "java.text.NumberFormat#format(double)" -> "org.jfree.chart$axis.NumberTickUnit#valueToString(double)";
  "java.text.NumberFormat#format(double)" -> "org.jfree.chart$util.RelativeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)";
  "java.text.NumberFormat#format(double)" -> "org.jfree.chart$util.LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.LogarithmicAxis#makeTickLabel(double,boolean)" -> "LogarithmicAxis#makeTickLabel(double)";
  "org.jfree.chart$axis.LogarithmicAxis#makeTickLabel(double,boolean)" -> "org.jfree.chart$axis.LogarithmicAxis#makeTickLabel(double)";
  "org.jfree.chart$axis.LogarithmicAxis#makeTickLabel(double,boolean)" -> "axis.LogarithmicAxis#makeTickLabel(double)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "NumberTickUnit#toString()";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "axis.LogAxis#createTickLabel(double)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "axis.LogAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "LogAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "org.jfree.chart$axis.LogAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "org.jfree.chart$axis.LogAxis#createTickLabel(double)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "axis.NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "LogAxis#createTickLabel(double)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "axis.NumberTickUnit#toString()";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "LogarithmicAxis#makeTickLabel(double,boolean)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)";
  "org.jfree.chart$axis.NumberTickUnit#valueToString(double)" -> "axis.LogarithmicAxis#makeTickLabel(double,boolean)";
  "org.jfree.chart$util.RelativeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)" -> "java.text.DateFormat#format(java.util.Date)";
  "java.text.DateFormat#format(java.util.Date)" -> "org.jfree.chart$axis.DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)";
  "java.text.DateFormat#format(java.util.Date)" -> "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)";
  "java.text.DateFormat#format(java.util.Date)" -> "org.jfree.chart$axis.DateTickUnit#dateToString(java.util.Date)";
  "java.text.DateFormat#format(java.util.Date)" -> "org.jfree.data$time.DateRange#toString()";
  "java.text.DateFormat#format(java.util.Date)" -> "org.jfree.chart$axis.DateTickUnit#valueToString(double)";
  "java.text.DateFormat#format(java.util.Date)" -> "org.jfree.chart$axis.MonthDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)" -> "servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)" -> "ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)" -> "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)" -> "servlet.ServletUtilities#sendTempFile(java.lang.String,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)" -> "ServletUtilities#sendTempFile(java.lang.String,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)" -> "org.jfree.chart$servlet.ServletUtilities#sendTempFile(java.lang.String,javax.servlet.http.HttpServletResponse)";
  "org.jfree.chart$axis.DateTickUnit#dateToString(java.util.Date)" -> "org.jfree.chart$axis.DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateTickUnit#dateToString(java.util.Date)" -> "axis.DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateTickUnit#dateToString(java.util.Date)" -> "axis.DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateTickUnit#dateToString(java.util.Date)" -> "DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.DateTickUnit#dateToString(java.util.Date)" -> "DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)";
  "org.jfree.chart$axis.MonthDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)" -> "java.text.DateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)" -> "java.text.SimpleDateFormat#zeroPaddingNumber(int,int,int,java.lang.StringBuffer)";
  "org.jfree.chart$util.LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)" -> "java.text.NumberFormat#format(long)";
  "org.jfree.chart$axis.SegmentedTimeline#firstMondayAfter1900()" -> "org.jfree.chart$axis.SegmentedTimeline#newMondayThroughFridayTimeline()";
  "org.jfree.chart$axis.SegmentedTimeline#firstMondayAfter1900()" -> "SegmentedTimeline#newMondayThroughFridayTimeline()";
  "org.jfree.chart$axis.SegmentedTimeline#firstMondayAfter1900()" -> "axis.SegmentedTimeline#newMondayThroughFridayTimeline()";
  "org.jfree.chart$editor.DefaultTitleEditor#attemptFontSelection()" -> "org.jfree.chart$editor.DefaultTitleEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultTitleEditor#attemptFontSelection()" -> "DefaultTitleEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultTitleEditor#attemptFontSelection()" -> "editor.DefaultTitleEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$servlet.ServletUtilities#searchReplace(java.lang.String,java.lang.String,java.lang.String)" -> "servlet.ServletUtilities#searchReplace(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$servlet.ServletUtilities#searchReplace(java.lang.String,java.lang.String,java.lang.String)" -> "ServletUtilities#searchReplace(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$editor.DefaultAxisEditor#attemptTickLabelFontSelection()" -> "org.jfree.chart$editor.DefaultAxisEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultAxisEditor#attemptTickLabelFontSelection()" -> "DefaultAxisEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultAxisEditor#attemptTickLabelFontSelection()" -> "editor.DefaultAxisEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$util.ObjectUtilities#convertName(java.lang.String,java.lang.Class)" -> "ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#convertName(java.lang.String,java.lang.Class)" -> "org.jfree.chart$util.ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#convertName(java.lang.String,java.lang.Class)" -> "util.ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)" -> "ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)" -> "org.jfree.chart$util.ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)" -> "util.ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)";
  "org.jfree.chart$urls.StandardXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)" -> "urls.StandardXYZURLGenerator#generateURL(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$urls.StandardXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)" -> "StandardXYZURLGenerator#generateURL(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$urls.StandardXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)" -> "org.jfree.chart$urls.StandardXYZURLGenerator#generateURL(org.jfree.data.xy.XYZDataset,int,int)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "SegmentedTimeline$Segment#inExcludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "axis.SegmentedTimeline$Segment#dec(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#inc(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "SegmentedTimeline$Segment#getSegmentNumberRelativeToGroup()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "axis.SegmentedTimeline$Segment#inExcludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "axis.SegmentedTimeline$Segment#inc(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#dec(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "axis.SegmentedTimeline$Segment#getSegmentNumberRelativeToGroup()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "SegmentedTimeline$Segment#calculateSegmentNumber(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline,long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "SegmentedTimeline$Segment#dec(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "SegmentedTimeline$Segment#inc(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentNumberRelativeToGroup()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#calculateSegmentNumber(long)";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "SegmentedTimeline#<clinit()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "axis.SegmentedTimeline#<clinit()";
  "org.jfree.chart$axis.SegmentedTimeline#<clinit()" -> "axis.SegmentedTimeline$Segment#calculateSegmentNumber(long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#dec(long)" -> "axis.SegmentedTimeline$Segment#dec()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#dec(long)" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#dec()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#dec(long)" -> "SegmentedTimeline$Segment#dec()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline,long)" -> "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline,long)" -> "SegmentedTimeline#getSegment(long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline,long)" -> "axis.SegmentedTimeline#getSegment(long)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)" -> "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)" -> "SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)" -> "axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)" -> "org.jfree.chart$axis.SegmentedTimeline#getSegment(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)" -> "axis.SegmentedTimeline#getSegment(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegment(long)" -> "SegmentedTimeline#getSegment(java.util.Date)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)" -> "axis.SegmentedTimeline$SegmentRange#intersect(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)" -> "axis.SegmentedTimeline$BaseTimelineSegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)" -> "SegmentedTimeline$BaseTimelineSegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)" -> "org.jfree.chart$axis.SegmentedTimeline$BaseTimelineSegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)" -> "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#intersect(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#<init(org.jfree.chart.axis.SegmentedTimeline,long,long)" -> "SegmentedTimeline$SegmentRange#intersect(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#intersect(long,long)" -> "SegmentedTimeline#getExceptionSegmentCount(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$SegmentRange#intersect(long,long)" -> "axis.SegmentedTimeline#getExceptionSegmentCount(long,long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentNumberRelativeToGroup()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#inExcludeSegments()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#calculateSegmentNumber(long)" -> "SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline,long)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#calculateSegmentNumber(long)" -> "axis.SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline,long)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#generateKeys(int,java.lang.String)" -> "category.DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#generateKeys(int,java.lang.String)" -> "DefaultIntervalCategoryDataset#<init(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])";
  "org.jfree.chart$ui.FontDisplayField#fontToString(java.awt.Font)" -> "org.jfree.chart$ui.FontDisplayField#setDisplayFont(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#fontToString(java.awt.Font)" -> "FontDisplayField#setDisplayFont(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#fontToString(java.awt.Font)" -> "ui.FontDisplayField#setDisplayFont(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#setDisplayFont(java.awt.Font)" -> "ui.FontDisplayField#<init(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#setDisplayFont(java.awt.Font)" -> "FontDisplayField#<init(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#setDisplayFont(java.awt.Font)" -> "org.jfree.chart$ui.FontDisplayField#<init(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#<init(java.awt.Font)" -> "DefaultAxisEditor#<init(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$ui.FontDisplayField#<init(java.awt.Font)" -> "org.jfree.chart$editor.DefaultAxisEditor#<init(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$ui.FontDisplayField#<init(java.awt.Font)" -> "editor.DefaultAxisEditor#<init(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$editor.DefaultAxisEditor#<init(org.jfree.chart.axis.Axis)" -> "editor.DefaultNumberAxisEditor#<init(org.jfree.chart.axis.NumberAxis)";
  "org.jfree.chart$editor.DefaultAxisEditor#<init(org.jfree.chart.axis.Axis)" -> "DefaultNumberAxisEditor#<init(org.jfree.chart.axis.NumberAxis)";
  "java.util.ArrayList#hashCode()" -> "org.jfree.data$DefaultKeyedValues#hashCode()";
  "org.jfree.data$DefaultKeyedValues#hashCode()" -> "org.jfree.data$general.DefaultPieDataset#hashCode()";
  "org.jfree.data$DefaultKeyedValues#hashCode()" -> "DefaultPieDataset#hashCode()";
  "org.jfree.data$DefaultKeyedValues#hashCode()" -> "general.DefaultPieDataset#hashCode()";
  "org.jfree.chart$plot.SeriesRenderingOrder#toString()" -> "plot.SeriesRenderingOrder#equals(java.lang.Object)";
  "org.jfree.chart$plot.SeriesRenderingOrder#toString()" -> "SeriesRenderingOrder#equals(java.lang.Object)";
  "org.jfree.chart$plot.SeriesRenderingOrder#toString()" -> "org.jfree.chart$plot.SeriesRenderingOrder#equals(java.lang.Object)";
  "org.jfree.chart$plot.SeriesRenderingOrder#equals(java.lang.Object)" -> "SeriesRenderingOrder#readResolve()";
  "org.jfree.chart$plot.SeriesRenderingOrder#equals(java.lang.Object)" -> "org.jfree.chart$plot.SeriesRenderingOrder#readResolve()";
  "org.jfree.chart$plot.SeriesRenderingOrder#equals(java.lang.Object)" -> "plot.SeriesRenderingOrder#readResolve()";
  "org.jfree.data$time.Hour#getFirstMillisecond()" -> "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()";
  "org.jfree.data$time.Hour#getFirstMillisecond()" -> "org.jfree.data$time.RegularTimePeriod#getStart()";
  "org.jfree.data$time.Hour#getFirstMillisecond()" -> "time.RegularTimePeriod#getMiddleMillisecond()";
  "org.jfree.data$time.Hour#getFirstMillisecond()" -> "time.RegularTimePeriod#getStart()";
  "org.jfree.data$time.Hour#getFirstMillisecond()" -> "RegularTimePeriod#getMiddleMillisecond()";
  "org.jfree.data$time.Hour#getFirstMillisecond()" -> "RegularTimePeriod#getStart()";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()" -> "OHLCSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()" -> "DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()" -> "time.ohlc.OHLCSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()" -> "axis.DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond()" -> "ohlc.OHLCSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "time.SimpleTimePeriod#compareTo(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "time.SimpleTimePeriod#equals(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "org.jfree.data$time.TimeTableXYDataset#getXValue(org.jfree.data.time.TimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "time.RegularTimePeriod#toString()";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "time.TimePeriodValuesCollection#getX(org.jfree.data.time.TimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "time.TimeTableXYDataset#getXValue(org.jfree.data.time.TimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "TimeTableXYDataset#getXValue(org.jfree.data.time.TimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "SimpleTimePeriod#compareTo(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "TimePeriodValuesCollection#getX(org.jfree.data.time.TimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "SimpleTimePeriod#equals(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "org.jfree.data$time.SimpleTimePeriod#compareTo(java.lang.Object)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "org.jfree.data$time.TimePeriodValuesCollection#getX(org.jfree.data.time.TimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getStart()" -> "RegularTimePeriod#toString()";
  "org.jfree.chart$util.AbstractObjectList#clone()" -> "ShapeList#clone()";
  "org.jfree.chart$util.AbstractObjectList#clone()" -> "util.StrokeList#clone()";
  "org.jfree.chart$util.AbstractObjectList#clone()" -> "util.ShapeList#clone()";
  "org.jfree.chart$util.AbstractObjectList#clone()" -> "StrokeList#clone()";
  "org.jfree.chart$util.AbstractObjectList#clone()" -> "org.jfree.chart$util.ShapeList#clone()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "axis.CategoryAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "axis.DateAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "axis.PeriodAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "DateAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "PeriodAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "AxisLabelEntity#toString()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "org.jfree.chart$axis.DateAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "axis.NumberAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "org.jfree.chart$entity.AxisLabelEntity#toString()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "entity.AxisLabelEntity#toString()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "NumberAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "org.jfree.chart$axis.PeriodAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "CategoryAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "org.jfree.chart$axis.CategoryAxis#hashCode()";
  "org.jfree.chart$axis.Axis#getLabel()" -> "org.jfree.chart$axis.NumberAxis#hashCode()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "org.jfree.chart$ui.LCBLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "sun.swing.SwingUtilities2#pointIsInActualBounds(javax.swing.JList,int,java.awt.Point)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.BoxLayout#checkRequests()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicComboBoxUI#getSizeForComponent(java.awt.Component)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicComboBoxUI#getDisplaySize()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicSplitPaneUI$BasicHorizontalLayoutManager#updateComponents()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.ScrollPane#calculateChildSize()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.ViewportLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.FlowLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "org.jfree.chart$ui.LCBLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.BorderLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.GridBagLayout#GetLayoutInfo(java.awt.Container,int)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$LayerUI#getPreferredSize(javax.swing.JComponent)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.GridLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.table$TableColumn#sizeWidthToFit()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.ScrollPaneLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicSplitPaneUI$BasicHorizontalLayoutManager#getPreferredSizeOfComponent(java.awt.Component)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JRootPane$RootLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JComponent#paramString()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.PopupFactory$ContainerPopup#pack()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicSplitPaneUI$BasicHorizontalLayoutManager#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.CardLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JSpinner$DefaultEditor#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JViewport#getViewSize()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicSplitPaneUI$BasicHorizontalLayoutManager#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "sun.swing.SwingUtilities2#pointOutsidePrefSize(javax.swing.JTable,int,int,java.awt.Point)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JSlider#updateLabelSizes()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.BorderLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.text$ComponentView$Invalidator#cacheChildSizes()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "LCBLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "ui.LCBLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "java.awt.FlowLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JSlider#updateLabelUIs()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.ScrollPaneLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicComboPopup#getPopupHeightForRowCount(int)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "ui.LCBLayout#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicComboBoxUI$Handler#preferredLayoutSize(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.plaf$basic.BasicSplitPaneUI$BasicHorizontalLayoutManager#addLayoutComponent(java.lang.String,java.awt.Component)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.JList#updateFixedCellSize()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "sun.swing.JLightweightFrame#setContent(sun.swing.LightweightContent)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "LCBLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.OverlayLayout#checkRequests()";
  "org.jfree.chart$ui.StrokeSample#getPreferredSize()" -> "javax.swing.ViewportLayout#layoutContainer(java.awt.Container)";
  "org.jfree.chart$ui.LCBLayout#preferredLayoutSize(java.awt.Container)" -> "java.awt.Container#preferredSize()";
  "org.jfree.chart$ui.LCBLayout#layoutContainer(java.awt.Container)" -> "java.awt.Container#layout()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.PolarPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.FastScatterPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.ThermometerPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "org.jfree.chart$plot.WaferMapPlot#drawWaferEdge(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "editor.DefaultPlotEditor#attemptOrientationSelection()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "renderer.xy.XYStepAreaRenderer#restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "FastScatterPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "CategoryStepRenderer#drawLine(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryStepRenderer$State,org.jfree.chart.plot.PlotOrientation,double,double,double,double)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "PlotOrientation#<clinit()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "ThermometerPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.PlotOrientation#readResolve()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "org.jfree.chart$plot.FastScatterPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "org.jfree.chart$plot.PlotOrientation#readResolve()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.PlotOrientation#<clinit()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "org.jfree.chart$plot.ThermometerPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "DefaultPlotEditor#attemptOrientationSelection()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "XYStepAreaRenderer#restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.WaferMapPlot#drawWaferEdge(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "PolarPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "category.CategoryStepRenderer#drawLine(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryStepRenderer$State,org.jfree.chart.plot.PlotOrientation,double,double,double,double)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "PlotOrientation#readResolve()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "category.LineRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "LineRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "org.jfree.chart$plot.PolarPlot#getOrientation()";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "renderer.category.LineRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "plot.CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "renderer.category.CategoryStepRenderer#drawLine(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryStepRenderer$State,org.jfree.chart.plot.PlotOrientation,double,double,double,double)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "xy.XYStepAreaRenderer#restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PlotOrientation#<clinit()" -> "WaferMapPlot#drawWaferEdge(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "plot.PolarPlot#getOrientation()" -> "org.jfree.chart$ChartPanel#chartChanged(org.jfree.chart.event.ChartChangeEvent)";
  "org.jfree.chart$ChartPanel#chartChanged(org.jfree.chart.event.ChartChangeEvent)" -> "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)";
  "org.jfree.chart$ChartPanel#chartChanged(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#fireChartChanged()";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "org.jfree.chart$JFreeChart#fireChartChanged()";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#setTextAntiAlias(java.lang.Object)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "JFreeChart#setNotify(boolean)";
  "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)" -> "org.jfree.chart$JFreeChart#setNotify(boolean)";
  "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)" -> "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)";
  "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)" -> "JFreeChart#setTextAntiAlias(boolean)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBorderStroke(java.awt.Stroke)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBorderVisible(boolean)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setRenderingHints(java.awt.RenderingHints)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBackgroundImage(java.awt.Image)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#removeSubtitle(org.jfree.chart.title.Title)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBorderPaint(java.awt.Paint)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBackgroundImageAlpha(float)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBackgroundPaint(java.awt.Paint)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "org.jfree.chart$JFreeChart#setBorderVisible(boolean)";
  "org.jfree.chart$JFreeChart#fireChartChanged()" -> "JFreeChart#setBackgroundImageAlignment(int)";
  "org.jfree.chart$plot.FastScatterPlot#getOrientation()" -> "ChartPanel#chartChanged(org.jfree.chart.event.ChartChangeEvent)";
  "org.jfree.chart$plot.DatasetRenderingOrder#equals(java.lang.Object)" -> "org.jfree.chart$plot.DatasetRenderingOrder#readResolve()";
  "org.jfree.chart$plot.DatasetRenderingOrder#equals(java.lang.Object)" -> "DatasetRenderingOrder#readResolve()";
  "org.jfree.chart$plot.DatasetRenderingOrder#equals(java.lang.Object)" -> "plot.DatasetRenderingOrder#readResolve()";
  "org.jfree.chart$renderer.category.LineRenderer3D#getYOffset()" -> "axis.CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$renderer.category.LineRenderer3D#getYOffset()" -> "renderer.category.LineRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.LineRenderer3D#getYOffset()" -> "LineRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.LineRenderer3D#getYOffset()" -> "CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$renderer.category.LineRenderer3D#getYOffset()" -> "org.jfree.chart$axis.CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$renderer.category.LineRenderer3D#getYOffset()" -> "category.LineRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.JLabel#setIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.AbstractButton#setDisabledSelectedIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.plaf$IconUIResource#getIconHeight()";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.JLabel#setDisabledIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.SwingUtilities#layoutCompoundLabelImpl(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "sun.swing.MenuItemLayoutHelper#calcWidthsAndHeights()";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.AbstractButton#setIcon(javax.swing.Icon)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.border$MatteBorder#paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.text$IconView#getPreferredSpan(int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconHeight()" -> "javax.swing.border$MatteBorder#computeInsets(java.awt.Insets)";
  "org.jfree.chart$util.GradientPaintTransformType#equals(java.lang.Object)" -> "org.jfree.chart$util.GradientPaintTransformType#readResolve()";
  "org.jfree.chart$util.GradientPaintTransformType#equals(java.lang.Object)" -> "StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)";
  "org.jfree.chart$util.GradientPaintTransformType#equals(java.lang.Object)" -> "util.StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)";
  "org.jfree.chart$util.GradientPaintTransformType#equals(java.lang.Object)" -> "util.GradientPaintTransformType#readResolve()";
  "org.jfree.chart$util.GradientPaintTransformType#equals(java.lang.Object)" -> "org.jfree.chart$util.StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)";
  "org.jfree.chart$util.GradientPaintTransformType#equals(java.lang.Object)" -> "GradientPaintTransformType#readResolve()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)" -> "dial.DialBackground#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)" -> "DialBackground#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)" -> "plot.dial.DialBackground#draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$entity.ChartEntity#clone()" -> "LegendItemEntity#clone()";
  "org.jfree.chart$entity.ChartEntity#clone()" -> "entity.LegendItemEntity#clone()";
  "org.jfree.data$time.TimePeriodAnchor#equals(java.lang.Object)" -> "TimePeriodAnchor#readResolve()";
  "org.jfree.data$time.TimePeriodAnchor#equals(java.lang.Object)" -> "org.jfree.data$time.TimePeriodAnchor#readResolve()";
  "org.jfree.data$time.TimePeriodAnchor#equals(java.lang.Object)" -> "time.TimePeriodAnchor#readResolve()";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$util.ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$util.AbstractObjectList#clear()";
  "java.util.Arrays#<clinit()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#equals(java.lang.Object)";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$util.ArrayUtilities#equal(float[][],float[][])";
  "java.util.Arrays#<clinit()" -> "org.jfree.data$xy.DefaultOHLCDataset#sortDataByDate()";
  "java.util.Arrays#<clinit()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnKeys()";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$JFreeChartInfo#<init()";
  "java.util.Arrays#<clinit()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowKeys()";
  "java.util.Arrays#<clinit()" -> "org.jfree.data$category.DefaultIntervalCategoryDataset#equal(java.lang.Number[][],java.lang.Number[][])";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$axis.QuarterDateFormat#equals(java.lang.Object)";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$plot.ThermometerPlot#equal(double[][],double[][])";
  "java.util.Arrays#<clinit()" -> "org.jfree.chart$util.ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnKeys()" -> "org.jfree.chart$plot.CategoryPlot#getCategories()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnKeys()" -> "plot.CategoryPlot#getCategories()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnKeys()" -> "CategoryPlot#getCategories()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnKeys()" -> "category.CategoryToPieDataset#getKeys()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getColumnKeys()" -> "CategoryToPieDataset#getKeys()";
  "org.jfree.chart$JFreeChartInfo#<init()" -> "JFreeChart#<clinit()";
  "org.jfree.chart$JFreeChartInfo#<init()" -> "org.jfree.chart$JFreeChart#<clinit()";
  "org.jfree.chart$JFreeChart#<clinit()" -> "JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)";
  "org.jfree.chart$JFreeChart#<clinit()" -> "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)";
  "org.jfree.chart$JFreeChart#<clinit()" -> "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)";
  "org.jfree.chart$JFreeChart#<clinit()" -> "JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)";
  "org.jfree.chart$JFreeChart#<clinit()" -> "JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)";
  "org.jfree.chart$JFreeChart#<clinit()" -> "JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)";
  "org.jfree.chart$JFreeChart#<clinit()" -> "JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#equal(java.lang.Number[][],java.lang.Number[][])" -> "DefaultIntervalCategoryDataset#equals(java.lang.Object)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#equal(java.lang.Number[][],java.lang.Number[][])" -> "category.DefaultIntervalCategoryDataset#equals(java.lang.Object)";
  "java.util.ArrayList#size()" -> "org.jfree.data$DefaultKeyedValues#rebuildIndex()";
  "java.util.ArrayList#size()" -> "org.jfree.chart$urls.CustomXYURLGenerator#getListCount()";
  "java.util.ArrayList#size()" -> "org.jfree.data$jdbc.JDBCXYDataset#getItemCount(int)";
  "java.util.ArrayList#size()" -> "org.jfree.chart$urls.CustomPieURLGenerator#getListCount()";
  "java.util.ArrayList#size()" -> "org.jfree.chart$util.ObjectUtilities#parseVersions(java.lang.String)";
  "org.jfree.data$DefaultKeyedValues#rebuildIndex()" -> "DefaultKeyedValues#removeValue(int)";
  "org.jfree.data$DefaultKeyedValues#rebuildIndex()" -> "org.jfree.data$DefaultKeyedValues#removeValue(int)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getListCount()" -> "CustomXYURLGenerator#getURL(int,int)";
  "org.jfree.chart$urls.CustomXYURLGenerator#getListCount()" -> "urls.CustomXYURLGenerator#getURL(int,int)";
  "org.jfree.data$jdbc.JDBCXYDataset#getItemCount(int)" -> "org.jfree.data$jdbc.JDBCXYDataset#getItemCount()";
  "org.jfree.data$jdbc.JDBCXYDataset#getItemCount(int)" -> "jdbc.JDBCXYDataset#getItemCount()";
  "org.jfree.data$jdbc.JDBCXYDataset#getItemCount(int)" -> "JDBCXYDataset#getItemCount()";
  "org.jfree.chart$urls.CustomPieURLGenerator#getListCount()" -> "urls.CustomPieURLGenerator#getURL(java.lang.Comparable,int)";
  "org.jfree.chart$urls.CustomPieURLGenerator#getListCount()" -> "CustomPieURLGenerator#getURL(java.lang.Comparable,int)";
  "org.jfree.data$time.Hour#peg(java.util.Calendar)" -> "time.Hour#<init(int,org.jfree.data.time.Day)";
  "org.jfree.data$time.Hour#peg(java.util.Calendar)" -> "Hour#<init(int,org.jfree.data.time.Day)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "plot.dial.DialPointer$Pin#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "dial.DialPointer$Pin#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "plot.dial.DialPointer$Pointer#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "dial.DialPointer$Pointer#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "DialPointer$Pin#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.DialPointer#equals(java.lang.Object)" -> "DialPointer$Pointer#equals(java.lang.Object)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Hour#getLastMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Hour#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Month#getLastMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Minute#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Day#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Year#getLastMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Day#getLastMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Quarter#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Quarter#getLastMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.chart$axis.SegmentedTimeline#getTimeFromLong(long)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Year#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.chart$axis.SegmentedTimeline#getTime(java.util.Date)";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.SpreadsheetDate#toDate()";
  "java.util.Calendar#set(int,int,int,int,int,int)" -> "org.jfree.data$time.Month#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "DynamicTimeSeriesCollection#getEndX(int,int)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "org.jfree.chart$axis.PeriodAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "org.jfree.chart$axis.PeriodAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getEndX(int,int)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "PeriodAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "axis.PeriodAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "Minute#peg(java.util.Calendar)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "time.Minute#peg(java.util.Calendar)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "axis.PeriodAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "time.DynamicTimeSeriesCollection#getEndX(int,int)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Minute#getLastMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Minute#peg(java.util.Calendar)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)" -> "time.DynamicTimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)" -> "org.jfree.data$time.TimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)" -> "TimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)" -> "time.TimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)" -> "DynamicTimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)" -> "time.DynamicTimeSeriesCollection#getX(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getX(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)" -> "DynamicTimeSeriesCollection#getX(int,int)";
  "org.jfree.data$time.Minute#peg(java.util.Calendar)" -> "Minute#<init(int,org.jfree.data.time.Hour)";
  "org.jfree.data$time.Minute#peg(java.util.Calendar)" -> "time.Minute#<init(int,org.jfree.data.time.Hour)";
  "org.jfree.data$time.Hour#getLastMillisecond(java.util.Calendar)" -> "time.Hour#peg(java.util.Calendar)";
  "org.jfree.data$time.Hour#getLastMillisecond(java.util.Calendar)" -> "Hour#peg(java.util.Calendar)";
  "org.jfree.data$time.Hour#getFirstMillisecond(java.util.Calendar)" -> "DynamicTimeSeriesCollection#getStartX(int,int)";
  "org.jfree.data$time.Hour#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getStartX(int,int)";
  "org.jfree.data$time.Hour#getFirstMillisecond(java.util.Calendar)" -> "time.DynamicTimeSeriesCollection#getStartX(int,int)";
  "org.jfree.data$time.Month#getLastMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Month#peg(java.util.Calendar)";
  "org.jfree.data$time.Month#getLastMillisecond(java.util.Calendar)" -> "time.Month#peg(java.util.Calendar)";
  "org.jfree.data$time.Month#getLastMillisecond(java.util.Calendar)" -> "Month#peg(java.util.Calendar)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "org.jfree.data$time.Month#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "time.Month#<init(int,org.jfree.data.time.Year)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "time.Month#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "time.Month#<init(int,int)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "Month#<init(int,org.jfree.data.time.Year)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "Month#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Month#peg(java.util.Calendar)" -> "Month#<init(int,int)";
  "org.jfree.data$time.Month#<init(java.util.Date,java.util.TimeZone)" -> "Month#<init(java.util.Date)";
  "org.jfree.data$time.Month#<init(java.util.Date,java.util.TimeZone)" -> "time.Month#<init(java.util.Date)";
  "org.jfree.data$time.Month#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Month#<init(java.util.Date)";
  "org.jfree.data$time.Month#<init(java.util.Date)" -> "time.Month#<init()";
  "org.jfree.data$time.Month#<init(java.util.Date)" -> "org.jfree.data$time.Month#<init()";
  "org.jfree.data$time.Month#<init(java.util.Date)" -> "Month#<init()";
  "org.jfree.data$time.Day#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Day#peg(java.util.Calendar)";
  "org.jfree.data$time.Day#getFirstMillisecond(java.util.Calendar)" -> "Day#peg(java.util.Calendar)";
  "org.jfree.data$time.Day#getFirstMillisecond(java.util.Calendar)" -> "time.Day#peg(java.util.Calendar)";
  "org.jfree.data$time.Day#peg(java.util.Calendar)" -> "time.Day#<init(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.Day#peg(java.util.Calendar)" -> "Day#<init(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Second#peg(java.util.Calendar)";
  "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Second#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)" -> "time.Second#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)" -> "Second#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)" -> "Second#peg(java.util.Calendar)";
  "org.jfree.data$time.Second#getFirstMillisecond(java.util.Calendar)" -> "time.Second#peg(java.util.Calendar)";
  "org.jfree.data$time.Second#peg(java.util.Calendar)" -> "time.Second#<init(int,org.jfree.data.time.Minute)";
  "org.jfree.data$time.Second#peg(java.util.Calendar)" -> "Second#<init(int,org.jfree.data.time.Minute)";
  "org.jfree.data$time.Year#getLastMillisecond(java.util.Calendar)" -> "Year#peg(java.util.Calendar)";
  "org.jfree.data$time.Year#getLastMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Year#peg(java.util.Calendar)";
  "org.jfree.data$time.Year#getLastMillisecond(java.util.Calendar)" -> "time.Year#peg(java.util.Calendar)";
  "org.jfree.data$time.Year#peg(java.util.Calendar)" -> "time.Year#<init(int)";
  "org.jfree.data$time.Year#peg(java.util.Calendar)" -> "Year#<init(int)";
  "org.jfree.data$time.Year#peg(java.util.Calendar)" -> "org.jfree.data$time.Year#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Year#peg(java.util.Calendar)" -> "Year#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Year#peg(java.util.Calendar)" -> "time.Year#<init(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.Year#<init(java.util.Date,java.util.TimeZone)" -> "Year#<init(java.util.Date)";
  "org.jfree.data$time.Year#<init(java.util.Date,java.util.TimeZone)" -> "time.Year#<init(java.util.Date)";
  "org.jfree.data$time.Year#<init(java.util.Date,java.util.TimeZone)" -> "org.jfree.data$time.Year#<init(java.util.Date)";
  "org.jfree.data$time.Year#<init(java.util.Date)" -> "Year#<init()";
  "org.jfree.data$time.Year#<init(java.util.Date)" -> "time.Year#<init()";
  "org.jfree.data$time.Year#<init(java.util.Date)" -> "org.jfree.data$time.Year#<init()";
  "org.jfree.data$time.Quarter#getFirstMillisecond(java.util.Calendar)" -> "Quarter#peg(java.util.Calendar)";
  "org.jfree.data$time.Quarter#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Quarter#peg(java.util.Calendar)";
  "org.jfree.data$time.Quarter#getFirstMillisecond(java.util.Calendar)" -> "time.Quarter#peg(java.util.Calendar)";
  "org.jfree.data$time.Quarter#peg(java.util.Calendar)" -> "time.Quarter#<init(int,int)";
  "org.jfree.data$time.Quarter#peg(java.util.Calendar)" -> "Quarter#<init(int,int)";
  "org.jfree.data$time.Quarter#peg(java.util.Calendar)" -> "Quarter#<init(int,org.jfree.data.time.Year)";
  "org.jfree.data$time.Quarter#peg(java.util.Calendar)" -> "time.Quarter#<init(int,org.jfree.data.time.Year)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Millisecond#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)" -> "Millisecond#peg(java.util.Calendar)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Millisecond#peg(java.util.Calendar)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)" -> "time.Millisecond#peg(java.util.Calendar)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)" -> "time.Millisecond#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond(java.util.Calendar)" -> "Millisecond#getLastMillisecond(java.util.Calendar)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$editor.DefaultTitleEditor#attemptPaintSelection()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$plot.dial.ArcDialFrame#<init(double,double)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$needle.MeterNeedle#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$util.PaintUtilities#stringToColor(java.lang.String)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$ChartColor#createDefaultPaintArray()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#<init(int)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$editor.DefaultNumberAxisEditor#attemptGridPaintSelection()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$editor.DefaultChartEditor#attemptModifyBackgroundPaint()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$plot.dial.StandardDialFrame#<init()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$renderer.GrayPaintScale#getPaint(double)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$editor.DefaultAxisEditor#attemptModifyLabelPaint()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$block.LabelBlock#<clinit()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$annotations.XYTextAnnotation#<clinit()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$editor.DefaultPlotEditor#attemptBackgroundPaintSelection()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$ChartPanel#drawZoomRectangle(java.awt.Graphics2D)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$plot.dial.DialCap#<init()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$annotations.TextAnnotation#<clinit()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$ChartColor#<clinit()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$editor.DefaultPlotEditor#attemptOutlinePaintSelection()";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$plot.dial.DialPointer$Pin#<init(int)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$plot.dial.StandardDialScale#<init(double,double,double,double,double,int)";
  "java.awt.Color#<clinit()" -> "org.jfree.chart$text.TextFragment#<clinit()";
  "org.jfree.chart$plot.dial.ArcDialFrame#<init(double,double)" -> "plot.dial.ArcDialFrame#<init()";
  "org.jfree.chart$plot.dial.ArcDialFrame#<init(double,double)" -> "org.jfree.chart$plot.dial.ArcDialFrame#<init()";
  "org.jfree.chart$plot.dial.ArcDialFrame#<init(double,double)" -> "ArcDialFrame#<init()";
  "org.jfree.chart$plot.dial.ArcDialFrame#<init(double,double)" -> "dial.ArcDialFrame#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "MeterNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$needle.MeterNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init(java.awt.Paint,java.awt.Paint,java.awt.Paint)" -> "needle.MeterNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.LineNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "PinNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "PointerNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.LongNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.PointerNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.ArrowNeedle#<init(boolean)";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.PointerNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "PlumNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.PlumNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.ShipNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.LineNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "LongNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.LongNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.PinNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "MiddlePinNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.PinNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.ArrowNeedle#<init(boolean)";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.MiddlePinNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.MiddlePinNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "org.jfree.chart$needle.PlumNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "ArrowNeedle#<init(boolean)";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "LineNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "ShipNeedle#<init()";
  "org.jfree.chart$needle.MeterNeedle#<init()" -> "needle.ShipNeedle#<init()";
  "org.jfree.chart$needle.ArrowNeedle#<init(boolean)" -> "WindNeedle#<init()";
  "org.jfree.chart$needle.ArrowNeedle#<init(boolean)" -> "org.jfree.chart$needle.WindNeedle#<init()";
  "org.jfree.chart$needle.ArrowNeedle#<init(boolean)" -> "needle.WindNeedle#<init()";
  "org.jfree.chart$ChartColor#createDefaultPaintArray()" -> "DefaultDrawingSupplier#<clinit()";
  "org.jfree.chart$ChartColor#createDefaultPaintArray()" -> "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "org.jfree.chart$plot.DefaultDrawingSupplier#<init()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "plot.DefaultDrawingSupplier#<clinit()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "org.jfree.chart$plot.DefaultDrawingSupplier#<init(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "DefaultDrawingSupplier#<init(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "plot.DefaultDrawingSupplier#createStandardSeriesShapes()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "plot.DefaultDrawingSupplier#<init(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "DefaultDrawingSupplier#createStandardSeriesShapes()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "plot.DefaultDrawingSupplier#<init()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "DefaultDrawingSupplier#<init()";
  "org.jfree.chart$plot.DefaultDrawingSupplier#<clinit()" -> "org.jfree.chart$plot.DefaultDrawingSupplier#createStandardSeriesShapes()";
  "org.jfree.chart$plot.dial.DialPointer$Pointer#<init(int)" -> "org.jfree.chart$plot.dial.DialPointer$Pointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer$Pointer#<init(int)" -> "dial.DialPointer$Pointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer$Pointer#<init(int)" -> "plot.dial.DialPointer$Pointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer$Pointer#<init(int)" -> "DialPointer$Pointer#<init()";
  "org.jfree.chart$editor.DefaultChartEditor#attemptModifyBackgroundPaint()" -> "DefaultChartEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultChartEditor#attemptModifyBackgroundPaint()" -> "org.jfree.chart$editor.DefaultChartEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$editor.DefaultChartEditor#attemptModifyBackgroundPaint()" -> "editor.DefaultChartEditor#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$block.LabelBlock#<clinit()" -> "LabelBlock#<clinit()";
  "org.jfree.chart$block.LabelBlock#<clinit()" -> "block.LabelBlock#<clinit()";
  "org.jfree.chart$annotations.XYTextAnnotation#<clinit()" -> "XYTextAnnotation#<init(java.lang.String,double,double)";
  "org.jfree.chart$annotations.XYTextAnnotation#<clinit()" -> "XYTextAnnotation#<clinit()";
  "org.jfree.chart$annotations.XYTextAnnotation#<clinit()" -> "annotations.XYTextAnnotation#<clinit()";
  "org.jfree.chart$annotations.XYTextAnnotation#<clinit()" -> "annotations.XYTextAnnotation#<init(java.lang.String,double,double)";
  "org.jfree.chart$annotations.TextAnnotation#<clinit()" -> "TextAnnotation#<clinit()";
  "org.jfree.chart$annotations.TextAnnotation#<clinit()" -> "TextAnnotation#<init(java.lang.String)";
  "org.jfree.chart$annotations.TextAnnotation#<clinit()" -> "annotations.TextAnnotation#<clinit()";
  "org.jfree.chart$annotations.TextAnnotation#<clinit()" -> "annotations.TextAnnotation#<init(java.lang.String)";
  "org.jfree.chart$ChartColor#<clinit()" -> "ChartColor#createDefaultPaintArray()";
  "org.jfree.chart$ChartColor#<clinit()" -> "ChartColor#<clinit()";
  "org.jfree.chart$plot.dial.DialPointer$Pin#<init(int)" -> "dial.DialPointer$Pin#<init()";
  "org.jfree.chart$plot.dial.DialPointer$Pin#<init(int)" -> "org.jfree.chart$plot.dial.DialPointer$Pin#<init()";
  "org.jfree.chart$plot.dial.DialPointer$Pin#<init(int)" -> "DialPointer$Pin#<init()";
  "org.jfree.chart$plot.dial.DialPointer$Pin#<init(int)" -> "plot.dial.DialPointer$Pin#<init()";
  "org.jfree.chart$plot.dial.StandardDialScale#<init(double,double,double,double,double,int)" -> "org.jfree.chart$plot.dial.StandardDialScale#<init()";
  "org.jfree.chart$plot.dial.StandardDialScale#<init(double,double,double,double,double,int)" -> "StandardDialScale#<init()";
  "org.jfree.chart$plot.dial.StandardDialScale#<init(double,double,double,double,double,int)" -> "dial.StandardDialScale#<init()";
  "org.jfree.chart$plot.dial.StandardDialScale#<init(double,double,double,double,double,int)" -> "plot.dial.StandardDialScale#<init()";
  "org.jfree.chart$text.TextFragment#<clinit()" -> "text.TextFragment#<clinit()";
  "org.jfree.chart$text.TextFragment#<clinit()" -> "TextFragment#<clinit()";
  "org.jfree.data$xy.XYCoordinate#<init(double,double)" -> "org.jfree.data$xy.XYCoordinate#<init()";
  "org.jfree.data$xy.XYCoordinate#<init(double,double)" -> "xy.XYCoordinate#<init()";
  "org.jfree.data$xy.XYCoordinate#<init(double,double)" -> "XYCoordinate#<init()";
  "org.jfree.chart$plot.PlotOrientation#toString()" -> "plot.PlotOrientation#equals(java.lang.Object)";
  "org.jfree.chart$plot.PlotOrientation#toString()" -> "PlotOrientation#equals(java.lang.Object)";
  "org.jfree.chart$plot.PlotOrientation#toString()" -> "org.jfree.chart$plot.PlotOrientation#equals(java.lang.Object)";
  "java.awt.geom$Rectangle2D$Double#setRect(double,double,double,double)" -> "org.jfree.chart$axis.AxisSpace#expand(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "java.awt.geom$Rectangle2D$Double#setRect(double,double,double,double)" -> "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)";
  "java.awt.geom$Rectangle2D$Double#setRect(double,double,double,double)" -> "org.jfree.chart$util.Align#align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)";
  "java.awt.geom$Rectangle2D$Double#setRect(double,double,double,double)" -> "org.jfree.chart$ChartRenderingInfo#clear()";
  "java.awt.geom$Rectangle2D$Double#setRect(double,double,double,double)" -> "org.jfree.chart$axis.AxisSpace#shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "block.AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "block.AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "org.jfree.chart$block.AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#trim(java.awt.geom.Rectangle2D)" -> "block.AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.Align#align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)" -> "org.jfree.chart$plot.Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.Align#align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)" -> "plot.Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.Align#align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)" -> "Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "BarRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "category.BarRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "renderer.category.BarRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "RegularTimePeriod#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "Day#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.RegularTimePeriod#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "FixedMillisecond#previous()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "Quarter#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.Quarter#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.Day#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.RegularTimePeriod#downsize(java.lang.Class)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.RegularTimePeriod#downsize(java.lang.Class)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "Quarter#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.Quarter#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "FixedMillisecond#next()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.FixedMillisecond#previous()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.FixedMillisecond#previous()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.Quarter#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "time.FixedMillisecond#next()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.Day#<clinit()";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "RegularTimePeriod#downsize(java.lang.Class)";
  "org.jfree.data$time.RegularTimePeriod#<clinit()" -> "org.jfree.data$time.FixedMillisecond#next()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" -> "time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" -> "DynamicTimeSeriesCollection#<init(int,int,org.jfree.data.time.RegularTimePeriod)";
  "org.jfree.data$time.Quarter#<clinit()" -> "time.Quarter#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Quarter#<clinit()" -> "Quarter#getFirstMillisecond(java.util.Calendar)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.AxisSpace#reserved(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$renderer.xy.XYBarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$ChartPanel#scale(java.awt.geom.Rectangle2D)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.ModuloAxis#transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$title.ImageTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$renderer.category.BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$plot.SpiderWebPlot#getWebPoint(java.awt.geom.Rectangle2D,double,double)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$ChartPanel#getScreenDataArea()";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.LogAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$util.ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$axis.ModuloAxis#trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$plot.WaferMapPlot#getWaferEdge(java.awt.geom.Rectangle2D)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$title.ImageTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$plot.dial.DialPlot#viewToFrame(java.awt.geom.Rectangle2D)";
  "java.awt.Rectangle#getX()" -> "org.jfree.chart$util.ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$axis.ModuloAxis#transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)" -> "axis.ModuloAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ModuloAxis#transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)" -> "org.jfree.chart$axis.ModuloAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ModuloAxis#transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)" -> "ModuloAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$title.ImageTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.ImageTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.ImageTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" -> "org.jfree.chart$title.ImageTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)";
  "org.jfree.chart$axis.NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)";
  "org.jfree.chart$axis.NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.SymbolAxis#drawGridBandsHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)";
  "org.jfree.chart$axis.NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)";
  "org.jfree.chart$axis.NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "SymbolAxis#drawGridBandsHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)";
  "org.jfree.chart$axis.NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.ModuloAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "ModuloAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.ModuloAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "LogAxis#exponentLengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "org.jfree.chart$axis.LogAxis#exponentLengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.LogAxis#exponentLengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$ChartPanel#getScreenDataArea()" -> "ChartPanel#drawHorizontalAxisTrace(java.awt.Graphics2D,int)";
  "org.jfree.chart$ChartPanel#getScreenDataArea()" -> "ChartPanel#drawVerticalAxisTrace(java.awt.Graphics2D,int)";
  "org.jfree.data$statistics.HistogramType#equals(java.lang.Object)" -> "org.jfree.data$statistics.HistogramType#readResolve()";
  "org.jfree.data$statistics.HistogramType#equals(java.lang.Object)" -> "HistogramType#readResolve()";
  "org.jfree.data$statistics.HistogramType#equals(java.lang.Object)" -> "statistics.HistogramType#readResolve()";
  "org.jfree.chart$plot.PieLabelLinkStyle#toString()" -> "org.jfree.chart$plot.PieLabelLinkStyle#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelLinkStyle#toString()" -> "plot.PieLabelLinkStyle#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelLinkStyle#toString()" -> "PieLabelLinkStyle#equals(java.lang.Object)";
  "org.jfree.chart$plot.PieLabelLinkStyle#equals(java.lang.Object)" -> "org.jfree.chart$plot.PieLabelLinkStyle#readResolve()";
  "org.jfree.chart$plot.PieLabelLinkStyle#equals(java.lang.Object)" -> "PieLabelLinkStyle#readResolve()";
  "org.jfree.chart$plot.PieLabelLinkStyle#equals(java.lang.Object)" -> "plot.PieLabelLinkStyle#readResolve()";
  "org.jfree.chart$renderer.AreaRendererEndType#toString()" -> "org.jfree.chart$renderer.AreaRendererEndType#equals(java.lang.Object)";
  "org.jfree.chart$renderer.AreaRendererEndType#toString()" -> "renderer.AreaRendererEndType#equals(java.lang.Object)";
  "org.jfree.chart$renderer.AreaRendererEndType#toString()" -> "AreaRendererEndType#equals(java.lang.Object)";
  "org.jfree.chart$renderer.AreaRendererEndType#equals(java.lang.Object)" -> "AreaRendererEndType#readResolve()";
  "org.jfree.chart$renderer.AreaRendererEndType#equals(java.lang.Object)" -> "renderer.AreaRendererEndType#readResolve()";
  "org.jfree.chart$renderer.AreaRendererEndType#equals(java.lang.Object)" -> "org.jfree.chart$renderer.AreaRendererEndType#readResolve()";
  "java.lang.Class#getName()" -> "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(org.jfree.chart.ui.Library)";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(org.jfree.chart.ui.Library)" -> "BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(org.jfree.chart.ui.Library)" -> "ui.BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(org.jfree.chart.ui.Library)" -> "org.jfree.chart$ui.BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)";
  "org.jfree.chart$axis.AxisLocation#equals(java.lang.Object)" -> "org.jfree.chart$axis.AxisLocation#readResolve()";
  "org.jfree.chart$axis.AxisLocation#equals(java.lang.Object)" -> "axis.AxisLocation#readResolve()";
  "org.jfree.chart$axis.AxisLocation#equals(java.lang.Object)" -> "AxisLocation#readResolve()";
  "org.jfree.chart$util.RectangleEdge#equals(java.lang.Object)" -> "util.RectangleEdge#readResolve()";
  "org.jfree.chart$util.RectangleEdge#equals(java.lang.Object)" -> "RectangleEdge#readResolve()";
  "org.jfree.chart$util.RectangleEdge#equals(java.lang.Object)" -> "org.jfree.chart$util.RectangleEdge#readResolve()";
  "org.jfree.chart$util.ApplicationFrame#windowClosing(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowClosing(java.awt.event.WindowEvent)";
  "org.jfree.chart$util.ApplicationFrame#windowClosing(java.awt.event.WindowEvent)" -> "java.awt.Window#processWindowEvent(java.awt.event.WindowEvent)";
  "org.jfree.chart$util.ApplicationFrame#windowClosing(java.awt.event.WindowEvent)" -> "sun.awt.windows$WWindowPeer#preprocessPostEvent(java.awt.AWTEvent)";
  "org.jfree.chart$util.ApplicationFrame#windowClosing(java.awt.event.WindowEvent)" -> "sun.awt.windows$WWindowPeer#hide()";
  "java.util.EventObject#<init(java.lang.Object)" -> "org.jfree.chart$ChartMouseEvent#<init(org.jfree.chart.JFreeChart,java.awt.event.MouseEvent,org.jfree.chart.entity.ChartEntity)";
  "java.util.EventObject#<init(java.lang.Object)" -> "org.jfree.data$general.SeriesChangeEvent#<init(java.lang.Object)";
  "java.util.EventObject#<init(java.lang.Object)" -> "org.jfree.data$general.DatasetChangeEvent#<init(java.lang.Object,org.jfree.data.general.Dataset)";
  "java.util.EventObject#<init(java.lang.Object)" -> "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)";
  "java.util.EventObject#<init(java.lang.Object)" -> "org.jfree.chart$event.ChartProgressEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,int,int)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" -> "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" -> "ChartChangeEvent#<init(java.lang.Object)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" -> "ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" -> "event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" -> "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" -> "event.ChartChangeEvent#<init(java.lang.Object)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "event.TitleChangeEvent#<init(org.jfree.chart.title.Title)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "PlotChangeEvent#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "TitleChangeEvent#<init(org.jfree.chart.title.Title)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "event.RendererChangeEvent#<init(java.lang.Object)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "event.MarkerChangeEvent#<init(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "plot.dial.DialLayerChangeEvent#<init(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "org.jfree.chart$event.MarkerChangeEvent#<init(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "org.jfree.chart$plot.dial.DialLayerChangeEvent#<init(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "org.jfree.chart$event.AxisChangeEvent#<init(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "event.AxisChangeEvent#<init(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "dial.DialLayerChangeEvent#<init(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "MarkerChangeEvent#<init(org.jfree.chart.plot.Marker)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "org.jfree.chart$event.PlotChangeEvent#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "DialLayerChangeEvent#<init(org.jfree.chart.plot.dial.DialLayer)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "AxisChangeEvent#<init(org.jfree.chart.axis.Axis)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "event.PlotChangeEvent#<init(org.jfree.chart.plot.Plot)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "org.jfree.chart$event.TitleChangeEvent#<init(org.jfree.chart.title.Title)";
  "org.jfree.chart$event.ChartChangeEvent#<init(java.lang.Object)" -> "RendererChangeEvent#<init(java.lang.Object)";
  "org.jfree.data$general.AbstractDataset#clone()" -> "xy.DefaultXYDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "general.DefaultKeyedValueDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "xy.DefaultIntervalXYDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "DefaultKeyedValueDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "DefaultXYZDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "xy.DefaultXYZDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "statistics.HistogramDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "HistogramDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "DefaultXYDataset#clone()";
  "org.jfree.data$general.AbstractDataset#clone()" -> "DefaultIntervalXYDataset#clone()";
  "org.jfree.chart$util.Rotation#equals(java.lang.Object)" -> "org.jfree.chart$util.Rotation#readResolve()";
  "org.jfree.chart$util.Rotation#equals(java.lang.Object)" -> "util.Rotation#readResolve()";
  "org.jfree.chart$util.Rotation#equals(java.lang.Object)" -> "Rotation#readResolve()";
  "org.jfree.chart$axis.CategoryLabelPosition#equals(java.lang.Object)" -> "CategoryLabelPositions#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryLabelPosition#equals(java.lang.Object)" -> "axis.CategoryLabelPositions#equals(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#equals(java.lang.Object)" -> "Day#equals(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#equals(java.lang.Object)" -> "time.Day#equals(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#equals(java.lang.Object)" -> "org.jfree.data$time.Day#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "time.Hour#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "org.jfree.data$time.Second#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "Second#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "Hour#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "time.Millisecond#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "org.jfree.data$time.Hour#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "time.Second#equals(java.lang.Object)";
  "org.jfree.data$time.Day#equals(java.lang.Object)" -> "Millisecond#equals(java.lang.Object)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "EmptyBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "ColorBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "title.ImageTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "title.ImageTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "ImageTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "block.ColorBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "block.EmptyBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "ImageTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "org.jfree.chart$block.EmptyBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "org.jfree.chart$block.ColorBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "block.AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "org.jfree.chart$block.AbstractBlock#getWidth()" -> "AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)";
  "javax.swing.ToolTipManager#sharedInstance()" -> "org.jfree.chart$ChartPanel#mouseExited(java.awt.event.MouseEvent)";
  "javax.swing.ToolTipManager#sharedInstance()" -> "org.jfree.chart$ChartPanel#setDisplayToolTips(boolean)";
  "javax.swing.ToolTipManager#sharedInstance()" -> "org.jfree.chart$ChartPanel#mouseEntered(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseExited(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mouseExited(java.awt.event.MouseEvent)";
  "org.jfree.chart$ChartPanel#mouseEntered(java.awt.event.MouseEvent)" -> "java.awt.AWTEventMulticaster#mouseEntered(java.awt.event.MouseEvent)";
  "java.util.ArrayList#get(int)" -> "org.jfree.data$jdbc.JDBCXYDataset#getX(int,int)";
  "java.util.ArrayList#get(int)" -> "org.jfree.data$jdbc.JDBCXYDataset#getY(int,int)";
  "java.util.ArrayList#get(int)" -> "org.jfree.data$DefaultKeyedValues#getValue(int)";
  "java.util.ArrayList#get(int)" -> "org.jfree.data$DefaultKeyedValues#getKey(int)";
  "java.util.ArrayList#get(int)" -> "org.jfree.chart$urls.CustomPieURLGenerator#getURLCount(int)";
  "org.jfree.data$DefaultKeyedValues#getValue(int)" -> "org.jfree.data$general.DefaultPieDataset#getValue(int)";
  "org.jfree.data$DefaultKeyedValues#getValue(int)" -> "general.DefaultPieDataset#getValue(int)";
  "org.jfree.data$DefaultKeyedValues#getValue(int)" -> "DefaultPieDataset#getValue(int)";
  "org.jfree.data$DefaultKeyedValues#getKey(int)" -> "general.DefaultPieDataset#getKey(int)";
  "org.jfree.data$DefaultKeyedValues#getKey(int)" -> "DefaultPieDataset#getKey(int)";
  "org.jfree.data$DefaultKeyedValues#getKey(int)" -> "org.jfree.data$general.DefaultPieDataset#getKey(int)";
  "org.jfree.chart$axis.CategoryAnchor#equals(java.lang.Object)" -> "org.jfree.chart$axis.CategoryAnchor#readResolve()";
  "org.jfree.chart$axis.CategoryAnchor#equals(java.lang.Object)" -> "axis.CategoryAnchor#readResolve()";
  "org.jfree.chart$axis.CategoryAnchor#equals(java.lang.Object)" -> "CategoryAnchor#readResolve()";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.StandardDialRange#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.ArcDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.StandardDialRange#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "ArcDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.ArcDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.DialBackground#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "StandardDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.DialTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "block.BlockBorder#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "DialTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "DialBackground#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.StandardDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.DialValueIndicator#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "DialValueIndicator#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.DialValueIndicator#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.StandardDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.DialCap#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.DialCap#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "renderer.LookupPaintScale$PaintItem#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "renderer.LookupPaintScale#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.StandardDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "LookupPaintScale$PaintItem#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "PaintList#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "StandardDialScale#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.ArcDialFrame#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.DialBackground#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "util.PaintList#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "DialCap#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.DialTextAnnotation#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.DialBackground#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "BlockBorder#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.StandardDialScale#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$renderer.LookupPaintScale$PaintItem#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.DialCap#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.DialValueIndicator#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "StandardDialRange#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "dial.StandardDialScale#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$plot.dial.StandardDialScale#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "axis.CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "plot.dial.StandardDialRange#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$block.BlockBorder#equals(java.lang.Object)";
  "org.jfree.chart$util.PaintUtilities#equal(java.awt.Paint,java.awt.Paint)" -> "LookupPaintScale#equals(java.lang.Object)";
  "org.jfree.chart$util.ShapeUtilities#<clinit()" -> "ShapeUtilities#createDiagonalCross(float,float)";
  "org.jfree.chart$util.ShapeUtilities#<clinit()" -> "util.ShapeUtilities#createDiagonalCross(float,float)";
  "org.jfree.chart$util.ShapeUtilities#<clinit()" -> "util.ShapeUtilities#<clinit()";
  "org.jfree.chart$util.ShapeUtilities#<clinit()" -> "ShapeUtilities#<clinit()";
  "org.jfree.chart$util.ShapeUtilities#<clinit()" -> "org.jfree.chart$util.ShapeUtilities#createDiagonalCross(float,float)";
  "java.awt.Point#getX()" -> "org.jfree.chart$renderer.Outlier#getX()";
  "java.awt.geom$Rectangle2D$Double#getWidth()" -> "org.jfree.chart$axis.CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.geom$Rectangle2D$Double#getWidth()" -> "org.jfree.chart$axis.ModuloAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.awt.geom$Rectangle2D$Double#getWidth()" -> "org.jfree.chart$axis.ModuloAxis#transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)";
  "java.awt.geom$Rectangle2D$Double#getWidth()" -> "org.jfree.chart$title.LegendGraphic#arrangeNN(java.awt.Graphics2D)";
  "java.awt.geom$Rectangle2D$Double#getWidth()" -> "org.jfree.chart$axis.CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "axis.CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)" -> "CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.text.NumberFormat#hashCode()" -> "org.jfree.chart$util.RelativeDateFormat#hashCode()";
  "org.jfree.chart$util.RelativeDateFormat#hashCode()" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#hashCode()";
  "org.jfree.chart$util.RelativeDateFormat#hashCode()" -> "PeriodAxisLabelInfo#hashCode()";
  "org.jfree.chart$util.RelativeDateFormat#hashCode()" -> "DateTickUnit#hashCode()";
  "org.jfree.chart$util.RelativeDateFormat#hashCode()" -> "axis.PeriodAxisLabelInfo#hashCode()";
  "org.jfree.chart$util.RelativeDateFormat#hashCode()" -> "org.jfree.chart$axis.DateTickUnit#hashCode()";
  "org.jfree.chart$util.RelativeDateFormat#hashCode()" -> "axis.DateTickUnit#hashCode()";
  "org.jfree.chart$util.Size2D#<init(double,double)" -> "title.LegendGraphic#arrangeNN(java.awt.Graphics2D)";
  "org.jfree.chart$util.Size2D#<init(double,double)" -> "org.jfree.chart$util.Size2D#<init()";
  "org.jfree.chart$util.Size2D#<init(double,double)" -> "Size2D#<init()";
  "org.jfree.chart$util.Size2D#<init(double,double)" -> "util.Size2D#<init()";
  "org.jfree.chart$util.Size2D#<init(double,double)" -> "LegendGraphic#arrangeNN(java.awt.Graphics2D)";
  "org.jfree.chart$util.Size2D#<init()" -> "RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)";
  "org.jfree.chart$util.Size2D#<init()" -> "org.jfree.chart$block.RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)";
  "org.jfree.chart$util.Size2D#<init()" -> "block.RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)";
  "org.jfree.chart$util.LengthAdjustmentType#equals(java.lang.Object)" -> "util.LengthAdjustmentType#readResolve()";
  "org.jfree.chart$util.LengthAdjustmentType#equals(java.lang.Object)" -> "org.jfree.chart$util.LengthAdjustmentType#readResolve()";
  "org.jfree.chart$util.LengthAdjustmentType#equals(java.lang.Object)" -> "LengthAdjustmentType#readResolve()";
  "java.math.BigInteger#equals(java.lang.Object)" -> "org.jfree.data$xy.WindDataItem#compareTo(java.lang.Object)";
  "org.jfree.chart$labels.ItemLabelAnchor#toString()" -> "ItemLabelAnchor#equals(java.lang.Object)";
  "org.jfree.chart$labels.ItemLabelAnchor#toString()" -> "labels.ItemLabelAnchor#equals(java.lang.Object)";
  "org.jfree.chart$block.LengthConstraintType#equals(java.lang.Object)" -> "LengthConstraintType#readResolve()";
  "org.jfree.chart$block.LengthConstraintType#equals(java.lang.Object)" -> "block.LengthConstraintType#readResolve()";
  "org.jfree.chart$block.LengthConstraintType#equals(java.lang.Object)" -> "org.jfree.chart$block.LengthConstraintType#readResolve()";
  "org.jfree.chart$axis.QuarterDateFormat#<clinit()" -> "QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[],boolean)";
  "org.jfree.chart$axis.QuarterDateFormat#<clinit()" -> "QuarterDateFormat#<clinit()";
  "org.jfree.chart$axis.QuarterDateFormat#<clinit()" -> "axis.QuarterDateFormat#<init(java.util.TimeZone,java.lang.String[],boolean)";
  "org.jfree.chart$axis.QuarterDateFormat#<clinit()" -> "axis.QuarterDateFormat#<clinit()";
  "java.awt.Font#getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)" -> "org.jfree.chart$axis.NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)";
  "java.awt.Font#getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)" -> "org.jfree.chart$axis.LogAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)";
  "org.jfree.data$RangeType#equals(java.lang.Object)" -> "RangeType#readResolve()";
  "org.jfree.data$RangeType#equals(java.lang.Object)" -> "org.jfree.data$RangeType#readResolve()";
  "org.jfree.chart$axis.CompassFormat#getDirectionCode(double)" -> "axis.CompassFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.CompassFormat#getDirectionCode(double)" -> "org.jfree.chart$axis.CompassFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.CompassFormat#getDirectionCode(double)" -> "axis.CompassFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.CompassFormat#getDirectionCode(double)" -> "org.jfree.chart$axis.CompassFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.CompassFormat#getDirectionCode(double)" -> "CompassFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.CompassFormat#getDirectionCode(double)" -> "CompassFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#addToolTipSeries(java.util.List)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$axis.TickUnits#add(org.jfree.chart.axis.TickUnit)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$text.TextLine#addFragment(org.jfree.chart.text.TextFragment)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.data$xy.MatrixSeriesCollection#<init(org.jfree.data.xy.MatrixSeries)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$block.BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$ui.BasicProjectInfo#addOptionalLibrary(java.lang.String)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$text.TextBlock#addLine(org.jfree.chart.text.TextLine)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$ui.BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.data$time.TimePeriodValuesCollection#<init(org.jfree.data.time.TimePeriodValues)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$servlet.ChartDeleter#addChart(java.lang.String)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$renderer.OutlierList#add(org.jfree.chart.renderer.Outlier)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$plot.PlotRenderingInfo#addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)";
  "java.util.ImmutableCollections$AbstractImmutableCollection#add(java.lang.Object)" -> "org.jfree.chart$axis.MarkerAxisBand#addMarker(org.jfree.chart.plot.IntervalMarker)";
  "org.jfree.data$xy.MatrixSeriesCollection#<init(org.jfree.data.xy.MatrixSeries)" -> "MatrixSeriesCollection#<init()";
  "org.jfree.data$xy.MatrixSeriesCollection#<init(org.jfree.data.xy.MatrixSeries)" -> "org.jfree.data$xy.MatrixSeriesCollection#<init()";
  "org.jfree.data$xy.MatrixSeriesCollection#<init(org.jfree.data.xy.MatrixSeries)" -> "xy.MatrixSeriesCollection#<init()";
  "org.jfree.chart$block.BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)" -> "org.jfree.chart$block.BlockContainer#add(org.jfree.chart.block.Block)";
  "org.jfree.chart$block.BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)" -> "BlockContainer#add(org.jfree.chart.block.Block)";
  "org.jfree.chart$block.BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)" -> "block.BlockContainer#add(org.jfree.chart.block.Block)";
  "org.jfree.data$time.TimePeriodValuesCollection#<init(org.jfree.data.time.TimePeriodValues)" -> "time.TimePeriodValuesCollection#<init()";
  "org.jfree.data$time.TimePeriodValuesCollection#<init(org.jfree.data.time.TimePeriodValues)" -> "org.jfree.data$time.TimePeriodValuesCollection#<init()";
  "org.jfree.data$time.TimePeriodValuesCollection#<init(org.jfree.data.time.TimePeriodValues)" -> "TimePeriodValuesCollection#<init()";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "time.TimeSeriesCollection#<init()";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "org.jfree.data$time.TimeSeriesCollection#<init()";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "TimeSeriesCollection#<init(java.util.TimeZone)";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "org.jfree.data$time.TimeSeriesCollection#<init(java.util.TimeZone)";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "time.TimeSeriesCollection#<init(java.util.TimeZone)";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "TimeSeriesCollection#<init()";
  "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)" -> "org.jfree.data$time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries)";
  "org.jfree.chart$servlet.ChartDeleter#addChart(java.lang.String)" -> "ServletUtilities#registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ChartDeleter#addChart(java.lang.String)" -> "servlet.ServletUtilities#registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)";
  "org.jfree.chart$servlet.ChartDeleter#addChart(java.lang.String)" -> "org.jfree.chart$servlet.ServletUtilities#registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.chart$util.RelativeDateFormat#<init(java.util.Date)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.Week#getLastMillisecond(java.util.Calendar)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getMiddleMillisecond()";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$xy.DefaultOHLCDataset#getX(int,int)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getLastMillisecond(java.util.Calendar)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getLastMillisecond()";
  "java.sql.Timestamp#getTime()" -> "org.jfree.chart$axis.DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getSerialIndex()";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.Week#getFirstMillisecond(java.util.Calendar)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getFirstMillisecond()";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getFirstMillisecond(java.util.Calendar)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$xy.DefaultHighLowDataset#getX(int,int)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#getMiddleMillisecond(java.util.Calendar)";
  "java.sql.Timestamp#getTime()" -> "org.jfree.data$time.FixedMillisecond#compareTo(java.lang.Object)";
  "org.jfree.data$time.Week#getLastMillisecond(java.util.Calendar)" -> "org.jfree.data$time.Week#peg(java.util.Calendar)";
  "org.jfree.data$time.Week#getLastMillisecond(java.util.Calendar)" -> "time.Week#peg(java.util.Calendar)";
  "org.jfree.data$time.Week#getLastMillisecond(java.util.Calendar)" -> "Week#peg(java.util.Calendar)";
  "org.jfree.data$time.Week#peg(java.util.Calendar)" -> "time.Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)";
  "org.jfree.data$time.Week#peg(java.util.Calendar)" -> "time.Week#<init(int,org.jfree.data.time.Year)";
  "org.jfree.data$time.Week#peg(java.util.Calendar)" -> "Week#<init(int,org.jfree.data.time.Year)";
  "org.jfree.data$time.Week#peg(java.util.Calendar)" -> "Week#<init(int,int)";
  "org.jfree.data$time.Week#peg(java.util.Calendar)" -> "Week#<init(java.util.Date,java.util.TimeZone,java.util.Locale)";
  "org.jfree.data$time.Week#peg(java.util.Calendar)" -> "time.Week#<init(int,int)";
  "org.jfree.data$time.FixedMillisecond#getLastMillisecond()" -> "RegularTimePeriod#getEnd()";
  "org.jfree.data$time.FixedMillisecond#getLastMillisecond()" -> "org.jfree.data$time.RegularTimePeriod#getEnd()";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "text.TextAnchor#readResolve()";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "text.TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "org.jfree.chart$text.TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "text.TextAnchor#<clinit()";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "TextAnchor#<clinit()";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "dial.DialTextAnnotation#<init(java.lang.String)";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "org.jfree.chart$text.TextAnchor#readResolve()";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "plot.dial.DialTextAnnotation#<init(java.lang.String)";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "TextAnchor#readResolve()";
  "org.jfree.chart$text.TextAnchor#<clinit()" -> "DialTextAnnotation#<init(java.lang.String)";
  "org.jfree.chart$text.TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)" -> "text.TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$text.TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)" -> "TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)";
  "org.jfree.chart$LegendRenderingOrder#equals(java.lang.Object)" -> "LegendRenderingOrder#readResolve()";
  "org.jfree.chart$LegendRenderingOrder#equals(java.lang.Object)" -> "org.jfree.chart$LegendRenderingOrder#readResolve()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.category.AbstractCategoryItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.category.LayeredBarRenderer#getSeriesBarWidth(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.dial.DialPlot#getScaleForDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "XYPlot#getRangeAxisLocation()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "category.AbstractCategoryItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractCategoryItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.XYPlot#getRenderer(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.AbstractRenderer#getSeriesNegativeItemLabelPosition(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractXYItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "dial.DialPlot#getScale(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractObjectList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.XYPlot#getRangeAxisLocation()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "StandardPieSectionLabelGenerator#getAttributedLabel(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.category.LayeredBarRenderer#getSeriesBarWidth(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.xy.AbstractXYItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.dial.DialPlot#getScale(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.XYPlot#indexOf(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#getRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#configureDomainAxes()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#configureDomainAxes()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "XYPlot#indexOf(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#getDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractCategoryItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisForDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#getRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "category.LayeredBarRenderer#getSeriesBarWidth(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.xy.AbstractXYItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "XYPlot#getRenderer(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#datasetsMappedToRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractRenderer#getSeriesPositiveItemLabelPosition(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "category.AbstractCategoryItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#datasetsMappedToDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.dial.DialPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "xy.AbstractXYItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.XYPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractCategoryItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#datasetsMappedToDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractXYItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.dial.DialPlot#getScaleForDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#getDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "DialPlot#getScale(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "xy.AbstractXYItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractRenderer#getSeriesNegativeItemLabelPosition(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.category.AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.xy.AbstractXYItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "xy.AbstractXYItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractXYItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "DialPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#configureDomainAxes()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#indexOf(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "xy.AbstractXYItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "category.AbstractCategoryItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.xy.AbstractXYItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesURLGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#getRenderer(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#getDomainAxisForDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisForDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.AbstractRenderer#getSeriesItemLabelFont(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesPositiveItemLabelPosition(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.XYPlot#getDomainAxisLocation()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractXYItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "dial.DialPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "xy.AbstractXYItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#datasetsMappedToDomainAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "XYPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractXYItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.category.AbstractCategoryItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$util.AbstractObjectList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesNegativeItemLabelPosition(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.xy.AbstractXYItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.dial.DialPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "labels.StandardPieSectionLabelGenerator#getAttributedLabel(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "LayeredBarRenderer#getSeriesBarWidth(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "XYPlot#getDomainAxisLocation()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractRenderer#getSeriesItemLabelFont(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getDataset(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "CategoryPlot#datasetsMappedToRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$labels.StandardPieSectionLabelGenerator#getAttributedLabel(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "category.AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "plot.CategoryPlot#getRenderer(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.dial.DialPlot#getScale(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getRangeAxisLocation()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#datasetsMappedToRangeAxis(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "xy.AbstractXYItemRenderer#getSeriesItemLabelGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "AbstractXYItemRenderer#getItemLabelGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getDomainAxisLocation()";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelFont(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.AbstractRenderer#getSeriesPositiveItemLabelPosition(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.xy.AbstractXYItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.XYPlot#getRenderer(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "util.AbstractObjectList#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$plot.CategoryPlot#getRenderer(int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "renderer.category.AbstractCategoryItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$util.ObjectList#get(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getURLGenerator(int,int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "XYPlot#getDomainAxis()";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "org.jfree.chart$plot.XYPlot#getDomainAxis()";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "plot.XYPlot#getDomainAxis(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "XYPlot#getDomainAxisForDataset(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "XYPlot#getDomainAxis(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "plot.XYPlot#getDomainAxisForDataset(int)";
  "org.jfree.chart$plot.XYPlot#getDomainAxis(int)" -> "plot.XYPlot#getDomainAxis()";
  "org.jfree.chart$plot.CategoryPlot#getDataset(int)" -> "plot.CategoryPlot#getDataset()";
  "org.jfree.chart$plot.CategoryPlot#getDataset(int)" -> "org.jfree.chart$plot.CategoryPlot#getDataset()";
  "org.jfree.chart$plot.CategoryPlot#getDataset(int)" -> "CategoryPlot#getDataset()";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "XYPlot#getRangeAxis(int)";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "org.jfree.chart$plot.XYPlot#getRangeAxis()";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "plot.XYPlot#getRangeAxis()";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "XYPlot#getRangeAxisForDataset(int)";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "plot.XYPlot#getRangeAxis(int)";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "XYPlot#getRangeAxis()";
  "org.jfree.chart$plot.XYPlot#getRangeAxis(int)" -> "plot.XYPlot#getRangeAxisForDataset(int)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)" -> "category.AbstractCategoryItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)" -> "renderer.category.AbstractCategoryItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)" -> "AbstractCategoryItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getToolTipGenerator(int,int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)" -> "renderer.category.AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)" -> "plot.CategoryPlot#getRangeAxis()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)" -> "AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)" -> "plot.CategoryPlot#getRangeAxisForDataset(int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)" -> "CategoryPlot#getRangeAxis()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis(int)" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxis()";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis()" -> "CategoryPlot#getRangeAxisForDataset(int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis()" -> "category.AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#getRangeAxis()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesPositiveItemLabelPosition(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getPositiveItemLabelPosition(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesPositiveItemLabelPosition(int)" -> "AbstractRenderer#getPositiveItemLabelPosition(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesPositiveItemLabelPosition(int)" -> "renderer.AbstractRenderer#getPositiveItemLabelPosition(int,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "renderer.category.AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "plot.CategoryPlot#getDomainAxis()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "CategoryPlot#getDomainAxisForDataset(int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "category.AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "CategoryPlot#getDomainAxis()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis(int)" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxis()";
  "org.jfree.chart$plot.CategoryPlot#getDomainAxis()" -> "AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesNegativeItemLabelPosition(int)" -> "renderer.AbstractRenderer#getNegativeItemLabelPosition(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesNegativeItemLabelPosition(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getNegativeItemLabelPosition(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesNegativeItemLabelPosition(int)" -> "AbstractRenderer#getNegativeItemLabelPosition(int,int)";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "DialPlot#getDataset()";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "dial.DialPlot#getValue(int)";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "plot.dial.DialPlot#getValue(int)";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "dial.DialPlot#getDataset()";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "org.jfree.chart$plot.dial.DialPlot#getDataset()";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "DialPlot#getValue(int)";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "plot.dial.DialPlot#getDataset()";
  "org.jfree.chart$plot.dial.DialPlot#getDataset(int)" -> "org.jfree.chart$plot.dial.DialPlot#getValue(int)";
  "org.jfree.chart$plot.XYPlot#getDataset(int)" -> "plot.XYPlot#getDataset()";
  "org.jfree.chart$plot.XYPlot#getDataset(int)" -> "XYPlot#getDataset()";
  "org.jfree.chart$plot.XYPlot#getDataset(int)" -> "org.jfree.chart$plot.XYPlot#getDataset()";
  "org.jfree.chart$plot.dial.DialPlot#getScale(int)" -> "DialPlot#getScaleForDataset(int)";
  "org.jfree.chart$plot.dial.DialPlot#getScale(int)" -> "dial.DialPlot#getScaleForDataset(int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelFont(int)" -> "renderer.AbstractRenderer#getItemLabelFont(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelFont(int)" -> "AbstractRenderer#getItemLabelFont(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelFont(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemLabelFont(int,int)";
  "org.jfree.chart$plot.XYPlot#getRenderer(int)" -> "plot.XYPlot#getRenderer()";
  "org.jfree.chart$plot.XYPlot#getRenderer(int)" -> "org.jfree.chart$plot.XYPlot#getRenderer()";
  "org.jfree.chart$plot.XYPlot#getRenderer(int)" -> "XYPlot#getRenderer()";
  "org.jfree.chart$plot.CategoryPlot#getRenderer(int)" -> "plot.CategoryPlot#getRenderer()";
  "org.jfree.chart$plot.CategoryPlot#getRenderer(int)" -> "CategoryPlot#getRenderer()";
  "org.jfree.chart$plot.CategoryPlot#getRenderer(int)" -> "org.jfree.chart$plot.CategoryPlot#getRenderer()";
  "java.awt.Point#equals(java.lang.Object)" -> "org.jfree.chart$util.ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)";
  "org.jfree.data$time.Day#compareTo(java.lang.Object)" -> "org.jfree.data$time.Hour#compareTo(java.lang.Object)";
  "org.jfree.data$time.Day#compareTo(java.lang.Object)" -> "Hour#compareTo(java.lang.Object)";
  "org.jfree.data$time.Day#compareTo(java.lang.Object)" -> "time.Hour#compareTo(java.lang.Object)";
  "org.jfree.chart$util.TableOrder#equals(java.lang.Object)" -> "util.TableOrder#readResolve()";
  "org.jfree.chart$util.TableOrder#equals(java.lang.Object)" -> "org.jfree.chart$util.TableOrder#readResolve()";
  "org.jfree.chart$util.TableOrder#equals(java.lang.Object)" -> "TableOrder#readResolve()";
  "org.jfree.chart$plot.DatasetRenderingOrder#<clinit()" -> "plot.DatasetRenderingOrder#<clinit()";
  "org.jfree.chart$plot.DatasetRenderingOrder#<clinit()" -> "DatasetRenderingOrder#<clinit()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "org.jfree.chart$renderer.xy.XYBlockRenderer#updateOffsets()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "RectangleAnchor#readResolve()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "org.jfree.chart$util.RectangleAnchor#readResolve()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "renderer.xy.XYBlockRenderer#updateOffsets()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "util.RectangleAnchor#readResolve()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "CategoryLabelPosition#equals(java.lang.Object)";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "xy.XYBlockRenderer#updateOffsets()";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "axis.CategoryLabelPosition#equals(java.lang.Object)";
  "org.jfree.chart$util.RectangleAnchor#equals(java.lang.Object)" -> "XYBlockRenderer#updateOffsets()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.CyclicNumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "LogAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.CyclicNumberAxis#getCycleBound()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "NumberAxis#calculateLowestVisibleTickValue()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "CyclicNumberAxis#getCycleBound()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.DateAxis#getMinimumDate()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.LogAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.NumberAxis#calculateVisibleTickCount()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "DateAxis#getMaximumDate()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.DateAxis#getMaximumDate()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.CyclicNumberAxis#getCycleBound()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "NumberAxis#calculateHighestVisibleTickValue()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.NumberAxis#calculateLowestVisibleTickValue()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.DateAxis#getMaximumDate()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.NumberAxis#calculateHighestVisibleTickValue()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "LogarithmicAxis#setupSmallLogFlag()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.NumberAxis#calculateHighestVisibleTickValue()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.LogarithmicAxis#setupSmallLogFlag()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.NumberAxis#calculateLowestVisibleTickValue()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.NumberAxis#calculateVisibleTickCount()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "DateAxis#getMinimumDate()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "org.jfree.chart$axis.LogarithmicAxis#setupSmallLogFlag()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "NumberAxis#calculateVisibleTickCount()";
  "org.jfree.chart$axis.ValueAxis#getRange()" -> "axis.DateAxis#getMinimumDate()";
  "org.jfree.chart$axis.CyclicNumberAxis#getCycleBound()" -> "axis.CyclicNumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CyclicNumberAxis#getCycleBound()" -> "CyclicNumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CyclicNumberAxis#getCycleBound()" -> "org.jfree.chart$axis.CyclicNumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CyclicNumberAxis#getCycleBound()" -> "CyclicNumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "org.jfree.chart$renderer.category.BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "renderer.category.BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "org.jfree.chart$renderer.category.LevelRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "category.BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "renderer.category.LevelRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "category.LevelRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "axis.CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "org.jfree.chart$axis.CategoryAxis#getLowerMargin()" -> "LevelRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)";
  "java.lang.Integer#toString(int)" -> "org.jfree.data$time.Year#toString()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#setClassLoaderSource(java.lang.String)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#setClassLoader(java.lang.ClassLoader)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ui.BasicProjectInfo$OptionalLibraryHolder#loadLibrary(java.lang.String)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#setClassLoaderSource(java.lang.String)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#getClassLoader()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#getClassLoader(java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#getClassLoader(java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "BasicProjectInfo$OptionalLibraryHolder#loadLibrary(java.lang.String)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#setClassLoader(java.lang.ClassLoader)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#<clinit()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#getClassLoader()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#getClassLoaderSource()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#<clinit()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#setClassLoaderSource(java.lang.String)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#getClassLoaderSource()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "ObjectUtilities#setClassLoader(java.lang.ClassLoader)";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "util.ObjectUtilities#getClassLoader()";
  "org.jfree.chart$util.ObjectUtilities#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#getClassLoaderSource()";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "org.jfree.chart$util.ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "org.jfree.chart$util.ObjectUtilities#getResource(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "util.ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "util.ObjectUtilities#getResource(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#loadLibrary(java.lang.String)";
  "org.jfree.chart$util.ObjectUtilities#getClassLoader(java.lang.Class)" -> "ObjectUtilities#getResource(java.lang.String,java.lang.Class)";
  "org.jfree.chart$util.ObjectUtilities#getResource(java.lang.String,java.lang.Class)" -> "ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#loadLibrary(java.lang.String)" -> "BasicProjectInfo$OptionalLibraryHolder#getLibrary()";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#loadLibrary(java.lang.String)" -> "ui.BasicProjectInfo$OptionalLibraryHolder#getLibrary()";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#loadLibrary(java.lang.String)" -> "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#getLibrary()";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#getLibrary()" -> "BasicProjectInfo#getOptionalLibraries()";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#getLibrary()" -> "ui.BasicProjectInfo#getOptionalLibraries()";
  "org.jfree.experimental$chart.util.XYCoordinateType#equals(java.lang.Object)" -> "org.jfree.experimental$chart.util.XYCoordinateType#readResolve()";
  "org.jfree.experimental$chart.util.XYCoordinateType#equals(java.lang.Object)" -> "XYCoordinateType#readResolve()";
  "java.awt.Font#<init(java.lang.String,int,int)" -> "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()" -> "editor.DefaultAxisEditor#attemptLabelFontSelection()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()" -> "DefaultAxisEditor#attemptLabelFontSelection()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()" -> "DefaultTitleEditor#attemptFontSelection()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()" -> "editor.DefaultTitleEditor#attemptFontSelection()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()" -> "editor.DefaultAxisEditor#attemptTickLabelFontSelection()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedFont()" -> "DefaultAxisEditor#attemptTickLabelFontSelection()";
  "java.util.ImmutableCollections$AbstractImmutableList#iterator()" -> "org.jfree.chart$LegendItemCollection#iterator()";
  "java.util.ImmutableCollections$AbstractImmutableList#iterator()" -> "org.jfree.chart$entity.StandardEntityCollection#iterator()";
  "java.util.ImmutableCollections$AbstractImmutableList#iterator()" -> "org.jfree.chart$renderer.OutlierListCollection#iterator()";
  "org.jfree.chart$axis.TickUnit#equals(java.lang.Object)" -> "axis.NumberTickUnit#equals(java.lang.Object)";
  "org.jfree.chart$axis.TickUnit#equals(java.lang.Object)" -> "NumberTickUnit#equals(java.lang.Object)";
  "org.jfree.chart$axis.TickUnit#equals(java.lang.Object)" -> "org.jfree.chart$axis.NumberTickUnit#equals(java.lang.Object)";
  "sun.java2d.SunGraphics2D#fill(java.awt.Shape)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$2#paintIcon(java.awt.Component,java.awt.Graphics,int,int)";
  "sun.java2d.SunGraphics2D#fill(java.awt.Shape)" -> "org.jfree.chart$ui.StrokeSample#paintComponent(java.awt.Graphics)";
  "java.awt.geom$Rectangle2D$Double#<init()" -> "org.jfree.chart$plot.PlotRenderingInfo#<init(org.jfree.chart.ChartRenderingInfo)";
  "org.jfree.chart$plot.PlotRenderingInfo#<init(org.jfree.chart.ChartRenderingInfo)" -> "org.jfree.chart$ChartRenderingInfo#<init(org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$plot.PlotRenderingInfo#<init(org.jfree.chart.ChartRenderingInfo)" -> "ChartRenderingInfo#<init(org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$plot.PlotRenderingInfo#<init(org.jfree.chart.ChartRenderingInfo)" -> "ChartRenderingInfo#clear()";
  "org.jfree.chart$ChartRenderingInfo#<init(org.jfree.chart.entity.EntityCollection)" -> "ChartRenderingInfo#<init()";
  "org.jfree.chart$ChartRenderingInfo#<init(org.jfree.chart.entity.EntityCollection)" -> "org.jfree.chart$ChartRenderingInfo#<init()";
  "org.jfree.chart$renderer.xy.XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)" -> "StackedXYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.StackedXYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.StackedXYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "java.io.ObjectInputStream#defaultReadObject()" -> "org.jfree.chart$renderer.category.ScatterRenderer#readObject(java.io.ObjectInputStream)";
  "java.io.ObjectInputStream#defaultReadObject()" -> "org.jfree.chart$title.Title#readObject(java.io.ObjectInputStream)";
  "java.io.ObjectInputStream#defaultReadObject()" -> "org.jfree.data$general.AbstractDataset#readObject(java.io.ObjectInputStream)";
  "java.io.ObjectInputStream#defaultReadObject()" -> "org.jfree.chart$plot.dial.DialPlot#readObject(java.io.ObjectInputStream)";
  "java.io.ObjectInputStream#defaultReadObject()" -> "org.jfree.chart$annotations.XYImageAnnotation#readObject(java.io.ObjectInputStream)";
  "java.io.ObjectInputStream#defaultReadObject()" -> "org.jfree.chart$plot.dial.AbstractDialLayer#readObject(java.io.ObjectInputStream)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$xy.OHLCDataItem#compareTo(java.lang.Object)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$jdbc.JDBCCategoryDataset#<init(java.sql.Connection)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$time.RegularTimePeriod#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$axis.PeriodAxisLabelInfo#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$title.Title#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$renderer.AbstractRenderer#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$time.TimeSeries#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.experimental$chart.demo.XYTitleAnnotationDemo1#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$plot.Plot#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$ui.FontChooserPanel#setSelectedFont(java.awt.Font)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$axis.Axis#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$axis.SymbolAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$demo.TimeSeriesChartDemo1#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$axis.PeriodAxis#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$JFreeChart#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$servlet.ServletUtilities#createTempDir()";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$general.AbstractDataset#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$util.ObjectUtilities#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$jdbc.JDBCPieDataset#<init(java.sql.Connection)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$time.TimeSeriesTableModel#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$renderer.xy.StackedXYBarRenderer#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$axis.AxisSpace#ensureAtLeast(double,org.jfree.chart.util.RectangleEdge)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$plot.Marker#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$util.PaintUtilities#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.data$general.Series#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)";
  "java.lang.Throwable#<clinit()" -> "org.jfree.chart$ChartPanel#class$(java.lang.String)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "plot.dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "dial.AbstractDialLayer#addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "org.jfree.chart$plot.dial.AbstractDialLayer#addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "plot.dial.AbstractDialLayer#addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "AbstractDialLayer#addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#class$(java.lang.String)" -> "dial.AbstractDialLayer#removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)";
  "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)" -> "util.RefineryUtilities#getMaximumWindowBounds()";
  "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)" -> "RefineryUtilities#getCenterPoint()";
  "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)" -> "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()";
  "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)" -> "org.jfree.chart$util.RefineryUtilities#getCenterPoint()";
  "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)" -> "util.RefineryUtilities#getCenterPoint()";
  "org.jfree.chart$util.RefineryUtilities#class$(java.lang.String)" -> "RefineryUtilities#getMaximumWindowBounds()";
  "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()" -> "util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)";
  "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()" -> "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)";
  "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()" -> "org.jfree.chart$util.RefineryUtilities#positionDialogRelativeToParent(java.awt.Dialog,double,double)";
  "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()" -> "RefineryUtilities#positionDialogRelativeToParent(java.awt.Dialog,double,double)";
  "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()" -> "RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)";
  "org.jfree.chart$util.RefineryUtilities#getMaximumWindowBounds()" -> "util.RefineryUtilities#positionDialogRelativeToParent(java.awt.Dialog,double,double)";
  "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)" -> "RefineryUtilities#centerFrameOnScreen(java.awt.Window)";
  "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)" -> "RefineryUtilities#positionFrameRandomly(java.awt.Window)";
  "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)" -> "util.RefineryUtilities#centerFrameOnScreen(java.awt.Window)";
  "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)" -> "util.RefineryUtilities#positionFrameRandomly(java.awt.Window)";
  "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)" -> "org.jfree.chart$util.RefineryUtilities#centerFrameOnScreen(java.awt.Window)";
  "org.jfree.chart$util.RefineryUtilities#positionFrameOnScreen(java.awt.Window,double,double)" -> "org.jfree.chart$util.RefineryUtilities#positionFrameRandomly(java.awt.Window)";
  "org.jfree.chart$util.RefineryUtilities#positionDialogRelativeToParent(java.awt.Dialog,double,double)" -> "RefineryUtilities#centerDialogInParent(java.awt.Dialog)";
  "org.jfree.chart$util.RefineryUtilities#positionDialogRelativeToParent(java.awt.Dialog,double,double)" -> "util.RefineryUtilities#centerDialogInParent(java.awt.Dialog)";
  "org.jfree.chart$util.RefineryUtilities#positionDialogRelativeToParent(java.awt.Dialog,double,double)" -> "org.jfree.chart$util.RefineryUtilities#centerDialogInParent(java.awt.Dialog)";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(java.lang.String)" -> "BasicProjectInfo#addOptionalLibrary(java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo$OptionalLibraryHolder#<init(java.lang.String)" -> "ui.BasicProjectInfo#addOptionalLibrary(java.lang.String)";
  "org.jfree.chart$ui.FontChooserPanel#setSelectedFont(java.awt.Font)" -> "org.jfree.chart$ui.FontChooserPanel#<init(java.awt.Font)";
  "org.jfree.chart$ui.FontChooserPanel#setSelectedFont(java.awt.Font)" -> "ui.FontChooserPanel#<init(java.awt.Font)";
  "org.jfree.chart$ui.FontChooserPanel#setSelectedFont(java.awt.Font)" -> "FontChooserPanel#<init(java.awt.Font)";
  "org.jfree.data$general.AbstractDataset#class$(java.lang.String)" -> "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)";
  "org.jfree.data$general.AbstractDataset#class$(java.lang.String)" -> "AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)";
  "org.jfree.data$general.AbstractDataset#class$(java.lang.String)" -> "AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)";
  "org.jfree.data$general.AbstractDataset#class$(java.lang.String)" -> "general.AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "CategoryToPieDataset#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.data$xy.XYBarDataset#<init(org.jfree.data.xy.XYDataset,double)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "XYBarDataset#<init(org.jfree.data.xy.XYDataset,double)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "XYDatasetTableModel#setModel(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "xy.XYBarDataset#<init(org.jfree.data.xy.XYDataset,double)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "XYDatasetTableModel#<init(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.data$xy.XYDatasetTableModel#<init(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "xy.XYDatasetTableModel#setModel(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "category.CategoryToPieDataset#<init(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "xy.XYDatasetTableModel#<init(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.chart$plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "org.jfree.data$xy.XYDatasetTableModel#setModel(org.jfree.data.xy.TableXYDataset)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "CompassPlot#addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)";
  "org.jfree.data$general.AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)" -> "plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)";
  "org.jfree.chart$plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)" -> "plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)" -> "CompassPlot#addDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.chart$plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)" -> "org.jfree.chart$plot.CompassPlot#addDataset(org.jfree.data.general.ValueDataset)";
  "org.jfree.data$time.TimeSeriesTableModel#class$(java.lang.String)" -> "time.TimeSeriesTableModel#getColumnClass(int)";
  "org.jfree.data$time.TimeSeriesTableModel#class$(java.lang.String)" -> "org.jfree.data$time.TimeSeriesTableModel#getColumnClass(int)";
  "org.jfree.data$time.TimeSeriesTableModel#class$(java.lang.String)" -> "TimeSeriesTableModel#getColumnClass(int)";
  "org.jfree.data$time.TimeSeriesTableModel#getColumnClass(int)" -> "javax.swing.JTable#getColumnClass(int)";
  "org.jfree.data$time.TimeSeriesTableModel#getColumnClass(int)" -> "javax.swing.table$TableRowSorter#getComparator(int)";
  "org.jfree.data$time.TimeSeriesTableModel#getColumnClass(int)" -> "javax.swing.table$TableRowSorter#useToString(int)";
  "org.jfree.chart$plot.Marker#class$(java.lang.String)" -> "Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)";
  "org.jfree.chart$plot.Marker#class$(java.lang.String)" -> "Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)";
  "org.jfree.chart$plot.Marker#class$(java.lang.String)" -> "plot.Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)";
  "org.jfree.chart$plot.Marker#class$(java.lang.String)" -> "org.jfree.chart$plot.Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)";
  "org.jfree.chart$plot.Marker#class$(java.lang.String)" -> "plot.Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)";
  "org.jfree.chart$util.PaintUtilities#class$(java.lang.String)" -> "org.jfree.chart$util.PaintUtilities#colorToString(java.awt.Color)";
  "org.jfree.chart$util.PaintUtilities#class$(java.lang.String)" -> "util.PaintUtilities#stringToColor(java.lang.String)";
  "org.jfree.chart$util.PaintUtilities#class$(java.lang.String)" -> "util.PaintUtilities#colorToString(java.awt.Color)";
  "org.jfree.chart$util.PaintUtilities#class$(java.lang.String)" -> "PaintUtilities#stringToColor(java.lang.String)";
  "org.jfree.chart$util.PaintUtilities#class$(java.lang.String)" -> "PaintUtilities#colorToString(java.awt.Color)";
  "org.jfree.data$general.Series#class$(java.lang.String)" -> "Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)";
  "org.jfree.data$general.Series#class$(java.lang.String)" -> "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)";
  "org.jfree.data$general.Series#class$(java.lang.String)" -> "general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)";
  "org.jfree.data$general.Series#class$(java.lang.String)" -> "Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)";
  "org.jfree.data$general.Series#class$(java.lang.String)" -> "general.Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "xy.MatrixSeriesCollection#<init(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "org.jfree.data$time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries,boolean)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "TimePeriodValuesCollection#<init(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "time.TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries,boolean)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "time.TimePeriodValuesCollection#<init(org.jfree.data.time.TimePeriodValues)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "TimeSeriesCollection#<init(org.jfree.data.time.TimeSeries,java.util.TimeZone)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "MatrixSeriesCollection#<init(org.jfree.data.xy.MatrixSeries)";
  "org.jfree.data$general.Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)" -> "TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries,boolean)";
  "org.jfree.data$time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries,boolean)" -> "time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries,boolean)" -> "TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries)";
  "org.jfree.data$time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries,boolean)" -> "org.jfree.data$time.TimeSeriesTableModel#<init(org.jfree.data.time.TimeSeries)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "util.SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "util.SerialUtilities#readStroke(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "util.SerialUtilities#readPaint(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "SerialUtilities#readPaint(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "SerialUtilities#isSerializable(java.lang.Class)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "SerialUtilities#readStroke(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "util.SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "util.SerialUtilities#isSerializable(java.lang.Class)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "org.jfree.chart$util.SerialUtilities#isSerializable(java.lang.Class)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "util.SerialUtilities#readShape(java.io.ObjectInputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)";
  "org.jfree.chart$util.SerialUtilities#class$(java.lang.String)" -> "SerialUtilities#readShape(java.io.ObjectInputStream)";
  "org.jfree.chart$ChartPanel#class$(java.lang.String)" -> "ChartPanel#removeChartMouseListener(org.jfree.chart.ChartMouseListener)";
  "org.jfree.chart$ChartPanel#class$(java.lang.String)" -> "ChartPanel#getListeners(java.lang.Class)";
  "org.jfree.chart$ChartPanel#class$(java.lang.String)" -> "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)";
  "org.jfree.chart$ChartPanel#class$(java.lang.String)" -> "ChartPanel#addChartMouseListener(org.jfree.chart.ChartMouseListener)";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Container#getContainerListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getComponentListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getMouseWheelListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getInputMethodListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getKeyListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getFocusListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getHierarchyListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getMouseMotionListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getHierarchyBoundsListeners()";
  "org.jfree.chart$ChartPanel#getListeners(java.lang.Class)" -> "java.awt.Component#getMouseListeners()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getYValue(int,int)" -> "time.DynamicTimeSeriesCollection#getY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getYValue(int,int)" -> "time.DynamicTimeSeriesCollection#findMaxValue()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getYValue(int,int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#findMaxValue()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getYValue(int,int)" -> "DynamicTimeSeriesCollection#getY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getYValue(int,int)" -> "DynamicTimeSeriesCollection#findMaxValue()";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getYValue(int,int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)" -> "DynamicTimeSeriesCollection#getStartY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)" -> "DynamicTimeSeriesCollection#getEndY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getEndY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)" -> "time.DynamicTimeSeriesCollection#getEndY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getStartY(int,int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#getY(int,int)" -> "time.DynamicTimeSeriesCollection#getStartY(int,int)";
  "org.jfree.chart$util.SortOrder#equals(java.lang.Object)" -> "SortOrder#readResolve()";
  "org.jfree.chart$util.SortOrder#equals(java.lang.Object)" -> "org.jfree.chart$util.SortOrder#readResolve()";
  "org.jfree.chart$util.SortOrder#equals(java.lang.Object)" -> "util.SortOrder#readResolve()";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$statistics.MeanAndStandardDeviation#getMeanValue()";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$statistics.MeanAndStandardDeviation#getStandardDeviationValue()";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$general.WaferMapDataset#isMaxValue(java.lang.Number)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.chart$plot.ThermometerPlot#getCurrentPaint()";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.XYDataItem#getYValue()";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.XYDataItem#compareTo(java.lang.Object)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultHighLowDataset#getOpenValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getRangeUpperBound(boolean)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultHighLowDataset#getCloseValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultOHLCDataset#getOpenValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getRangeLowerBound(boolean)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultHighLowDataset#getHighValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultHighLowDataset#getVolumeValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getRangeUpperBound(boolean)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultOHLCDataset#getCloseValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getXValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getYValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultOHLCDataset#getHighValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getRangeLowerBound(boolean)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultOHLCDataset#getVolumeValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$general.WaferMapDataset#isMinValue(java.lang.Number)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.XYDataItem#getXValue()";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultOHLCDataset#getLowValue(int,int)";
  "java.math.BigInteger#doubleValue()" -> "org.jfree.data$xy.DefaultHighLowDataset#getLowValue(int,int)";
  "org.jfree.data$xy.XYDataItem#getYValue()" -> "xy.XYDataItem#toString()";
  "org.jfree.data$xy.XYDataItem#getYValue()" -> "XYDataItem#toString()";
  "org.jfree.chart$util.UnitType#equals(java.lang.Object)" -> "org.jfree.chart$util.UnitType#readResolve()";
  "org.jfree.chart$util.UnitType#equals(java.lang.Object)" -> "util.UnitType#readResolve()";
  "org.jfree.chart$util.UnitType#equals(java.lang.Object)" -> "UnitType#readResolve()";
  "org.jfree.data$time.Year#getYear()" -> "time.Year#equals(java.lang.Object)";
  "org.jfree.data$time.Year#getYear()" -> "time.Year#compareTo(java.lang.Object)";
  "org.jfree.data$time.Year#getYear()" -> "Year#equals(java.lang.Object)";
  "org.jfree.data$time.Year#getYear()" -> "Year#compareTo(java.lang.Object)";
  "org.jfree.data$time.Year#getYear()" -> "org.jfree.data$time.Year#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "axis.SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "axis.SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#equals(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "axis.SegmentedTimeline$Segment#equals(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentEnd()" -> "SegmentedTimeline$Segment#equals(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "axis.SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "SegmentedTimeline$Segment#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)" -> "axis.SegmentedTimeline$Segment#compareTo(java.lang.Object)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.ModuloAxis#transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "AxisCollection#add(org.jfree.chart.axis.Axis,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.ModuloAxis#trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "AxisSpace#add(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.AxisSpace#reserved(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.AxisCollection#add(org.jfree.chart.axis.Axis,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "plot.Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "util.RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$util.RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.AxisSpace#add(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "util.RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.AxisSpace#ensureAtLeast(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "AxisState#moveCursor(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "ModuloAxis#transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.ModuloAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$plot.Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "ModuloAxis#trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$block.BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$util.RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "AxisSpace#ensureAtLeast(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$util.RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.AxisState#moveCursor(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "block.BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "util.RectangleEdge#<clinit()";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "RectangleEdge#<clinit()";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$axis.AxisState#moveCursor(double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "util.RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "CategoryLabelPositions#getLabelPosition(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "AxisSpace#reserved(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$axis.CategoryLabelPositions#getLabelPosition(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$util.RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "plot.Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "util.RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "axis.CategoryLabelPositions#getLabelPosition(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$util.RectangleEdge#<clinit()" -> "org.jfree.chart$plot.Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)";
  "org.jfree.chart$block.BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)" -> "block.BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)";
  "org.jfree.chart$block.BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)" -> "BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)";
  "org.jfree.chart$util.RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)" -> "ModuloAxis#transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)";
  "org.jfree.chart$util.RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)" -> "axis.ModuloAxis#transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)";
  "org.jfree.chart$util.RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)" -> "ModuloAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.lang.String#hashCode()" -> "org.jfree.chart$text.TextAnchor#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$plot.SeriesRenderingOrder#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$plot.DatasetRenderingOrder#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$plot.PlotOrientation#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.data$time.TimePeriodAnchor#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.data$statistics.HistogramType#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.RectangleAnchor#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$text.TextBlockAnchor#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$text.TextFragment#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)";
  "java.lang.String#hashCode()" -> "org.jfree.chart$urls.StandardCategoryURLGenerator#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$plot.PieLabelLinkStyle#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.LengthAdjustmentType#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$plot.DialShape#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.data$RangeType#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.HorizontalAlignment#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.data$KeyedValueComparatorType#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.VerticalAlignment#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$event.ChartChangeEventType#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.GradientPaintTransformType#hashCode()";
  "java.lang.String#hashCode()" -> "org.jfree.chart$util.UnitType#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "annotations.XYTextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "annotations.TextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "org.jfree.chart$axis.CategoryLabelPosition#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "plot.dial.DialTextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "CategoryLabelPosition#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "dial.DialTextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "XYTextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "TextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "DialTextAnnotation#hashCode()";
  "org.jfree.chart$text.TextAnchor#hashCode()" -> "axis.CategoryLabelPosition#hashCode()";
  "org.jfree.chart$axis.CategoryLabelPosition#hashCode()" -> "axis.CategoryLabelPositions#hashCode()";
  "org.jfree.chart$axis.CategoryLabelPosition#hashCode()" -> "CategoryLabelPositions#hashCode()";
  "org.jfree.data$time.TimePeriodAnchor#hashCode()" -> "TimeSeriesCollection#hashCode()";
  "org.jfree.data$time.TimePeriodAnchor#hashCode()" -> "time.TimeSeriesCollection#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "labels.StandardCategorySeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "StandardXYSeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "entity.ChartEntity#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "ChartEntity#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "labels.StandardXYSeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "org.jfree.chart$labels.StandardXYSeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCode(int,java.lang.String)" -> "StandardCategorySeriesLabelGenerator#hashCode()";
  "org.jfree.chart$util.GradientPaintTransformType#hashCode()" -> "util.StandardGradientPaintTransformer#hashCode()";
  "org.jfree.chart$util.GradientPaintTransformType#hashCode()" -> "org.jfree.chart$util.StandardGradientPaintTransformer#hashCode()";
  "org.jfree.chart$util.GradientPaintTransformType#hashCode()" -> "StandardGradientPaintTransformer#hashCode()";
  "util.StandardGradientPaintTransformer#hashCode()" -> "org.jfree.chart$plot.dial.DialBackground#hashCode()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#hashCode()" -> "DialBackground#hashCode()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#hashCode()" -> "plot.dial.DialBackground#hashCode()";
  "org.jfree.chart$util.StandardGradientPaintTransformer#hashCode()" -> "dial.DialBackground#hashCode()";
  "org.jfree.chart$util.UnitType#hashCode()" -> "RectangleInsets#hashCode()";
  "org.jfree.chart$util.UnitType#hashCode()" -> "util.RectangleInsets#hashCode()";
  "org.jfree.chart$annotations.CategoryTextAnnotation#clone()" -> "CategoryPointerAnnotation#clone()";
  "org.jfree.chart$annotations.CategoryTextAnnotation#clone()" -> "annotations.CategoryPointerAnnotation#clone()";
  "org.jfree.chart$axis.DateTickMarkPosition#<init(java.lang.String)" -> "org.jfree.chart$axis.DateTickMarkPosition#<clinit()";
  "org.jfree.chart$axis.DateTickMarkPosition#<clinit()" -> "DateTickMarkPosition#<clinit()";
  "org.jfree.chart$axis.DateTickMarkPosition#<clinit()" -> "axis.DateTickMarkPosition#<clinit()";
  "org.jfree.chart$axis.DateTickMarkPosition#<clinit()" -> "DateTickMarkPosition#readResolve()";
  "org.jfree.chart$axis.DateTickMarkPosition#<clinit()" -> "axis.DateTickMarkPosition#readResolve()";
  "org.jfree.chart$axis.DateTickMarkPosition#<clinit()" -> "org.jfree.chart$axis.DateTickMarkPosition#readResolve()";
  "java.util.ImmutableCollections$AbstractImmutableList#remove(int)" -> "org.jfree.data$DefaultKeyedValues2D#removeRow(int)";
  "java.util.ImmutableCollections$AbstractImmutableList#remove(int)" -> "org.jfree.data$KeyedObjects2D#removeRow(int)";
  "java.util.ImmutableCollections$AbstractImmutableList#remove(int)" -> "org.jfree.data$KeyedObjects#removeValue(int)";
  "org.jfree.chart$axis.DateTickMarkPosition#toString()" -> "axis.DateTickMarkPosition#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickMarkPosition#toString()" -> "org.jfree.chart$axis.DateTickMarkPosition#equals(java.lang.Object)";
  "org.jfree.chart$axis.DateTickMarkPosition#toString()" -> "DateTickMarkPosition#equals(java.lang.Object)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$axis.StandardTickUnitSource#<clinit()";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$plot.CrosshairState#updateCrosshairY(double,int)";
  "java.lang.Math#<clinit()" -> "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$util.LogFormat#calculateLog(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$ChartPanel#getPointInRectangle(int,int,java.awt.geom.Rectangle2D)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$axis.LogarithmicAxis#adjustedPow10(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$axis.LogAxis#calculateLog(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$block.AbstractBlock#trimToContentWidth(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.data$function.NormalDistributionFunction2D#getValue(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.data$time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$plot.CrosshairState#updateCrosshairX(double,int)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$plot.PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$plot.PiePlot3D#isAngleAtFront(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.data$function.PowerFunction2D#getValue(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.data$xy.Vector#getLength()";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#round(double,int)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$block.AbstractBlock#trimToContentHeight(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$axis.AxisSpace#ensureAtLeast(org.jfree.chart.axis.AxisSpace)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$plot.PiePlot3D#isAngleAtBack(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$util.ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$axis.LogAxis#calculateValue(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$util.ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)";
  "java.lang.Math#<clinit()" -> "org.jfree.chart$renderer.category.BarRenderer#calculateBarL0L1(double)";
  "java.lang.Math#<clinit()" -> "org.jfree.data$xy.Vector#getAngle()";
  "org.jfree.chart$axis.StandardTickUnitSource#<clinit()" -> "StandardTickUnitSource#<clinit()";
  "org.jfree.chart$axis.StandardTickUnitSource#<clinit()" -> "axis.StandardTickUnitSource#<clinit()";
  "org.jfree.chart$util.LogFormat#calculateLog(double)" -> "util.LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.LogFormat#calculateLog(double)" -> "LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.LogFormat#calculateLog(double)" -> "util.LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.LogFormat#calculateLog(double)" -> "LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$axis.LogarithmicAxis#adjustedPow10(double)" -> "axis.LogarithmicAxis#switchedPow10(double)";
  "org.jfree.chart$axis.LogarithmicAxis#adjustedPow10(double)" -> "LogarithmicAxis#switchedPow10(double)";
  "org.jfree.chart$axis.LogarithmicAxis#adjustedPow10(double)" -> "org.jfree.chart$axis.LogarithmicAxis#switchedPow10(double)";
  "org.jfree.data$time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)" -> "org.jfree.data$time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)" -> "time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)" -> "SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)";
  "org.jfree.chart$plot.PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)" -> "DefaultPolarItemRenderer#drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)" -> "renderer.DefaultPolarItemRenderer#drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PiePlot3D#isAngleAtFront(double)" -> "PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)";
  "org.jfree.chart$plot.PiePlot3D#isAngleAtFront(double)" -> "plot.PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "util.StrokeList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "org.jfree.chart$util.StrokeList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "org.jfree.chart$util.BooleanList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "org.jfree.chart$util.PaintList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "ObjectList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "util.ShapeList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "org.jfree.chart$util.ObjectList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "util.ObjectList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "ShapeList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "util.BooleanList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "util.PaintList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "PaintList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "BooleanList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "org.jfree.chart$util.ShapeList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init()" -> "StrokeList#<init()";
  "java.awt.geom$Path2D$Float#lineTo(float,float)" -> "org.jfree.chart$util.ShapeUtilities#createRegularCross(float,float)";
  "java.awt.geom$Path2D$Float#lineTo(float,float)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#createVerticalBlock(double,double,double,double,boolean)";
  "java.awt.geom$Path2D$Float#lineTo(float,float)" -> "org.jfree.chart$util.ShapeUtilities#createDiamond(float)";
  "java.awt.geom$Path2D$Float#lineTo(float,float)" -> "org.jfree.chart$renderer.category.StackedBarRenderer3D#createHorizontalBlock(double,double,double,double,boolean)";
  "java.awt.geom$Path2D$Float#lineTo(float,float)" -> "org.jfree.chart$util.ShapeUtilities#createUpTriangle(float)";
  "java.awt.geom$Path2D$Float#lineTo(float,float)" -> "org.jfree.chart$util.ShapeUtilities#createDownTriangle(float)";
  "java.util.ArrayList#add(java.lang.Object)" -> "org.jfree.chart$urls.CustomPieURLGenerator#addURLs(java.util.Map)";
  "java.util.ArrayList#add(java.lang.Object)" -> "org.jfree.chart$urls.CustomXYURLGenerator#addURLSeries(java.util.List)";
  "java.util.ArrayList#add(java.lang.Object)" -> "org.jfree.data$io.CSV#extractColumnKeys(java.lang.String)";
  "org.jfree.chart$urls.CustomPieURLGenerator#addURLs(java.util.Map)" -> "CustomPieURLGenerator#clone()";
  "org.jfree.chart$urls.CustomPieURLGenerator#addURLs(java.util.Map)" -> "urls.CustomPieURLGenerator#clone()";
  "org.jfree.data$xml.ValueHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)";
  "org.jfree.data$xml.ValueHandler#characters(char[],int,int)" -> "org.xml.sax$helpers.XMLFilterImpl#characters(char[],int,int)";
  "org.jfree.data$xml.ValueHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.serializer.ToTextSAXHandler#characters(char[],int,int)";
  "org.jfree.data$xml.ValueHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.utils.FastStringBuffer#sendSAXcharacters(org.xml.sax.ContentHandler,int,int)";
  "org.jfree.data$xml.ValueHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)";
  "org.jfree.data$xml.ValueHandler#characters(char[],int,int)" -> "xml.RootHandler#characters(char[],int,int)";
  "xml.RootHandler#characters(char[],int,int)" -> "org.jfree.data$xml.RootHandler#characters(char[],int,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.TransformerHandlerImpl#characters(char[],int,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.StAXEvent2SAX#handleCharacters(javax.xml.stream.events.Characters)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.serializer.ToTextSAXHandler#characters(java.lang.String)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.serializer.ToHTMLSAXHandler#characters(char[],int,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xalan.internal.xsltc.trax.StAXStream2SAX#handleCharacters()";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.serializer.TreeWalker#dispatachChars(org.w3c.dom.Node)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xerces.internal.jaxp.JAXPValidatorComponent$XNI2SAX#characters(com.sun.org.apache.xerces.internal.xni.XMLString,com.sun.org.apache.xerces.internal.xni.Augmentations)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xpath.internal.objects.XString#dispatchCharactersEvents(org.xml.sax.ContentHandler)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#characters(char[],int,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xpath.internal.objects.XStringForChars#dispatchCharactersEvents(org.xml.sax.ContentHandler)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.utils.FastStringBuffer#sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.utils.TreeWalker#dispatachChars(org.w3c.dom.Node)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.serializer.ToXMLSAXHandler#characters(char[],int,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xml.internal.dtm.ref.dom2dtm.DOM2DTM#dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "com.sun.org$apache.xerces.internal.parsers.AbstractSAXParser#characters(com.sun.org.apache.xerces.internal.xni.XMLString,com.sun.org.apache.xerces.internal.xni.Augmentations)";
  "org.jfree.data$xml.RootHandler#characters(char[],int,int)" -> "RootHandler#characters(char[],int,int)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int[])";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "xy.XIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "xy.DefaultIntervalXYDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int[])";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "statistics.HistogramDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "xy.YIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "XYIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "general.CombinedDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "HistogramDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$general.CombinedDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "XIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int[])";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "YIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$xy.DefaultIntervalXYDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$statistics.HistogramDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "time.TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "xy.XYIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$xy.XIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "TimeTableXYDataset#<init(java.util.TimeZone,java.util.Locale)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "SimpleHistogramDataset#<init(java.lang.Comparable)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$xy.YIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "statistics.SimpleHistogramDataset#<init(java.lang.Comparable)";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "CombinedDataset#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "org.jfree.data$xy.XYIntervalSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractIntervalXYDataset#<init()" -> "DefaultIntervalXYDataset#<init()";
  "org.jfree.data$general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int[])" -> "org.jfree.data$general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int)";
  "org.jfree.data$general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int[])" -> "general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int)";
  "org.jfree.data$general.SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int[])" -> "SubSeriesDataset#<init(org.jfree.data.general.SeriesDataset,int)";
  "org.jfree.chart$text.TextBlockAnchor#equals(java.lang.Object)" -> "text.TextBlockAnchor#readResolve()";
  "org.jfree.chart$text.TextBlockAnchor#equals(java.lang.Object)" -> "TextBlockAnchor#readResolve()";
  "org.jfree.chart$text.TextBlockAnchor#equals(java.lang.Object)" -> "org.jfree.chart$text.TextBlockAnchor#readResolve()";
  "java.awt.geom$RectangularShape#getMinX()" -> "org.jfree.chart$util.RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)" -> "util.ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)";
  "org.jfree.chart$util.RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)" -> "ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.XYPlot#getRangeAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.CategoryPlot#getDomainAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.CategoryPlot#getDomainAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.XYPlot#getDomainAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.XYPlot#getRangeAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "XYPlot#getRangeAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.XYPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.dial.DialPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.CategoryPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "CategoryPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "CategoryPlot#getRangeAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "XYPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "dial.DialPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.dial.DialPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "XYPlot#getDomainAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "CategoryPlot#getDomainAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.CategoryPlot#getRangeAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.CategoryPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "org.jfree.chart$plot.XYPlot#getDomainAxisCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.XYPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "DialPlot#getDatasetCount()";
  "org.jfree.chart$util.AbstractObjectList#size()" -> "plot.CategoryPlot#getRangeAxisCount()";
  "org.jfree.data$time.FixedMillisecond#getTime()" -> "time.FixedMillisecond#equals(java.lang.Object)";
  "org.jfree.data$time.FixedMillisecond#getTime()" -> "org.jfree.data$time.FixedMillisecond#equals(java.lang.Object)";
  "org.jfree.data$time.FixedMillisecond#getTime()" -> "FixedMillisecond#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "labels.AbstractPieItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "java.text.DateFormat#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "org.jfree.chart$labels.AbstractPieItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "AbstractPieItemLabelGenerator#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "RelativeDateFormat#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "util.RelativeDateFormat#equals(java.lang.Object)";
  "org.jfree.chart$util.LogFormat#equals(java.lang.Object)" -> "java.text.SimpleDateFormat#checkNegativeNumberExpression()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMaxRegularValue()" -> "DefaultBoxAndWhiskerXYDataset#getMaxRegularValue(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMaxRegularValue()" -> "statistics.DefaultBoxAndWhiskerXYDataset#getMaxRegularValue(int,int)";
  "org.jfree.chart$block.LengthConstraintType#<clinit()" -> "LengthConstraintType#<clinit()";
  "org.jfree.chart$block.LengthConstraintType#<clinit()" -> "block.LengthConstraintType#<clinit()";
  "java.util.AbstractList#clear()" -> "org.jfree.data$KeyedObjects2D#clear()";
  "java.util.AbstractList#clear()" -> "org.jfree.data$DefaultKeyedValues2D#clear()";
  "java.util.AbstractList#clear()" -> "org.jfree.chart$plot.AbstractPieLabelDistributor#clear()";
  "java.util.AbstractList#clear()" -> "org.jfree.chart$entity.StandardEntityCollection#clear()";
  "java.util.AbstractList#clear()" -> "org.jfree.data$KeyedObjects#clear()";
  "java.util.AbstractList#clear()" -> "org.jfree.chart$block.BlockContainer#clear()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultPlotEditor#getBackgroundPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultChartEditor#getBackgroundPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultTitleEditor#getTitlePaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "org.jfree.chart$editor.DefaultPlotEditor#getOutlinePaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultPlotEditor#getBackgroundPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultPlotEditor#getOutlinePaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultTitleEditor#attemptPaintSelection()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultAxisEditor#getLabelPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultAxisEditor#getTickLabelPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "org.jfree.chart$editor.DefaultTitleEditor#getTitlePaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultAxisEditor#getLabelPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultAxisEditor#getTickLabelPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "org.jfree.chart$editor.DefaultChartEditor#getBackgroundPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultTitleEditor#attemptPaintSelection()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "editor.DefaultPlotEditor#getOutlinePaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "org.jfree.chart$editor.DefaultPlotEditor#getBackgroundPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultChartEditor#getBackgroundPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "org.jfree.chart$editor.DefaultAxisEditor#getTickLabelPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "org.jfree.chart$editor.DefaultAxisEditor#getLabelPaint()";
  "org.jfree.chart$ui.PaintSample#getPaint()" -> "DefaultTitleEditor#getTitlePaint()";
  "org.jfree.chart$util.RectangleInsets#getBottom()" -> "axis.LogAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)";
  "org.jfree.chart$util.RectangleInsets#getBottom()" -> "LogAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)";
  "org.jfree.chart$util.RectangleInsets#getBottom()" -> "axis.NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)";
  "org.jfree.chart$util.RectangleInsets#getBottom()" -> "NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)";
  "org.jfree.chart$plot.DatasetRenderingOrder#toString()" -> "plot.DatasetRenderingOrder#equals(java.lang.Object)";
  "org.jfree.chart$plot.DatasetRenderingOrder#toString()" -> "DatasetRenderingOrder#equals(java.lang.Object)";
  "java.lang.StringBuffer#append(java.lang.String)" -> "org.jfree.data$xml.KeyHandler#characters(char[],int,int)";
  "java.lang.StringBuffer#append(java.lang.String)" -> "org.jfree.chart$axis.QuarterDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)";
  "java.lang.StringBuffer#append(java.lang.String)" -> "org.jfree.chart$util.HexNumberFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.HexNumberFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)" -> "util.HexNumberFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.HexNumberFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.jfree.chart$util.HexNumberFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.HexNumberFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)" -> "HexNumberFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.HorizontalAlignment#equals(java.lang.Object)" -> "org.jfree.chart$util.HorizontalAlignment#readResolve()";
  "org.jfree.chart$util.HorizontalAlignment#equals(java.lang.Object)" -> "util.HorizontalAlignment#readResolve()";
  "org.jfree.chart$util.HorizontalAlignment#equals(java.lang.Object)" -> "HorizontalAlignment#readResolve()";
  "sun.java2d.SunGraphics2D#draw(java.awt.Shape)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawLowFarOut(double,java.awt.Graphics2D,double,double)";
  "sun.java2d.SunGraphics2D#draw(java.awt.Shape)" -> "org.jfree.chart$renderer.category.BoxAndWhiskerRenderer#drawHighFarOut(double,java.awt.Graphics2D,double,double)";
  "sun.java2d.SunGraphics2D#draw(java.awt.Shape)" -> "org.jfree.chart$util.ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)";
  "sun.java2d.SunGraphics2D#draw(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawLowFarOut(double,java.awt.Graphics2D,double,double)";
  "sun.java2d.SunGraphics2D#draw(java.awt.Shape)" -> "org.jfree.chart$renderer.xy.XYBoxAndWhiskerRenderer#drawHighFarOut(double,java.awt.Graphics2D,double,double)";
  "java.awt.geom$Line2D$Double#<init()" -> "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "java.awt.geom$Line2D$Double#<init()" -> "org.jfree.chart$renderer.category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "XYBarRenderer$XYBarRendererState#<init(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.StandardXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.StandardXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StandardXYItemRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "StandardXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.StackedXYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.StackedXYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.StackedXYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "StackedXYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYStepAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYStepAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "XYStepAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "XYDifferenceRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.XYStepAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYDifferenceRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYDifferenceRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.XYDifferenceRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "XYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYAreaRenderer$XYAreaRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.XYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYLineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "XYLineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYLineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.xy.DeviationRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.DeviationRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "DeviationRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.xy.DeviationRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.DeviationRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.CategoryStepRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.CategoryStepRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryStepRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "category.CategoryStepRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$util.SortOrder#toString()" -> "util.SortOrder#equals(java.lang.Object)";
  "org.jfree.chart$util.SortOrder#toString()" -> "SortOrder#equals(java.lang.Object)";
  "plot.CategoryPlot#isDomainZoomable()" -> "org.jfree.chart$ChartPanel#displayPopupMenu(int,int)";
  "plot.CategoryPlot#isDomainZoomable()" -> "org.jfree.chart$ChartPanel#setDomainZoomable(boolean)";
  "org.jfree.chart$ChartPanel#setDomainZoomable(boolean)" -> "ChartPanel#setMouseZoomable(boolean,boolean)";
  "org.jfree.chart$ChartPanel#setDomainZoomable(boolean)" -> "org.jfree.chart$ChartPanel#setMouseZoomable(boolean,boolean)";
  "org.jfree.chart$ChartPanel#setMouseZoomable(boolean,boolean)" -> "ChartPanel#setMouseZoomable(boolean)";
  "org.jfree.chart$ChartPanel#setMouseZoomable(boolean,boolean)" -> "org.jfree.chart$ChartPanel#setMouseZoomable(boolean)";
  "org.jfree.data$KeyedValueComparatorType#<clinit()" -> "KeyedValueComparatorType#<clinit()";
  "org.jfree.chart$axis.Axis#clone()" -> "ValueAxis#clone()";
  "org.jfree.chart$axis.Axis#clone()" -> "CategoryAxis#clone()";
  "org.jfree.chart$axis.Axis#clone()" -> "axis.CategoryAxis#clone()";
  "java.lang.Integer#<clinit()" -> "org.jfree.chart$ui.FontChooserPanel#getSelectedSize()";
  "java.lang.Integer#<clinit()" -> "org.jfree.data$time.SerialDate#stringToMonthCode(java.lang.String)";
  "java.lang.Integer#<clinit()" -> "org.jfree.data$time.Week#stringToWeek(java.lang.String)";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedSize()" -> "FontChooserPanel#getSelectedFont()";
  "org.jfree.chart$ui.FontChooserPanel#getSelectedSize()" -> "ui.FontChooserPanel#getSelectedFont()";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.Day#getSerialIndex()";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#compare(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "Day#getSerialIndex()";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#hashCode()";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#hashCode()";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.Day#getSerialIndex()";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "time.SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "org.jfree.data$time.SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)";
  "org.jfree.data$time.SpreadsheetDate#toSerial()" -> "SpreadsheetDate#hashCode()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "org.jfree.data$time.Millisecond#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "time.Minute#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "org.jfree.data$time.Second#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "org.jfree.data$time.Hour#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "Millisecond#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "Minute#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "time.Second#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "time.Millisecond#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "time.Hour#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "org.jfree.data$time.Minute#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "Hour#getSerialIndex()";
  "org.jfree.data$time.Day#getSerialIndex()" -> "Second#getSerialIndex()";
  "org.jfree.data$time.SpreadsheetDate#hashCode()" -> "Day#hashCode()";
  "org.jfree.data$time.SpreadsheetDate#hashCode()" -> "org.jfree.data$time.Day#hashCode()";
  "org.jfree.data$time.SpreadsheetDate#hashCode()" -> "time.Day#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "org.jfree.data$time.Minute#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "time.Minute#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "Second#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "time.Second#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "Hour#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "time.Hour#hashCode()";
  "org.jfree.data$time.Day#hashCode()" -> "Minute#hashCode()";
  "org.jfree.data$time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)" -> "SpreadsheetDate#compareTo(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)" -> "org.jfree.data$time.SpreadsheetDate#compareTo(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)" -> "Day#compareTo(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)" -> "time.SpreadsheetDate#compareTo(java.lang.Object)";
  "org.jfree.data$time.SpreadsheetDate#compare(org.jfree.data.time.SerialDate)" -> "time.Day#compareTo(java.lang.Object)";
  "org.jfree.chart$block.LengthConstraintType#toString()" -> "block.LengthConstraintType#equals(java.lang.Object)";
  "org.jfree.chart$block.LengthConstraintType#toString()" -> "LengthConstraintType#equals(java.lang.Object)";
  "org.jfree.chart$block.LengthConstraintType#toString()" -> "RectangleConstraint#toString()";
  "org.jfree.chart$block.LengthConstraintType#toString()" -> "block.RectangleConstraint#toString()";
  "org.jfree.data$Range#getUpperBound()" -> "ModuloAxis#getDisplayLength()";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.chart$axis.ModuloAxis#getDisplayLength()";
  "org.jfree.data$Range#getUpperBound()" -> "axis.ModuloAxis#getDisplayLength()";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.chart$axis.ValueAxis#getUpperBound()";
  "org.jfree.data$Range#getUpperBound()" -> "ValueAxis#getUpperBound()";
  "org.jfree.data$Range#getUpperBound()" -> "axis.ValueAxis#getUpperBound()";
  "org.jfree.chart$axis.ModuloAxis#getDisplayLength()" -> "ModuloAxis#getDisplayCentralValue()";
  "org.jfree.chart$axis.ModuloAxis#getDisplayLength()" -> "axis.ModuloAxis#getDisplayCentralValue()";
  "org.jfree.chart$axis.ModuloAxis#getDisplayLength()" -> "org.jfree.chart$axis.ModuloAxis#getDisplayCentralValue()";
  "org.jfree.chart$axis.ValueAxis#getUpperBound()" -> "plot.PolarPlot#getMaxRadius()";
  "org.jfree.chart$axis.ValueAxis#getUpperBound()" -> "PolarPlot#getMaxRadius()";
  "org.jfree.chart$axis.ValueAxis#getUpperBound()" -> "org.jfree.chart$plot.PolarPlot#getMaxRadius()";
  "org.jfree.chart$plot.PolarPlot#getMaxRadius()" -> "plot.PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.PolarPlot#getMaxRadius()" -> "PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)";
  "java.util.Date#<init(long)" -> "org.jfree.chart$axis.SegmentedTimeline#getDate(long)";
  "java.util.Date#<init(long)" -> "org.jfree.data$time.FixedMillisecond#<init(long)";
  "org.jfree.chart$axis.SegmentedTimeline#getDate(long)" -> "axis.SegmentedTimeline$Segment#getDate()";
  "org.jfree.chart$axis.SegmentedTimeline#getDate(long)" -> "SegmentedTimeline$Segment#getDate()";
  "org.jfree.chart$axis.SegmentedTimeline#getDate(long)" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#getDate()";
  "org.jfree.data$time.TimePeriodAnchor#<clinit()" -> "time.TimePeriodAnchor#<clinit()";
  "org.jfree.data$time.TimePeriodAnchor#<clinit()" -> "org.jfree.data$time.ohlc.OHLCSeriesCollection#<init()";
  "org.jfree.data$time.TimePeriodAnchor#<clinit()" -> "ohlc.OHLCSeriesCollection#<init()";
  "org.jfree.data$time.TimePeriodAnchor#<clinit()" -> "TimePeriodAnchor#<clinit()";
  "org.jfree.data$time.TimePeriodAnchor#<clinit()" -> "OHLCSeriesCollection#<init()";
  "org.jfree.data$time.TimePeriodAnchor#<clinit()" -> "time.ohlc.OHLCSeriesCollection#<init()";
  "org.jfree.chart$ChartRenderingInfo#getPlotInfo()" -> "ChartPanel#getScreenDataArea()";
  "org.jfree.chart$LegendRenderingOrder#toString()" -> "LegendRenderingOrder#equals(java.lang.Object)";
  "org.jfree.chart$axis.TickType#equals(java.lang.Object)" -> "org.jfree.chart$axis.TickType#readResolve()";
  "org.jfree.chart$axis.TickType#equals(java.lang.Object)" -> "TickType#readResolve()";
  "org.jfree.chart$axis.TickType#equals(java.lang.Object)" -> "axis.TickType#readResolve()";
  "org.jfree.chart$plot.DialShape#toString()" -> "DialShape#equals(java.lang.Object)";
  "org.jfree.chart$plot.DialShape#toString()" -> "plot.DialShape#equals(java.lang.Object)";
  "org.jfree.chart$plot.DialShape#toString()" -> "org.jfree.chart$plot.DialShape#equals(java.lang.Object)";
  "org.jfree.chart$plot.DialShape#equals(java.lang.Object)" -> "org.jfree.chart$plot.DialShape#readResolve()";
  "org.jfree.chart$plot.DialShape#equals(java.lang.Object)" -> "DialShape#readResolve()";
  "org.jfree.chart$plot.DialShape#equals(java.lang.Object)" -> "plot.DialShape#readResolve()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#equals(java.lang.Object)" -> "DialPointer#equals(java.lang.Object)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#equals(java.lang.Object)" -> "plot.dial.DialPointer#equals(java.lang.Object)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)" -> "XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)" -> "plot.XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$plot.PlotRenderingInfo#getOwner()" -> "RendererState#getEntityCollection()";
  "org.jfree.chart$plot.PlotRenderingInfo#getOwner()" -> "renderer.RendererState#getEntityCollection()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$renderer.OutlierList#<init(org.jfree.chart.renderer.Outlier)";
  "java.util.ArrayList#<init()" -> "org.jfree.data$xy.DefaultXYZDataset#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$LegendItemCollection#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$labels.CustomXYToolTipGenerator#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$plot.AbstractPieLabelDistributor#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$axis.MarkerAxisBand#<init(org.jfree.chart.axis.NumberAxis,double,double,double,double,java.awt.Font)";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$text.TextBlock#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$jdbc.JDBCXYDataset#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#<init(java.lang.Comparable)";
  "java.util.ArrayList#<init()" -> "org.jfree.data$DefaultKeyedValues#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$text.TextLine#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$axis.AxisState#<init(double)";
  "java.util.ArrayList#<init()" -> "org.jfree.data$gantt.TaskSeriesCollection#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$servlet.ChartDeleter#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$axis.TickUnits#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$renderer.OutlierListCollection#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$ui.BasicProjectInfo#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$DefaultKeyedValues2D#<init(boolean)";
  "java.util.ArrayList#<init()" -> "org.jfree.data$KeyedObjects2D#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$urls.CustomXYURLGenerator#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$xy.DefaultWindDataset#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$urls.CustomPieURLGenerator#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$axis.AxisCollection#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$xy.VectorSeriesCollection#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.chart$entity.StandardEntityCollection#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$xy.DefaultXYDataset#<init()";
  "java.util.ArrayList#<init()" -> "org.jfree.data$KeyedObjects#<init()";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#<init()" -> "plot.PieLabelDistributor#<init(int)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#<init()" -> "org.jfree.chart$plot.PieLabelDistributor#<init(int)";
  "org.jfree.chart$plot.AbstractPieLabelDistributor#<init()" -> "PieLabelDistributor#<init(int)";
  "org.jfree.data$jdbc.JDBCXYDataset#<init()" -> "jdbc.JDBCXYDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#<init()" -> "org.jfree.data$jdbc.JDBCXYDataset#<init(java.sql.Connection)";
  "org.jfree.data$jdbc.JDBCXYDataset#<init()" -> "JDBCXYDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#<init()" -> "JDBCXYDataset#<init(java.sql.Connection)";
  "org.jfree.data$jdbc.JDBCXYDataset#<init()" -> "org.jfree.data$jdbc.JDBCXYDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$jdbc.JDBCXYDataset#<init()" -> "jdbc.JDBCXYDataset#<init(java.sql.Connection)";
  "org.jfree.data$DefaultKeyedValues#<init()" -> "general.DefaultPieDataset#<init()";
  "org.jfree.data$DefaultKeyedValues#<init()" -> "org.jfree.data$xml.CategorySeriesHandler#<init(org.jfree.data.xml.RootHandler)";
  "org.jfree.data$DefaultKeyedValues#<init()" -> "org.jfree.data$general.DefaultPieDataset#<init()";
  "org.jfree.data$DefaultKeyedValues#<init()" -> "xml.CategorySeriesHandler#<init(org.jfree.data.xml.RootHandler)";
  "org.jfree.data$DefaultKeyedValues#<init()" -> "DefaultPieDataset#<init()";
  "org.jfree.data$DefaultKeyedValues#<init()" -> "CategorySeriesHandler#<init(org.jfree.data.xml.RootHandler)";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "general.DefaultKeyedValuesDataset#<init()";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "JDBCPieDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "JDBCPieDataset#<init(java.sql.Connection)";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "DefaultKeyedValuesDataset#<init()";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "jdbc.JDBCPieDataset#<init(java.sql.Connection)";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "org.jfree.data$jdbc.JDBCPieDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$general.DefaultPieDataset#<init()" -> "jdbc.JDBCPieDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$axis.AxisState#<init(double)" -> "axis.AxisState#<init()";
  "org.jfree.chart$axis.AxisState#<init(double)" -> "AxisState#<init()";
  "org.jfree.chart$ui.BasicProjectInfo#<init()" -> "BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init()" -> "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init()" -> "ProjectInfo#<init()";
  "org.jfree.chart$ui.BasicProjectInfo#<init()" -> "ui.ProjectInfo#<init()";
  "org.jfree.chart$ui.BasicProjectInfo#<init()" -> "org.jfree.chart$ui.ProjectInfo#<init()";
  "org.jfree.chart$ui.BasicProjectInfo#<init()" -> "ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "ProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "ui.ProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.BasicProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "org.jfree.chart$ui.ProjectInfo#<init(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.ProjectInfo#<init()" -> "JFreeChartInfo#<init()";
  "org.jfree.data$DefaultKeyedValues2D#<init(boolean)" -> "org.jfree.data$DefaultKeyedValues2D#<init()";
  "org.jfree.data$DefaultKeyedValues2D#<init(boolean)" -> "DefaultKeyedValues2D#<init()";
  "org.jfree.data$DefaultKeyedValues2D#<init()" -> "org.jfree.data$category.DefaultCategoryDataset#<init()";
  "org.jfree.data$DefaultKeyedValues2D#<init()" -> "WaferMapDataset#<init(int,int,java.lang.Number)";
  "org.jfree.data$DefaultKeyedValues2D#<init()" -> "DefaultCategoryDataset#<init()";
  "org.jfree.data$DefaultKeyedValues2D#<init()" -> "category.DefaultCategoryDataset#<init()";
  "org.jfree.data$DefaultKeyedValues2D#<init()" -> "general.WaferMapDataset#<init(int,int,java.lang.Number)";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "DefaultKeyedValues2DDataset#<init()";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "jdbc.JDBCCategoryDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "org.jfree.data$jdbc.JDBCCategoryDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "JDBCCategoryDataset#<init(java.sql.Connection)";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "jdbc.JDBCCategoryDataset#<init(java.sql.Connection)";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "JDBCCategoryDataset#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$category.DefaultCategoryDataset#<init()" -> "general.DefaultKeyedValues2DDataset#<init()";
  "org.jfree.data$KeyedObjects2D#<init()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#<init()";
  "org.jfree.data$KeyedObjects2D#<init()" -> "statistics.DefaultStatisticalCategoryDataset#<init()";
  "org.jfree.data$KeyedObjects2D#<init()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#<init()";
  "org.jfree.data$KeyedObjects2D#<init()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#<init()";
  "org.jfree.data$KeyedObjects2D#<init()" -> "DefaultStatisticalCategoryDataset#<init()";
  "org.jfree.data$KeyedObjects2D#<init()" -> "DefaultBoxAndWhiskerCategoryDataset#<init()";
  "org.jfree.chart$renderer.AbstractRenderer#isSeriesVisible(int)" -> "AbstractRenderer#getItemVisible(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#isSeriesVisible(int)" -> "renderer.AbstractRenderer#getItemVisible(int,int)";
  "java.util.concurrent$CopyOnWriteArrayList#isEmpty()" -> "org.jfree.chart$block.BlockContainer#isEmpty()";
  "java.util.Date#<clinit()" -> "org.jfree.data$time.FixedMillisecond#<init()";
  "java.lang.String#substring(int,int)" -> "org.jfree.data$io.CSV#removeStringDelimiters(java.lang.String)";
  "org.jfree.data$io.CSV#removeStringDelimiters(java.lang.String)" -> "CSV#extractColumnKeys(java.lang.String)";
  "org.jfree.data$io.CSV#removeStringDelimiters(java.lang.String)" -> "io.CSV#extractColumnKeys(java.lang.String)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "org.jfree.chart$util.RectangleInsets#extendHeight(double)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "util.RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "RectangleInsets#extendHeight(double)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "util.RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "util.RectangleInsets#extendHeight(double)";
  "org.jfree.chart$util.RectangleInsets#calculateTopOutset(double)" -> "RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)";
  "org.jfree.chart$util.RectangleInsets#extendHeight(double)" -> "block.AbstractBlock#calculateTotalHeight(double)";
  "org.jfree.chart$util.RectangleInsets#extendHeight(double)" -> "org.jfree.chart$block.AbstractBlock#calculateTotalHeight(double)";
  "org.jfree.chart$util.RectangleInsets#extendHeight(double)" -> "AbstractBlock#calculateTotalHeight(double)";
  "java.math.BigInteger#hashCode()" -> "org.jfree.data$general.DefaultValueDataset#hashCode()";
  "org.jfree.chart$util.Layer#equals(java.lang.Object)" -> "org.jfree.chart$util.Layer#readResolve()";
  "org.jfree.chart$util.Layer#equals(java.lang.Object)" -> "Layer#readResolve()";
  "org.jfree.chart$util.Layer#equals(java.lang.Object)" -> "util.Layer#readResolve()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getPlot()" -> "renderer.category.AbstractCategoryItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getPlot()" -> "AbstractCategoryItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getPlot()" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<clinit()" -> "editor.DefaultNumberAxisEditor#<clinit()";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<clinit()" -> "editor.DefaultNumberAxisEditor#attemptGridPaintSelection()";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<clinit()" -> "DefaultNumberAxisEditor#attemptGridPaintSelection()";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#<clinit()" -> "DefaultNumberAxisEditor#<clinit()";
  "org.jfree.chart$axis.CategoryLabelWidthType#toString()" -> "CategoryLabelWidthType#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryLabelWidthType#toString()" -> "axis.CategoryLabelWidthType#equals(java.lang.Object)";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$editor.DefaultChartEditor#<clinit()";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$ui.FontDisplayField#<clinit()";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$editor.DefaultAxisEditor#<clinit()";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$editor.DefaultPlotEditor#<clinit()";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$ChartPanel#<clinit()";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$ui.FontChooserPanel#<clinit()";
  "java.util.ResourceBundle#getBundle(java.lang.String)" -> "org.jfree.chart$editor.DefaultTitleEditor#<clinit()";
  "org.jfree.chart$editor.DefaultChartEditor#<clinit()" -> "DefaultChartEditor#<clinit()";
  "org.jfree.chart$editor.DefaultChartEditor#<clinit()" -> "editor.DefaultChartEditor#attemptModifyBackgroundPaint()";
  "org.jfree.chart$editor.DefaultChartEditor#<clinit()" -> "DefaultChartEditor#attemptModifyBackgroundPaint()";
  "org.jfree.chart$editor.DefaultChartEditor#<clinit()" -> "editor.DefaultChartEditor#<clinit()";
  "org.jfree.chart$ui.FontDisplayField#<clinit()" -> "ui.FontDisplayField#<clinit()";
  "org.jfree.chart$ui.FontDisplayField#<clinit()" -> "FontDisplayField#fontToString(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#<clinit()" -> "ui.FontDisplayField#fontToString(java.awt.Font)";
  "org.jfree.chart$ui.FontDisplayField#<clinit()" -> "FontDisplayField#<clinit()";
  "org.jfree.chart$editor.DefaultAxisEditor#<clinit()" -> "DefaultAxisEditor#attemptModifyLabelPaint()";
  "org.jfree.chart$editor.DefaultAxisEditor#<clinit()" -> "editor.DefaultAxisEditor#<clinit()";
  "org.jfree.chart$editor.DefaultAxisEditor#<clinit()" -> "editor.DefaultAxisEditor#attemptModifyLabelPaint()";
  "org.jfree.chart$editor.DefaultAxisEditor#<clinit()" -> "DefaultAxisEditor#<clinit()";
  "org.jfree.chart$editor.DefaultPlotEditor#<clinit()" -> "editor.DefaultPlotEditor#<clinit()";
  "org.jfree.chart$editor.DefaultPlotEditor#<clinit()" -> "DefaultPlotEditor#attemptBackgroundPaintSelection()";
  "org.jfree.chart$editor.DefaultPlotEditor#<clinit()" -> "editor.DefaultPlotEditor#attemptBackgroundPaintSelection()";
  "org.jfree.chart$editor.DefaultPlotEditor#<clinit()" -> "DefaultPlotEditor#<clinit()";
  "org.jfree.chart$editor.DefaultPlotEditor#<clinit()" -> "DefaultPlotEditor#attemptOutlinePaintSelection()";
  "org.jfree.chart$editor.DefaultPlotEditor#<clinit()" -> "editor.DefaultPlotEditor#attemptOutlinePaintSelection()";
  "org.jfree.chart$ChartPanel#<clinit()" -> "ChartPanel#createPopupMenu(boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#<clinit()" -> "org.jfree.chart$ChartPanel#createPopupMenu(boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#<clinit()" -> "ChartPanel#<clinit()";
  "org.jfree.chart$ChartPanel#createPopupMenu(boolean,boolean,boolean,boolean)" -> "org.jfree.chart$PolarChartPanel#createPopupMenu(boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ChartPanel#createPopupMenu(boolean,boolean,boolean,boolean)" -> "PolarChartPanel#createPopupMenu(boolean,boolean,boolean,boolean)";
  "org.jfree.chart$ui.FontChooserPanel#<clinit()" -> "FontChooserPanel#<clinit()";
  "org.jfree.chart$ui.FontChooserPanel#<clinit()" -> "ui.FontChooserPanel#<clinit()";
  "org.jfree.chart$editor.DefaultTitleEditor#<clinit()" -> "editor.DefaultTitleEditor#<clinit()";
  "org.jfree.chart$editor.DefaultTitleEditor#<clinit()" -> "DefaultTitleEditor#<clinit()";
  "javax.swing.filechooser$FileSystemView$FileSystemRoot#getName()" -> "org.jfree.chart$ui.ExtensionFileFilter#accept(java.io.File)";
  "org.jfree.chart$ui.ExtensionFileFilter#accept(java.io.File)" -> "javax.swing.JFileChooser#accept(java.io.File)";
  "org.jfree.chart$ui.ExtensionFileFilter#accept(java.io.File)" -> "javax.swing.JFileChooser#setFileFilter(javax.swing.filechooser.FileFilter)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "org.jfree.data$time.SerialDate#getMonths(boolean)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#monthCodeToString(int,boolean)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#stringToMonthCode(java.lang.String)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#stringToWeekdayCode(java.lang.String)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#monthCodeToString(int,boolean)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#weekdayCodeToString(int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SpreadsheetDate#<init(int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "org.jfree.data$time.SerialDate#stringToWeekdayCode(java.lang.String)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#<clinit()";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SpreadsheetDate#calcSerial(int,int,int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SpreadsheetDate#calcSerial(int,int,int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "org.jfree.data$time.SerialDate#weekdayCodeToString(int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#lastDayOfMonth(int,int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#getMonths(boolean)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#stringToMonthCode(java.lang.String)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#stringToWeekdayCode(java.lang.String)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "org.jfree.data$time.SpreadsheetDate#calcSerial(int,int,int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#weekdayCodeToString(int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.SerialDate#<clinit()";
  "org.jfree.data$time.SerialDate#<clinit()" -> "time.Month#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#getMonths(boolean)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "SerialDate#lastDayOfMonth(int,int)";
  "org.jfree.data$time.SerialDate#<clinit()" -> "org.jfree.data$time.SerialDate#lastDayOfMonth(int,int)";
  "org.jfree.data$time.SerialDate#getMonths(boolean)" -> "time.SerialDate#getMonths()";
  "org.jfree.data$time.SerialDate#getMonths(boolean)" -> "SerialDate#getMonths()";
  "org.jfree.data$time.SerialDate#getMonths(boolean)" -> "org.jfree.data$time.SerialDate#getMonths()";
  "org.jfree.data$time.SpreadsheetDate#calcSerial(int,int,int)" -> "SpreadsheetDate#<init(int)";
  "org.jfree.data$time.SpreadsheetDate#calcSerial(int,int,int)" -> "time.SpreadsheetDate#<init(int,int,int)";
  "org.jfree.data$time.SpreadsheetDate#calcSerial(int,int,int)" -> "SpreadsheetDate#<init(int,int,int)";
  "java.awt.geom$Rectangle2D$Double#<init(double,double,double,double)" -> "org.jfree.chart$util.RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$text.TextBlockAnchor#<init(java.lang.String)" -> "TextBlockAnchor#<clinit()";
  "org.jfree.chart$text.TextBlockAnchor#<init(java.lang.String)" -> "text.TextBlockAnchor#<clinit()";
  "org.jfree.chart$text.TextBlockAnchor#<init(java.lang.String)" -> "org.jfree.chart$text.TextBlockAnchor#<clinit()";
  "org.jfree.chart$text.TextBlockAnchor#<clinit()" -> "org.jfree.chart$text.TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)";
  "org.jfree.chart$text.TextBlockAnchor#<clinit()" -> "text.TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)";
  "org.jfree.chart$text.TextBlockAnchor#<clinit()" -> "TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "renderer.category.BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "XYBarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "xy.XYBarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "category.BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "xy.XYBarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "renderer.category.BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "category.BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "org.jfree.chart$renderer.xy.XYBarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "ItemLabelAnchor#<clinit()";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "renderer.xy.XYBarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "org.jfree.chart$renderer.category.BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "XYBarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "renderer.xy.XYBarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)";
  "org.jfree.chart$labels.ItemLabelAnchor#<clinit()" -> "labels.ItemLabelAnchor#<clinit()";
  "org.jfree.chart$renderer.Outlier#getPoint()" -> "Outlier#getY()";
  "org.jfree.chart$renderer.Outlier#getPoint()" -> "renderer.Outlier#getY()";
  "org.jfree.chart$renderer.Outlier#getPoint()" -> "Outlier#getX()";
  "org.jfree.chart$renderer.Outlier#getPoint()" -> "renderer.Outlier#getX()";
  "org.jfree.chart$renderer.Outlier#getPoint()" -> "renderer.Outlier#compareTo(java.lang.Object)";
  "java.util.ArrayList#<clinit()" -> "org.jfree.chart$JFreeChart#getSubtitles()";
  "java.util.ArrayList#<clinit()" -> "org.jfree.chart$plot.XYPlot#getAnnotations()";
  "org.jfree.chart$event.ChartChangeEventType#toString()" -> "event.ChartChangeEventType#equals(java.lang.Object)";
  "org.jfree.chart$event.ChartChangeEventType#toString()" -> "ChartChangeEventType#equals(java.lang.Object)";
  "org.jfree.chart$util.Layer#<clinit()" -> "plot.CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "plot.XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "util.Layer#<clinit()";
  "org.jfree.chart$util.Layer#<clinit()" -> "plot.CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "Layer#<clinit()";
  "org.jfree.chart$util.Layer#<clinit()" -> "CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.Layer#<clinit()" -> "plot.XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateRightInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateTopOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.UnitType#<clinit()";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateRightOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateBottomOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateTopInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateBottomOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateLeftOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateRightInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateTopInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "UnitType#<clinit()";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateRightOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateRightOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateLeftOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateTopOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateLeftInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateLeftInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateBottomInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateBottomOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateLeftOutset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateRightInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "RectangleInsets#calculateLeftInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "org.jfree.chart$util.RectangleInsets#calculateBottomInset(double)";
  "org.jfree.chart$util.UnitType#<clinit()" -> "util.RectangleInsets#calculateBottomInset(double)";
  "org.jfree.chart$util.RectangleInsets#calculateLeftOutset(double)" -> "org.jfree.chart$util.RectangleInsets#extendWidth(double)";
  "org.jfree.chart$util.RectangleInsets#calculateLeftOutset(double)" -> "RectangleInsets#extendWidth(double)";
  "org.jfree.chart$util.RectangleInsets#calculateLeftOutset(double)" -> "util.RectangleInsets#extendWidth(double)";
  "org.jfree.chart$util.RectangleInsets#extendWidth(double)" -> "org.jfree.chart$block.AbstractBlock#calculateTotalWidth(double)";
  "org.jfree.chart$util.RectangleInsets#extendWidth(double)" -> "block.AbstractBlock#calculateTotalWidth(double)";
  "org.jfree.chart$util.RectangleInsets#extendWidth(double)" -> "AbstractBlock#calculateTotalWidth(double)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "util.RectangleInsets#trimHeight(double)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "block.LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "block.BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "RectangleInsets#trim(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "util.RectangleInsets#trim(java.awt.geom.Rectangle2D)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "org.jfree.chart$util.RectangleInsets#trimHeight(double)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "util.RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)";
  "org.jfree.chart$util.RectangleInsets#calculateTopInset(double)" -> "RectangleInsets#trimHeight(double)";
  "org.jfree.chart$util.RectangleInsets#trimHeight(double)" -> "block.AbstractBlock#trimToContentHeight(double)";
  "org.jfree.chart$util.RectangleInsets#trimHeight(double)" -> "AbstractBlock#trimToContentHeight(double)";
  "org.jfree.chart$util.RectangleInsets#calculateLeftInset(double)" -> "util.RectangleInsets#trimWidth(double)";
  "org.jfree.chart$util.RectangleInsets#calculateLeftInset(double)" -> "org.jfree.chart$util.RectangleInsets#trimWidth(double)";
  "org.jfree.chart$util.RectangleInsets#calculateLeftInset(double)" -> "RectangleInsets#trimWidth(double)";
  "org.jfree.chart$util.RectangleInsets#trimWidth(double)" -> "block.AbstractBlock#trimToContentWidth(double)";
  "org.jfree.chart$util.RectangleInsets#trimWidth(double)" -> "AbstractBlock#trimToContentWidth(double)";
  "java.lang.Object#<init()" -> "org.jfree.experimental$chart.util.XYCoordinateType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.BlockResult#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.AxisSpace#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$urls.StandardCategoryURLGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.SerialUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$DataUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$servlet.ServletUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.AttributedStringUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$ui.Library#<init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.dial.AbstractDialLayer#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.UnitType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$time.RegularTimePeriod#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.RendererUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.AreaRendererEndType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$labels.SymbolicXYItemLabelGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.CenterArrangement#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$ChartUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.PlotOrientation#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$statistics.BoxAndWhiskerItem#<init(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)";
  "java.lang.Object#<init()" -> "org.jfree.chart$urls.TimeSeriesURLGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$2#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)";
  "java.lang.Object#<init()" -> "org.jfree.data$general.AbstractDataset#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.DatasetRenderingOrder#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.DefaultDrawingSupplier#<init(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])";
  "java.lang.Object#<init()" -> "org.jfree.chart$encoders.EncoderUtil#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$PaintMap#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$imagemap.DynamicDriveToolTipTagFragmentGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.SortOrder#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$xy.WindDataItem#<init(java.lang.Number,java.lang.Number,java.lang.Number)";
  "java.lang.Object#<init()" -> "org.jfree.data$function.NormalDistributionFunction2D#<init(double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$encoders.SunJPEGEncoderAdapter#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$imagemap.StandardToolTipTagFragmentGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$general.DatasetGroup#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$statistics.HistogramType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$text.TextAnchor#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$KeyedValueComparatorType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$xy.YWithXInterval#<init(double,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.StandardTickUnitSource#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$imagemap.ImageMapUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.ShapeUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.TickUnit#<init(double,int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.GradientPaintTransformType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$ui.LCBLayout#<init(int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.DateAxis$DefaultTimeline#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.RefineryUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.TickType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$imagemap.OverLIBToolTipTagFragmentGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.AxisLocation#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$RangeType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$time.ohlc.OHLC#<init(double,double,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$ChartFactory#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$ui.Licences#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$time.TimePeriodAnchor#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.GridArrangement#<init(int,int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$StrokeMap#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.HashUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$KeyedObject#<init(java.lang.Comparable,java.lang.Object)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.PieLabelLinkStyle#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$io.CSV#<init(char,char)";
  "java.lang.Object#<init()" -> "org.jfree.chart$encoders.SunPNGEncoderAdapter#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.LengthConstraintType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.RectangleAnchor#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$function.LineFunction2D#<init(double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.TableOrder#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$xy.XYInterval#<init(double,double,double,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$event.ChartChangeEventType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$time.MovingAverage#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$statistics.MeanAndStandardDeviation#<init(java.lang.Number,java.lang.Number)";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.BorderArrangement#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$imagemap.DynamicDriveToolTipTagFragmentGenerator#<init(java.lang.String,int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.SeriesRenderingOrder#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.data$general.CombinedDataset$DatasetInfo#<init(org.jfree.data.general.CombinedDataset,org.jfree.data.general.SeriesDataset,int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.DialShape#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.FlowArrangement#<init(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.data$xml.DatasetReader#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$general.DatasetUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.StringUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.ObjectUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.Outlier#<init(double,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.data$time.SerialDate#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.TickUnit#<init(double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$ui.Library#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$annotations.AbstractXYAnnotation#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.HorizontalAlignment#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.ColumnArrangement#<init(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.data$statistics.Statistics#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$ui.Contributor#<init(java.lang.String,java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.VerticalAlignment#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.xy.XYSplineAndShapeRenderer$ControlPoint#<init(org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer,float,float)";
  "java.lang.Object#<init()" -> "org.jfree.chart$encoders.ImageEncoderFactory#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.AbstractObjectList#<init(int,int)";
  "java.lang.Object#<init()" -> "org.jfree.data$time.DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection,int)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.ArrayUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$LegendRenderingOrder#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.CrosshairState#<init(boolean)";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.PlotState#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$function.PowerFunction2D#<init(double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$labels.ItemLabelAnchor#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$editor.ChartEditorManager#<init()";
  "java.lang.Object#<init()" -> "org.jfree.data$xy.Vector#<init(double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#<init(org.jfree.chart.axis.SegmentedTimeline)";
  "java.lang.Object#<init()" -> "org.jfree.data$xy.YInterval#<init(double,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$block.BlockParams#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$plot.PieLabelRecord#<init(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.LengthAdjustmentType#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$axis.CategoryAnchor#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$text.G2TextMeasurer#<init(java.awt.Graphics2D)";
  "java.lang.Object#<init()" -> "org.jfree.data$DomainOrder#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.Rotation#<init(java.lang.String,double)";
  "java.lang.Object#<init()" -> "org.jfree.chart$ui.StrokeChooserPanel$1#<init(org.jfree.chart.ui.StrokeChooserPanel)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.Layer#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$text.TextUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$renderer.LookupPaintScale$PaintItem#<init(org.jfree.chart.renderer.LookupPaintScale,double,java.awt.Paint)";
  "java.lang.Object#<init()" -> "org.jfree.data$statistics.BoxAndWhiskerCalculator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$imagemap.StandardURLTagFragmentGenerator#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.RectangleEdge#<init(java.lang.String)";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.Align#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$util.PaintUtilities#<init()";
  "java.lang.Object#<init()" -> "org.jfree.chart$editor.DefaultChartEditorFactory#<init()";
  "org.jfree.experimental$chart.util.XYCoordinateType#<init(java.lang.String)" -> "XYCoordinateType#<clinit()";
  "org.jfree.experimental$chart.util.XYCoordinateType#<init(java.lang.String)" -> "org.jfree.experimental$chart.util.XYCoordinateType#<clinit()";
  "org.jfree.experimental$chart.util.XYCoordinateType#<clinit()" -> "XYTitleAnnotation#<init(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "dial.ArcDialFrame#<init(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "plot.dial.DialPointer#<init(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "DialPointer#<init(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "StandardDialFrame#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "DialCap#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "plot.dial.ArcDialFrame#<init(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "plot.dial.StandardDialFrame#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "plot.dial.StandardDialScale#<init(double,double,double,double,double,int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "StandardDialRange#<init(double,double,java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "org.jfree.chart$plot.dial.DialPointer#<init(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "dial.StandardDialFrame#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "ArcDialFrame#<init(double,double)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "dial.DialCap#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "StandardDialScale#<init(double,double,double,double,double,int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "plot.dial.DialCap#<init()";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "plot.dial.StandardDialRange#<init(double,double,java.awt.Paint)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "dial.DialPointer#<init(int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "dial.StandardDialScale#<init(double,double,double,double,double,int)";
  "org.jfree.chart$plot.dial.AbstractDialLayer#<init()" -> "dial.StandardDialRange#<init(double,double,java.awt.Paint)";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "plot.dial.DialPointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "DialPointer$Pointer#<init(int)";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "dial.DialPointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "plot.dial.DialPointer$Pin#<init(int)";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "plot.dial.DialPointer$Pointer#<init(int)";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "dial.DialPointer$Pointer#<init(int)";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "DialPointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "org.jfree.chart$plot.dial.DialPointer#<init()";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "dial.DialPointer$Pin#<init(int)";
  "org.jfree.chart$plot.dial.DialPointer#<init(int)" -> "DialPointer$Pin#<init(int)";
  "org.jfree.data$time.RegularTimePeriod#<init()" -> "time.FixedMillisecond#<init(java.util.Date)";
  "org.jfree.data$time.RegularTimePeriod#<init()" -> "org.jfree.data$time.FixedMillisecond#<init(java.util.Date)";
  "org.jfree.data$time.RegularTimePeriod#<init()" -> "FixedMillisecond#<init(java.util.Date)";
  "org.jfree.data$time.FixedMillisecond#<init(java.util.Date)" -> "time.FixedMillisecond#<init()";
  "org.jfree.data$time.FixedMillisecond#<init(java.util.Date)" -> "time.FixedMillisecond#<init(long)";
  "org.jfree.data$time.FixedMillisecond#<init(java.util.Date)" -> "FixedMillisecond#<init()";
  "org.jfree.data$time.FixedMillisecond#<init(java.util.Date)" -> "FixedMillisecond#<init(long)";
  "org.jfree.chart$renderer.AreaRendererEndType#<init(java.lang.String)" -> "org.jfree.chart$renderer.AreaRendererEndType#<clinit()";
  "org.jfree.chart$renderer.AreaRendererEndType#<clinit()" -> "renderer.AreaRendererEndType#<clinit()";
  "org.jfree.chart$renderer.AreaRendererEndType#<clinit()" -> "AreaRendererEndType#<clinit()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#<init(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)" -> "BoxAndWhiskerItem#<init(double,double,double,double,double,double,double,double,java.util.List)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#<init(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)" -> "statistics.BoxAndWhiskerItem#<init(double,double,double,double,double,double,double,double,java.util.List)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$2#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)" -> "MinMaxCategoryRenderer#getIcon(java.awt.Shape,boolean,boolean)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$2#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)" -> "category.MinMaxCategoryRenderer#getIcon(java.awt.Shape,boolean,boolean)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$2#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)" -> "renderer.category.MinMaxCategoryRenderer#getIcon(java.awt.Shape,boolean,boolean)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$2#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#getIcon(java.awt.Shape,boolean,boolean)";
  "org.jfree.data$general.AbstractDataset#<init()" -> "general.AbstractSeriesDataset#<init()";
  "org.jfree.data$general.AbstractDataset#<init()" -> "org.jfree.data$general.DefaultValueDataset#<init(java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#<init()" -> "org.jfree.data$general.AbstractSeriesDataset#<init()";
  "org.jfree.data$general.AbstractDataset#<init()" -> "DefaultKeyedValueDataset#<init(org.jfree.data.KeyedValue)";
  "org.jfree.data$general.AbstractDataset#<init()" -> "org.jfree.data$general.DefaultKeyedValueDataset#<init(org.jfree.data.KeyedValue)";
  "org.jfree.data$general.AbstractDataset#<init()" -> "general.DefaultKeyedValueDataset#<init(org.jfree.data.KeyedValue)";
  "org.jfree.data$general.AbstractDataset#<init()" -> "general.DefaultValueDataset#<init(java.lang.Number)";
  "org.jfree.data$general.AbstractDataset#<init()" -> "AbstractSeriesDataset#<init()";
  "org.jfree.data$general.AbstractDataset#<init()" -> "DefaultValueDataset#<init(java.lang.Number)";
  "org.jfree.data$general.DefaultValueDataset#<init(java.lang.Number)" -> "org.jfree.data$general.DefaultValueDataset#<init()";
  "org.jfree.data$general.DefaultValueDataset#<init(java.lang.Number)" -> "DefaultValueDataset#<init()";
  "org.jfree.data$general.DefaultValueDataset#<init(java.lang.Number)" -> "general.DefaultValueDataset#<init()";
  "org.jfree.data$general.DefaultValueDataset#<init(java.lang.Number)" -> "DefaultValueDataset#<init(double)";
  "org.jfree.data$general.DefaultValueDataset#<init(java.lang.Number)" -> "general.DefaultValueDataset#<init(double)";
  "org.jfree.data$general.AbstractSeriesDataset#<init()" -> "gantt.TaskSeriesCollection#<init()";
  "org.jfree.data$general.AbstractSeriesDataset#<init()" -> "AbstractXYDataset#<init()";
  "org.jfree.data$general.AbstractSeriesDataset#<init()" -> "TaskSeriesCollection#<init()";
  "org.jfree.data$general.AbstractSeriesDataset#<init()" -> "org.jfree.data$xy.AbstractXYDataset#<init()";
  "org.jfree.data$general.AbstractSeriesDataset#<init()" -> "xy.AbstractXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "DefaultXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.AbstractIntervalXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "jdbc.JDBCXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.DefaultOHLCDataset#<init(java.lang.Comparable,org.jfree.data.xy.OHLCDataItem[])";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "DefaultBoxAndWhiskerXYDataset#<init(java.lang.Comparable)";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "VectorSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.DefaultWindDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.VectorSeriesCollection#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "AbstractIntervalXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.AbstractXYZDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "JDBCXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "DefaultOHLCDataset#<init(java.lang.Comparable,org.jfree.data.xy.OHLCDataItem[])";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "org.jfree.data$xy.AbstractXYZDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "DefaultWindDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "xy.DefaultXYDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "org.jfree.data$xy.DefaultOHLCDataset#<init(java.lang.Comparable,org.jfree.data.xy.OHLCDataItem[])";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "AbstractXYZDataset#<init()";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "DefaultWindDataset#<init(java.util.List,java.lang.Object[][][])";
  "org.jfree.data$xy.AbstractXYDataset#<init()" -> "statistics.DefaultBoxAndWhiskerXYDataset#<init(java.lang.Comparable)";
  "org.jfree.data$xy.AbstractXYZDataset#<init()" -> "xy.DefaultXYZDataset#<init()";
  "org.jfree.data$xy.AbstractXYZDataset#<init()" -> "DefaultXYZDataset#<init()";
  "org.jfree.data$general.DefaultKeyedValueDataset#<init(org.jfree.data.KeyedValue)" -> "org.jfree.data$general.DefaultKeyedValueDataset#<init()";
  "org.jfree.data$general.DefaultKeyedValueDataset#<init(org.jfree.data.KeyedValue)" -> "DefaultKeyedValueDataset#<init()";
  "org.jfree.data$general.DefaultKeyedValueDataset#<init(org.jfree.data.KeyedValue)" -> "general.DefaultKeyedValueDataset#<init()";
  "org.jfree.chart$util.SortOrder#<init(java.lang.String)" -> "util.SortOrder#<clinit()";
  "org.jfree.chart$util.SortOrder#<init(java.lang.String)" -> "SortOrder#<clinit()";
  "org.jfree.chart$util.SortOrder#<init(java.lang.String)" -> "org.jfree.chart$util.SortOrder#<clinit()";
  "org.jfree.data$general.DatasetGroup#<init()" -> "general.AbstractDataset#<init()";
  "org.jfree.data$general.DatasetGroup#<init()" -> "AbstractDataset#<init()";
  "org.jfree.data$statistics.HistogramType#<init(java.lang.String)" -> "statistics.HistogramType#<clinit()";
  "org.jfree.data$statistics.HistogramType#<init(java.lang.String)" -> "org.jfree.data$statistics.HistogramType#<clinit()";
  "org.jfree.data$statistics.HistogramType#<clinit()" -> "HistogramType#<clinit()";
  "org.jfree.chart$axis.TickUnit#<init(double,int)" -> "axis.NumberTickUnit#<init(double,java.text.NumberFormat,int)";
  "org.jfree.chart$axis.TickUnit#<init(double,int)" -> "NumberTickUnit#<init(double,java.text.NumberFormat,int)";
  "org.jfree.chart$util.GradientPaintTransformType#<init(java.lang.String)" -> "org.jfree.chart$util.GradientPaintTransformType#<clinit()";
  "org.jfree.chart$util.GradientPaintTransformType#<clinit()" -> "util.GradientPaintTransformType#<clinit()";
  "org.jfree.chart$util.GradientPaintTransformType#<clinit()" -> "GradientPaintTransformType#<clinit()";
  "org.jfree.chart$axis.DateAxis$DefaultTimeline#<init()" -> "axis.DateAxis$DefaultTimeline#<init(org.jfree.chart.axis.DateAxis$1)";
  "org.jfree.chart$axis.DateAxis$DefaultTimeline#<init()" -> "DateAxis$DefaultTimeline#<init(org.jfree.chart.axis.DateAxis$1)";
  "org.jfree.chart$axis.DateAxis$DefaultTimeline#<init()" -> "org.jfree.chart$axis.DateAxis$DefaultTimeline#<init(org.jfree.chart.axis.DateAxis$1)";
  "org.jfree.chart$axis.TickType#<init(java.lang.String)" -> "axis.TickType#<clinit()";
  "org.jfree.chart$axis.TickType#<init(java.lang.String)" -> "TickType#<clinit()";
  "org.jfree.chart$axis.TickType#<init(java.lang.String)" -> "org.jfree.chart$axis.TickType#<clinit()";
  "org.jfree.chart$axis.AxisLocation#<init(java.lang.String)" -> "axis.AxisLocation#<clinit()";
  "org.jfree.chart$axis.AxisLocation#<init(java.lang.String)" -> "AxisLocation#<clinit()";
  "org.jfree.chart$axis.AxisLocation#<init(java.lang.String)" -> "org.jfree.chart$axis.AxisLocation#<clinit()";
  "org.jfree.chart$axis.AxisLocation#<clinit()" -> "axis.AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.chart$axis.AxisLocation#<clinit()" -> "AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)";
  "org.jfree.data$RangeType#<init(java.lang.String)" -> "RangeType#<clinit()";
  "org.jfree.data$RangeType#<init(java.lang.String)" -> "org.jfree.data$RangeType#<clinit()";
  "org.jfree.chart$ui.Licences#<init()" -> "Licences#getInstance()";
  "org.jfree.chart$ui.Licences#<init()" -> "org.jfree.chart$ui.Licences#getInstance()";
  "org.jfree.chart$ui.Licences#<init()" -> "ui.Licences#getInstance()";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)" -> "renderer.category.MinMaxCategoryRenderer#getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)" -> "org.jfree.chart$renderer.category.MinMaxCategoryRenderer#getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)" -> "MinMaxCategoryRenderer#getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#<init(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)" -> "category.MinMaxCategoryRenderer#getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$plot.PieLabelLinkStyle#<init(java.lang.String)" -> "plot.PieLabelLinkStyle#<clinit()";
  "org.jfree.chart$plot.PieLabelLinkStyle#<init(java.lang.String)" -> "PieLabelLinkStyle#<clinit()";
  "org.jfree.chart$plot.PieLabelLinkStyle#<init(java.lang.String)" -> "org.jfree.chart$plot.PieLabelLinkStyle#<clinit()";
  "org.jfree.data$io.CSV#<init(char,char)" -> "io.CSV#<init()";
  "org.jfree.data$io.CSV#<init(char,char)" -> "org.jfree.data$io.CSV#<init()";
  "org.jfree.data$io.CSV#<init(char,char)" -> "CSV#<init()";
  "org.jfree.chart$util.RectangleAnchor#<init(java.lang.String)" -> "RectangleAnchor#<clinit()";
  "org.jfree.chart$util.RectangleAnchor#<init(java.lang.String)" -> "util.RectangleAnchor#<clinit()";
  "org.jfree.chart$util.RectangleAnchor#<init(java.lang.String)" -> "org.jfree.chart$util.RectangleAnchor#<clinit()";
  "org.jfree.chart$util.RectangleAnchor#<clinit()" -> "RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleAnchor#<clinit()" -> "util.RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleAnchor#<clinit()" -> "RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.RectangleAnchor#<clinit()" -> "util.RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$util.TableOrder#<init(java.lang.String)" -> "util.TableOrder#<clinit()";
  "org.jfree.chart$util.TableOrder#<init(java.lang.String)" -> "org.jfree.chart$util.TableOrder#<clinit()";
  "org.jfree.chart$util.TableOrder#<clinit()" -> "TableOrder#<clinit()";
  "org.jfree.chart$event.ChartChangeEventType#<init(java.lang.String)" -> "org.jfree.chart$event.ChartChangeEventType#<clinit()";
  "org.jfree.chart$event.ChartChangeEventType#<clinit()" -> "event.ChartChangeEventType#<clinit()";
  "org.jfree.chart$event.ChartChangeEventType#<clinit()" -> "ChartChangeEventType#<clinit()";
  "org.jfree.data$statistics.MeanAndStandardDeviation#<init(java.lang.Number,java.lang.Number)" -> "MeanAndStandardDeviation#<init(double,double)";
  "org.jfree.data$statistics.MeanAndStandardDeviation#<init(java.lang.Number,java.lang.Number)" -> "statistics.MeanAndStandardDeviation#<init(double,double)";
  "org.jfree.chart$plot.SeriesRenderingOrder#<init(java.lang.String)" -> "plot.SeriesRenderingOrder#<clinit()";
  "org.jfree.chart$plot.SeriesRenderingOrder#<init(java.lang.String)" -> "SeriesRenderingOrder#<clinit()";
  "org.jfree.chart$plot.SeriesRenderingOrder#<init(java.lang.String)" -> "org.jfree.chart$plot.SeriesRenderingOrder#<clinit()";
  "org.jfree.chart$plot.DialShape#<init(java.lang.String)" -> "plot.DialShape#<clinit()";
  "org.jfree.chart$plot.DialShape#<init(java.lang.String)" -> "DialShape#<clinit()";
  "org.jfree.chart$plot.DialShape#<init(java.lang.String)" -> "org.jfree.chart$plot.DialShape#<clinit()";
  "org.jfree.chart$plot.DialShape#<clinit()" -> "MeterPlot#fillArc(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double,java.awt.Paint,boolean)";
  "org.jfree.chart$plot.DialShape#<clinit()" -> "plot.MeterPlot#fillArc(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double,java.awt.Paint,boolean)";
  "org.jfree.chart$block.FlowArrangement#<init(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)" -> "FlowArrangement#<init()";
  "org.jfree.chart$block.FlowArrangement#<init(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)" -> "org.jfree.chart$block.FlowArrangement#<init()";
  "org.jfree.chart$block.FlowArrangement#<init(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)" -> "block.FlowArrangement#<init()";
  "org.jfree.chart$axis.TickUnit#<init(double)" -> "NumberTickUnit#<init(double,java.text.NumberFormat)";
  "org.jfree.chart$axis.TickUnit#<init(double)" -> "axis.NumberTickUnit#<init(double,java.text.NumberFormat)";
  "org.jfree.chart$ui.Library#<init()" -> "ui.BasicProjectInfo#<init()";
  "org.jfree.chart$ui.Library#<init()" -> "BasicProjectInfo#<init()";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "annotations.XYShapeAnnotation#<init(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "annotations.XYDrawableAnnotation#<init(double,double,double,double,org.jfree.chart.Drawable)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "annotations.XYImageAnnotation#<init(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "annotations.XYLineAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "XYDrawableAnnotation#<init(double,double,double,double,org.jfree.chart.Drawable)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "XYLineAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)";
  "org.jfree.chart$annotations.AbstractXYAnnotation#<init()" -> "XYImageAnnotation#<init(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)";
  "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" -> "XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)";
  "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)" -> "XYBoxAnnotation#<init(double,double,double,double)";
  "org.jfree.chart$annotations.XYBoxAnnotation#<init(double,double,double,double,java.awt.Stroke,java.awt.Paint)" -> "annotations.XYBoxAnnotation#<init(double,double,double,double)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$plot.PiePlotState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "PiePlotState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "xy.XYItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "plot.PiePlotState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.RendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "org.jfree.chart$renderer.category.AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "category.AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "category.CategoryStepRenderer$State#<init(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$renderer.category.CategoryItemRendererState#<init(org.jfree.chart.plot.PlotRenderingInfo)" -> "renderer.category.AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)";
  "org.jfree.chart$util.HorizontalAlignment#<init(java.lang.String)" -> "util.HorizontalAlignment#<clinit()";
  "org.jfree.chart$util.HorizontalAlignment#<init(java.lang.String)" -> "org.jfree.chart$util.HorizontalAlignment#<clinit()";
  "org.jfree.chart$util.HorizontalAlignment#<clinit()" -> "JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)";
  "org.jfree.chart$util.HorizontalAlignment#<clinit()" -> "HorizontalAlignment#<clinit()";
  "org.jfree.chart$util.HorizontalAlignment#<clinit()" -> "text.TextBlock#<init()";
  "org.jfree.chart$util.HorizontalAlignment#<clinit()" -> "TextBlock#<init()";
  "org.jfree.chart$util.VerticalAlignment#<init(java.lang.String)" -> "util.VerticalAlignment#<clinit()";
  "org.jfree.chart$util.VerticalAlignment#<init(java.lang.String)" -> "VerticalAlignment#<clinit()";
  "org.jfree.chart$util.VerticalAlignment#<init(java.lang.String)" -> "org.jfree.chart$util.VerticalAlignment#<clinit()";
  "org.jfree.chart$util.AbstractObjectList#<init(int,int)" -> "util.AbstractObjectList#<init(int)";
  "org.jfree.chart$util.AbstractObjectList#<init(int,int)" -> "org.jfree.chart$util.AbstractObjectList#<init(int)";
  "org.jfree.chart$util.AbstractObjectList#<init(int,int)" -> "AbstractObjectList#<init(int)";
  "org.jfree.chart$util.AbstractObjectList#<init(int)" -> "AbstractObjectList#<init()";
  "org.jfree.chart$util.AbstractObjectList#<init(int)" -> "org.jfree.chart$util.ObjectList#<init(int)";
  "org.jfree.chart$util.AbstractObjectList#<init(int)" -> "util.ObjectList#<init(int)";
  "org.jfree.chart$util.AbstractObjectList#<init(int)" -> "ObjectList#<init(int)";
  "org.jfree.chart$util.AbstractObjectList#<init(int)" -> "util.AbstractObjectList#<init()";
  "org.jfree.data$time.DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection,int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection)";
  "org.jfree.data$time.DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection,int)" -> "time.DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection)";
  "org.jfree.data$time.DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection,int)" -> "DynamicTimeSeriesCollection$ValueSequence#<init(org.jfree.data.time.DynamicTimeSeriesCollection)";
  "org.jfree.chart$LegendRenderingOrder#<init(java.lang.String)" -> "LegendRenderingOrder#<clinit()";
  "org.jfree.chart$LegendRenderingOrder#<init(java.lang.String)" -> "org.jfree.chart$LegendRenderingOrder#<clinit()";
  "org.jfree.chart$plot.CrosshairState#<init(boolean)" -> "org.jfree.chart$plot.CrosshairState#<init()";
  "org.jfree.chart$plot.CrosshairState#<init(boolean)" -> "plot.CrosshairState#<init()";
  "org.jfree.chart$plot.CrosshairState#<init(boolean)" -> "CrosshairState#<init()";
  "org.jfree.chart$util.LengthAdjustmentType#<init(java.lang.String)" -> "util.LengthAdjustmentType#<clinit()";
  "org.jfree.chart$util.LengthAdjustmentType#<init(java.lang.String)" -> "LengthAdjustmentType#<clinit()";
  "org.jfree.chart$util.LengthAdjustmentType#<init(java.lang.String)" -> "org.jfree.chart$util.LengthAdjustmentType#<clinit()";
  "org.jfree.chart$axis.CategoryAnchor#<init(java.lang.String)" -> "org.jfree.chart$axis.CategoryAnchor#<clinit()";
  "org.jfree.chart$axis.CategoryAnchor#<clinit()" -> "CategoryAnchor#<clinit()";
  "org.jfree.chart$axis.CategoryAnchor#<clinit()" -> "axis.CategoryAnchor#<clinit()";
  "org.jfree.data$DomainOrder#<init(java.lang.String)" -> "DomainOrder#<clinit()";
  "org.jfree.data$DomainOrder#<init(java.lang.String)" -> "org.jfree.data$DomainOrder#<clinit()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "xy.AbstractXYDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "TimeSeriesCollection#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.data$xy.AbstractXYDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "DefaultXYDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "DomainOrder#readResolve()";
  "org.jfree.data$DomainOrder#<clinit()" -> "statistics.SimpleHistogramDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.data$xy.DefaultXYDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "AbstractXYDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.data$statistics.SimpleHistogramDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.data$DomainOrder#readResolve()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.data$xy.DefaultXYZDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "xy.DefaultXYZDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "time.TimeSeriesCollection#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "CyclicXYItemRenderer$OverwriteDataSet#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "SimpleHistogramDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "org.jfree.data$time.TimeSeriesCollection#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "DefaultXYZDataset#getDomainOrder()";
  "org.jfree.data$DomainOrder#<clinit()" -> "xy.DefaultXYDataset#getDomainOrder()";
  "org.jfree.chart$util.Rotation#<init(java.lang.String,double)" -> "org.jfree.chart$util.Rotation#<clinit()";
  "org.jfree.chart$util.Rotation#<clinit()" -> "util.Rotation#<clinit()";
  "org.jfree.chart$util.Rotation#<clinit()" -> "Rotation#<clinit()";
  "org.jfree.chart$ui.StrokeChooserPanel$1#<init(org.jfree.chart.ui.StrokeChooserPanel)" -> "StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])";
  "org.jfree.chart$ui.StrokeChooserPanel$1#<init(org.jfree.chart.ui.StrokeChooserPanel)" -> "ui.StrokeChooserPanel#<init(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])";
  "org.jfree.chart$renderer.LookupPaintScale$PaintItem#<init(org.jfree.chart.renderer.LookupPaintScale,double,java.awt.Paint)" -> "renderer.LookupPaintScale#add(double,java.awt.Paint)";
  "org.jfree.chart$renderer.LookupPaintScale$PaintItem#<init(org.jfree.chart.renderer.LookupPaintScale,double,java.awt.Paint)" -> "LookupPaintScale#add(double,java.awt.Paint)";
  "org.jfree.chart$editor.DefaultChartEditorFactory#<init()" -> "ChartEditorManager#<clinit()";
  "org.jfree.chart$editor.DefaultChartEditorFactory#<init()" -> "org.jfree.chart$editor.ChartEditorManager#<clinit()";
  "org.jfree.chart$editor.ChartEditorManager#<clinit()" -> "editor.ChartEditorManager#setChartEditorFactory(org.jfree.chart.editor.ChartEditorFactory)";
  "org.jfree.chart$editor.ChartEditorManager#<clinit()" -> "org.jfree.chart$editor.ChartEditorManager#getChartEditorFactory()";
  "org.jfree.chart$editor.ChartEditorManager#<clinit()" -> "ChartEditorManager#setChartEditorFactory(org.jfree.chart.editor.ChartEditorFactory)";
  "org.jfree.chart$editor.ChartEditorManager#<clinit()" -> "ChartEditorManager#getChartEditorFactory()";
  "org.jfree.chart$editor.ChartEditorManager#<clinit()" -> "editor.ChartEditorManager#<clinit()";
  "org.jfree.chart$editor.ChartEditorManager#<clinit()" -> "editor.ChartEditorManager#getChartEditorFactory()";
  "java.util.Collections#sort(java.util.List)" -> "org.jfree.chart$plot.PieLabelDistributor#sort()";
  "org.jfree.data$statistics.SimpleHistogramBin#getUpperBound()" -> "statistics.SimpleHistogramDataset#getXValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramBin#getUpperBound()" -> "statistics.SimpleHistogramDataset#getEndXValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramBin#getUpperBound()" -> "SimpleHistogramDataset#getYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramBin#getUpperBound()" -> "statistics.SimpleHistogramDataset#getYValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramBin#getUpperBound()" -> "SimpleHistogramDataset#getEndXValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramBin#getUpperBound()" -> "SimpleHistogramDataset#getXValue(int,int)";
  "org.jfree.chart$needle.MeterNeedle#setOutlinePaint(java.awt.Paint)" -> "plot.CompassPlot#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$needle.MeterNeedle#setOutlinePaint(java.awt.Paint)" -> "CompassPlot#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$needle.MeterNeedle#setOutlinePaint(java.awt.Paint)" -> "org.jfree.chart$plot.CompassPlot#setSeriesOutlinePaint(int,java.awt.Paint)";
  "org.jfree.chart$axis.CompassFormat#parse(java.lang.String,java.text.ParsePosition)" -> "java.text.SimpleDateFormat#subParse(java.lang.String,int,int,int,boolean,boolean[],java.text.ParsePosition,boolean,java.text.CalendarBuilder)";
  "org.jfree.chart$axis.CompassFormat#parse(java.lang.String,java.text.ParsePosition)" -> "java.text.NumberFormat#parseObject(java.lang.String,java.text.ParsePosition)";
  "org.jfree.chart$axis.CompassFormat#parse(java.lang.String,java.text.ParsePosition)" -> "java.text.NumberFormat#parse(java.lang.String)";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$text.TextBlock#getLines()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$general.DefaultPieDataset#getKeys()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$time.TimeSeriesCollection#getSeries()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$gantt.TaskSeries#getTasks()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$statistics.BoxAndWhiskerItem#getOutliers()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$plot.CombinedRangeCategoryPlot#getSubplots()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$KeyedObjects2D#getColumnKeys()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$time.TimeSeries#getItems()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$xy.XYSeries#getItems()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$axis.PeriodAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$block.BlockContainer#getBlocks()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$KeyedObjects2D#getRowKeys()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$xy.XYSeriesCollection#getSeries()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$axis.SegmentedTimeline#getExceptionSegments()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$entity.StandardEntityCollection#getEntities()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$plot.CombinedRangeXYPlot#getSubplots()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$plot.MeterPlot#getIntervals()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$plot.CombinedDomainCategoryPlot#getSubplots()";
  "java.util.Collections#<clinit()" -> "org.jfree.chart$plot.CombinedDomainXYPlot#getSubplots()";
  "java.util.Collections#<clinit()" -> "org.jfree.data$DefaultKeyedValues2D#getRowKeys()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getOutliers()" -> "DefaultBoxAndWhiskerXYDataset#getOutliers(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getOutliers()" -> "statistics.DefaultBoxAndWhiskerXYDataset#getOutliers(int,int)";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "DefaultBoxAndWhiskerCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "org.jfree.data$statistics.DefaultStatisticalCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "statistics.DefaultMultiValueCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "DefaultMultiValueCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "statistics.DefaultStatisticalCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getColumnKeys()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getColumnKeys()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()" -> "DefaultCategoryDataset#getColumnKeys()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()" -> "category.DefaultCategoryDataset#getColumnKeys()";
  "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()" -> "org.jfree.data$category.DefaultCategoryDataset#getColumnKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "statistics.DefaultBoxAndWhiskerCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "statistics.DefaultStatisticalCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "statistics.DefaultMultiValueCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "DefaultMultiValueCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "org.jfree.data$statistics.DefaultMultiValueCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "DefaultStatisticalCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "org.jfree.data$statistics.DefaultBoxAndWhiskerCategoryDataset#getRowKeys()";
  "org.jfree.data$KeyedObjects2D#getRowKeys()" -> "DefaultBoxAndWhiskerCategoryDataset#getRowKeys()";
  "org.jfree.chart$entity.StandardEntityCollection#getEntities()" -> "org.jfree.chart$entity.StandardEntityCollection#addAll(org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntities()" -> "StandardEntityCollection#addAll(org.jfree.chart.entity.EntityCollection)";
  "org.jfree.chart$entity.StandardEntityCollection#getEntities()" -> "entity.StandardEntityCollection#addAll(org.jfree.chart.entity.EntityCollection)";
  "org.jfree.data$DefaultKeyedValues2D#getRowKeys()" -> "org.jfree.data$category.DefaultCategoryDataset#getRowKeys()";
  "org.jfree.data$DefaultKeyedValues2D#getRowKeys()" -> "DefaultCategoryDataset#getRowKeys()";
  "org.jfree.data$DefaultKeyedValues2D#getRowKeys()" -> "category.DefaultCategoryDataset#getRowKeys()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getQ1()" -> "DefaultBoxAndWhiskerXYDataset#getQ1Value(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getQ1()" -> "statistics.DefaultBoxAndWhiskerXYDataset#getQ1Value(int,int)";
  "java.awt.geom$Arc2D$Float#getAngleStart()" -> "org.jfree.chart$util.ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegmentSize()" -> "axis.SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)";
  "org.jfree.chart$axis.SegmentedTimeline#getSegmentSize()" -> "SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)";
  "org.jfree.data$general.Series#getKey()" -> "TaskSeriesCollection#getSeriesKey(int)";
  "org.jfree.data$general.Series#getKey()" -> "TaskSeriesCollection#getRowKey(int)";
  "org.jfree.data$general.Series#getKey()" -> "gantt.TaskSeriesCollection#getRowKey(int)";
  "org.jfree.data$general.Series#getKey()" -> "gantt.TaskSeriesCollection#getSeriesKey(int)";
  "org.jfree.chart$axis.CategoryAnchor#toString()" -> "CategoryAnchor#equals(java.lang.Object)";
  "org.jfree.chart$axis.CategoryAnchor#toString()" -> "axis.CategoryAnchor#equals(java.lang.Object)";
  "java.text.NumberFormat#setMaximumFractionDigits(int)" -> "org.jfree.chart$util.RelativeDateFormat#<init(long)";
  "org.jfree.chart$util.RelativeDateFormat#<init(long)" -> "org.jfree.chart$util.RelativeDateFormat#<init()";
  "org.jfree.chart$util.RelativeDateFormat#<init(long)" -> "RelativeDateFormat#<init(java.util.Date)";
  "org.jfree.chart$util.RelativeDateFormat#<init(long)" -> "RelativeDateFormat#<init()";
  "org.jfree.chart$util.RelativeDateFormat#<init(long)" -> "util.RelativeDateFormat#<init()";
  "org.jfree.chart$util.RelativeDateFormat#<init(long)" -> "util.RelativeDateFormat#<init(java.util.Date)";
  "org.jfree.data$RangeType#toString()" -> "RangeType#equals(java.lang.Object)";
  "org.jfree.data$DomainOrder#toString()" -> "DomainOrder#equals(java.lang.Object)";
  "org.jfree.data$resources.DataPackageResources_ru#<clinit()" -> "resources.DataPackageResources_ru#<clinit()";
  "org.jfree.data$resources.DataPackageResources_ru#<clinit()" -> "DataPackageResources_ru#<clinit()";
  "org.jfree.data$resources.DataPackageResources_ru#<clinit()" -> "resources.DataPackageResources_ru#getContents()";
  "org.jfree.data$resources.DataPackageResources_ru#<clinit()" -> "DataPackageResources_ru#getContents()";
  "org.jfree.data$resources.DataPackageResources_ru#<clinit()" -> "org.jfree.data$resources.DataPackageResources_ru#getContents()";
  "org.jfree.data$resources.DataPackageResources_ru#getContents()" -> "java.util.ListResourceBundle#loadLookup()";
  "java.util.IdentityHashMap#clear()" -> "org.jfree.chart$PaintMap#clear()";
  "java.util.IdentityHashMap#clear()" -> "org.jfree.chart$StrokeMap#clear()";
  "org.jfree.experimental$chart.util.XYCoordinateType#toString()" -> "XYCoordinateType#equals(java.lang.Object)";
  "SpreadsheetDate#getDayOfMonth()" -> "org.jfree.data$time.Day#getDayOfMonth()";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "org.jfree.data$time.Hour#getDayOfMonth()";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Hour#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Minute#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Minute#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Minute#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Second#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Hour#getDayOfMonth()";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Hour#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Hour#getDayOfMonth()";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Millisecond#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Hour#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "time.Millisecond#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Hour#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Minute#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.Day#getDayOfMonth()" -> "Second#getFirstMillisecond(java.util.Calendar)";
  "java.awt.image$AbstractMultiResolutionImage#getWidth(java.awt.image.ImageObserver)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#getImageHotspot(org.jfree.chart.plot.Plot,int,int,double,double,java.awt.Image)";
  "block.LineBorder#getInsets()" -> "org.jfree.chart$block.AbstractBlock#getContentYOffset()";
  "block.LineBorder#getInsets()" -> "org.jfree.chart$block.AbstractBlock#getContentXOffset()";
  "org.jfree.chart$JFreeChart#getPlot()" -> "PolarChartPanel#checkChart(org.jfree.chart.JFreeChart)";
  "org.jfree.chart$JFreeChart#getPlot()" -> "org.jfree.chart$ChartPanel#setRangeZoomable(boolean)";
  "org.jfree.chart$JFreeChart#getPlot()" -> "ChartPanel#setRangeZoomable(boolean)";
  "org.jfree.chart$JFreeChart#getPlot()" -> "ChartPanel#setDomainZoomable(boolean)";
  "org.jfree.chart$JFreeChart#getPlot()" -> "ChartPanel#displayPopupMenu(int,int)";
  "org.jfree.data$xy.XYCoordinate#getX()" -> "org.jfree.data$xy.VectorDataItem#getXValue()";
  "org.jfree.data$xy.XYCoordinate#getX()" -> "xy.VectorDataItem#getXValue()";
  "org.jfree.data$xy.XYCoordinate#getX()" -> "VectorDataItem#getXValue()";
  "java.awt.Component#<clinit()" -> "org.jfree.chart$util.RefineryUtilities#createJLabel(java.lang.String,java.awt.Font)";
  "java.awt.Component#<clinit()" -> "org.jfree.chart$util.RefineryUtilities#createJLabel(java.lang.String,java.awt.Font,java.awt.Color)";
  "java.awt.Component#<clinit()" -> "org.jfree.chart$util.RefineryUtilities#createJButton(java.lang.String,java.awt.Font)";
  "java.awt.Component#<clinit()" -> "org.jfree.chart$ChartPanel#createChartPrintJob()";
  "org.jfree.chart$plot.ThermometerPlot#getBulbRadius()" -> "plot.ThermometerPlot#getBulbDiameter()";
  "org.jfree.chart$plot.ThermometerPlot#getBulbRadius()" -> "org.jfree.chart$plot.ThermometerPlot#getBulbDiameter()";
  "org.jfree.chart$plot.ThermometerPlot#getBulbRadius()" -> "ThermometerPlot#getBulbDiameter()";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "plot.XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "plot.CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "plot.CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "org.jfree.chart$plot.XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "org.jfree.chart$plot.CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)";
  "org.jfree.chart$util.ObjectList#indexOf(java.lang.Object)" -> "plot.XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "MatrixSeries#getItemColumn(int)";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "org.jfree.data$xy.MatrixSeries#getItemColumn(int)";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "org.jfree.data$xy.MatrixSeries#getItemCount()";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "MatrixSeries#getItemRow(int)";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "xy.MatrixSeries#getItemCount()";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "org.jfree.data$xy.MatrixSeries#getItemRow(int)";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "xy.MatrixSeries#getItemColumn(int)";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "MatrixSeries#getItemCount()";
  "org.jfree.data$xy.MatrixSeries#getColumnsCount()" -> "xy.MatrixSeries#getItemRow(int)";
  "org.jfree.data$xy.MatrixSeries#getItemColumn(int)" -> "MatrixSeries#getItem(int)";
  "org.jfree.data$xy.MatrixSeries#getItemColumn(int)" -> "xy.MatrixSeries#getItem(int)";
  "org.jfree.data$xy.MatrixSeries#getItemColumn(int)" -> "xy.MatrixSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.MatrixSeries#getItemColumn(int)" -> "NormalizedMatrixSeries#getItem(int)";
  "org.jfree.data$xy.MatrixSeries#getItemColumn(int)" -> "xy.NormalizedMatrixSeries#getItem(int)";
  "org.jfree.data$xy.MatrixSeries#getItemColumn(int)" -> "MatrixSeriesCollection#getX(int,int)";
  "org.jfree.data$xy.MatrixSeries#getItemRow(int)" -> "xy.MatrixSeriesCollection#getY(int,int)";
  "org.jfree.data$xy.MatrixSeries#getItemRow(int)" -> "MatrixSeriesCollection#getY(int,int)";
  "java.awt.geom$Line2D$Float#<init()" -> "org.jfree.chart$LegendItem#<clinit()";
  "org.jfree.chart$LegendItem#<clinit()" -> "LegendItem#<clinit()";
  "java.lang.Object#clone()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#copy()";
  "java.awt.Container#getComponent(int)" -> "org.jfree.chart$ui.LCBLayout#minimumLayoutSize(java.awt.Container)";
  "java.awt.Container#getComponent(int)" -> "org.jfree.chart$PolarChartPanel#getPopupMenuItem(javax.swing.JPopupMenu,java.lang.String)";
  "org.jfree.chart$ui.LCBLayout#minimumLayoutSize(java.awt.Container)" -> "java.awt.Container#minimumSize()";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.chart$axis.ModuloAxis#mapValueToFixedRange(double)";
  "org.jfree.data$Range#getLowerBound()" -> "axis.ModuloAxis#mapValueToFixedRange(double)";
  "org.jfree.data$Range#getLowerBound()" -> "ValueAxis#getLowerBound()";
  "org.jfree.data$Range#getLowerBound()" -> "axis.ValueAxis#getLowerBound()";
  "org.jfree.data$Range#getLowerBound()" -> "ModuloAxis#mapValueToFixedRange(double)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.chart$plot.MeterPlot#valueToAngle(double)";
  "org.jfree.data$Range#getLowerBound()" -> "plot.MeterPlot#valueToAngle(double)";
  "org.jfree.data$Range#getLowerBound()" -> "MeterPlot#valueToAngle(double)";
  "org.jfree.chart$plot.MeterPlot#valueToAngle(double)" -> "plot.MeterPlot#drawArc(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.chart$plot.MeterPlot#valueToAngle(double)" -> "MeterPlot#drawArc(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,double,java.awt.Paint,java.awt.Stroke)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.YIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XIntervalDataItem#getXHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "ohlc.OHLCItem#getOpenValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.VectorDataItem#getVector()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "time.ohlc.OHLCItem#getOpenValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.VectorDataItem#getVectorY()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "time.ohlc.OHLCItem#getLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XYIntervalDataItem#getYHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XYIntervalDataItem#getXLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XYIntervalDataItem#getYLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.VectorDataItem#getVector()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$time.ohlc.OHLCItem#getLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XYIntervalDataItem#getXHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XYIntervalDataItem#getXHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "ohlc.OHLCItem#getCloseValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.VectorDataItem#getVectorX()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.YIntervalDataItem#getYLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XYIntervalDataItem#getXLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "OHLCItem#getOpenValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XYIntervalDataItem#getXLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.VectorDataItem#getVectorY()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XYIntervalDataItem#getYLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XIntervalDataItem#getXLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XYIntervalDataItem#getYLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "OHLCItem#getLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "YIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XYIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "ohlc.OHLCItem#getLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XIntervalDataItem#getXLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$time.ohlc.OHLCItem#getOpenValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "YIntervalDataItem#getYLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "time.ohlc.OHLCItem#getHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "ohlc.OHLCItem#getHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "time.ohlc.OHLCItem#getCloseValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "VectorDataItem#getVector()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "VectorDataItem#getVectorX()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XYIntervalDataItem#getYHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XIntervalDataItem#getXLowValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "VectorDataItem#getVectorY()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "YIntervalDataItem#getYHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XYIntervalDataItem#getXHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.XYIntervalDataItem#getYHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.YIntervalDataItem#getYHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XIntervalDataItem#getXHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.YIntervalDataItem#getYHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "OHLCItem#getHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.XYIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$time.ohlc.OHLCItem#getHighValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$time.ohlc.OHLCItem#getCloseValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "xy.YIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "OHLCItem#getCloseValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "XYIntervalDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$xy.VectorDataItem#getVectorX()";
  "org.jfree.data$time.ohlc.OHLCItem#getCloseValue()" -> "time.ohlc.OHLCItem#getYValue()";
  "org.jfree.data$time.ohlc.OHLCItem#getCloseValue()" -> "OHLCItem#getYValue()";
  "org.jfree.data$time.ohlc.OHLCItem#getCloseValue()" -> "org.jfree.data$time.ohlc.OHLCItem#getYValue()";
  "org.jfree.data$time.ohlc.OHLCItem#getCloseValue()" -> "ohlc.OHLCItem#getYValue()";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentStart()" -> "axis.SegmentedTimeline$Segment#before(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentStart()" -> "SegmentedTimeline$Segment#before(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.chart$axis.SegmentedTimeline$Segment#getSegmentStart()" -> "org.jfree.chart$axis.SegmentedTimeline$Segment#before(org.jfree.chart.axis.SegmentedTimeline$Segment)";
  "org.jfree.data$statistics.SimpleHistogramBin#getLowerBound()" -> "SimpleHistogramDataset#getStartXValue(int,int)";
  "org.jfree.data$statistics.SimpleHistogramBin#getLowerBound()" -> "statistics.SimpleHistogramDataset#getStartXValue(int,int)";
  "java.awt.Rectangle#equals(java.lang.Object)" -> "org.jfree.chart$util.ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)";
  "org.jfree.data$general.AbstractDataset#getGroup()" -> "CyclicXYItemRenderer$OverwriteDataSet#getGroup()";
  "CyclicXYItemRenderer$OverwriteDataSet#getGroup()" -> "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getGroup()";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getGroup()" -> "renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getGroup()";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getGroup()" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#getGroup()";
  "org.jfree.chart$block.LineBorder#getInsets()" -> "AbstractBlock#getContentXOffset()";
  "org.jfree.chart$block.LineBorder#getInsets()" -> "block.AbstractBlock#getContentYOffset()";
  "org.jfree.chart$block.LineBorder#getInsets()" -> "block.AbstractBlock#getContentXOffset()";
  "org.jfree.chart$block.LineBorder#getInsets()" -> "AbstractBlock#getContentYOffset()";
  "org.jfree.chart$axis.CompassFormat#<clinit()" -> "axis.CompassFormat#getDirectionCode(double)";
  "org.jfree.chart$axis.CompassFormat#<clinit()" -> "CompassFormat#getDirectionCode(double)";
  "org.jfree.chart$axis.CompassFormat#<clinit()" -> "axis.CompassFormat#<clinit()";
  "org.jfree.chart$axis.CompassFormat#<clinit()" -> "CompassFormat#<clinit()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowCount()" -> "DefaultIntervalCategoryDataset#getRowKey(int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getRowCount()" -> "category.DefaultIntervalCategoryDataset#getRowKey(int)";
  "java.awt.geom$AffineTransform#createTransformedShape(java.awt.Shape)" -> "org.jfree.chart$util.ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)";
  "org.jfree.data$general.DefaultKeyedValueDataset#getKey()" -> "DefaultKeyedValueDataset#getKey()";
  "org.jfree.data$general.DefaultKeyedValueDataset#getKey()" -> "general.DefaultKeyedValueDataset#getKey()";
  "java.io.ObjectOutputStream#defaultWriteObject()" -> "org.jfree.chart$annotations.XYImageAnnotation#writeObject(java.io.ObjectOutputStream)";
  "java.io.ObjectOutputStream#defaultWriteObject()" -> "org.jfree.chart$renderer.category.ScatterRenderer#writeObject(java.io.ObjectOutputStream)";
  "java.io.ObjectOutputStream#defaultWriteObject()" -> "org.jfree.chart$title.Title#writeObject(java.io.ObjectOutputStream)";
  "java.io.ObjectOutputStream#defaultWriteObject()" -> "org.jfree.chart$plot.dial.DialPlot#writeObject(java.io.ObjectOutputStream)";
  "java.io.ObjectOutputStream#defaultWriteObject()" -> "org.jfree.data$general.AbstractDataset#writeObject(java.io.ObjectOutputStream)";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "HashUtilities#hashCode(int,java.awt.Paint)";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "annotations.CategoryPointerAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "util.HashUtilities#hashCode(int,java.awt.Paint)";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "dial.StandardDialFrame#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "org.jfree.chart$annotations.XYShapeAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "StandardDialRange#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "plot.dial.StandardDialFrame#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "dial.StandardDialRange#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "XYShapeAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "DialValueIndicator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "plot.dial.StandardDialRange#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "plot.dial.ArcDialFrame#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "dial.DialValueIndicator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "org.jfree.chart$util.HashUtilities#hashCode(int,java.awt.Paint)";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "org.jfree.chart$plot.dial.DialCap#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "plot.dial.DialValueIndicator#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "CategoryPointerAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "annotations.XYShapeAnnotation#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "ArcDialFrame#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "DialCap#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "dial.DialCap#hashCode()";
  "org.jfree.chart$util.HashUtilities#hashCodeForPaint(java.awt.Paint)" -> "StandardDialFrame#hashCode()";
  "org.jfree.data$xml.ItemHandler#setValue(java.lang.Number)" -> "ValueHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "org.jfree.data$xml.ItemHandler#setValue(java.lang.Number)" -> "xml.ValueHandler#endElement(java.lang.String,java.lang.String,java.lang.String)";
  "java.awt.Dimension#<init(int,int)" -> "org.jfree.chart$ui.StrokeSample#<init(java.awt.Stroke)";
  "java.awt.Dimension#<init(int,int)" -> "org.jfree.chart$ui.PaintSample#<init(java.awt.Paint)";
  "java.util.Vector#size()" -> "org.jfree.data$xml.RootHandler#getCurrentHandler()";
  "org.jfree.chart$axis.Axis#getTickLabelFont()" -> "plot.JThermometer#getTickLabelFont()";
  "org.jfree.chart$axis.Axis#getTickLabelFont()" -> "CategoryAxis#getTickLabelFont(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#getTickLabelFont()" -> "axis.CategoryAxis#getTickLabelFont(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#getTickLabelFont()" -> "org.jfree.chart$plot.JThermometer#getTickLabelFont()";
  "org.jfree.chart$axis.Axis#getTickLabelFont()" -> "JThermometer#getTickLabelFont()";
  "org.jfree.chart$renderer.category.BarRenderer3D#getYOffset()" -> "StackedBarRenderer3D#createHorizontalBlock(double,double,double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#getYOffset()" -> "category.StackedBarRenderer3D#createHorizontalBlock(double,double,double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#getYOffset()" -> "category.StackedBarRenderer3D#createVerticalBlock(double,double,double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#getYOffset()" -> "StackedBarRenderer3D#createVerticalBlock(double,double,double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#getYOffset()" -> "renderer.category.StackedBarRenderer3D#createHorizontalBlock(double,double,double,double,boolean)";
  "org.jfree.chart$renderer.category.BarRenderer3D#getYOffset()" -> "renderer.category.StackedBarRenderer3D#createVerticalBlock(double,double,double,double,boolean)";
  "org.jfree.data$general.DefaultValueDataset#getValue()" -> "plot.JThermometer#getValue()";
  "org.jfree.data$general.DefaultValueDataset#getValue()" -> "plot.ThermometerPlot#getCurrentPaint()";
  "org.jfree.data$general.DefaultValueDataset#getValue()" -> "ThermometerPlot#getCurrentPaint()";
  "org.jfree.data$general.DefaultValueDataset#getValue()" -> "org.jfree.chart$plot.JThermometer#getValue()";
  "org.jfree.data$general.DefaultValueDataset#getValue()" -> "JThermometer#getValue()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMinOutlier()" -> "DefaultBoxAndWhiskerXYDataset#getMinOutlier(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMinOutlier()" -> "statistics.DefaultBoxAndWhiskerXYDataset#getMinOutlier(int,int)";
  "org.jfree.data$DefaultKeyedValues#getItemCount()" -> "DefaultPieDataset#getItemCount()";
  "org.jfree.data$DefaultKeyedValues#getItemCount()" -> "general.DefaultPieDataset#getItemCount()";
  "org.jfree.chart$needle.MeterNeedle#<clinit()" -> "org.jfree.chart$needle.MeterNeedle#getTransform()";
  "org.jfree.chart$needle.MeterNeedle#<clinit()" -> "MeterNeedle#getTransform()";
  "org.jfree.chart$needle.MeterNeedle#<clinit()" -> "MeterNeedle#<clinit()";
  "org.jfree.chart$needle.MeterNeedle#<clinit()" -> "needle.MeterNeedle#getTransform()";
  "org.jfree.chart$needle.MeterNeedle#<clinit()" -> "needle.MeterNeedle#<clinit()";
  "org.jfree.chart$needle.MeterNeedle#getTransform()" -> "needle.PointerNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#getTransform()" -> "LongNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#getTransform()" -> "PointerNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.chart$needle.MeterNeedle#getTransform()" -> "needle.LongNeedle#drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)";
  "org.jfree.data$xy.DefaultOHLCDataset#getVolume(int,int)" -> "DefaultOHLCDataset#getVolumeValue(int,int)";
  "org.jfree.data$Range#contains(double)" -> "Range#constrain(double)";
  "org.jfree.chart$axis.TickUnit#getSize()" -> "org.jfree.chart$axis.TickUnit#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.TickUnit#getSize()" -> "TickUnit#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.TickUnit#getSize()" -> "axis.TickUnit#compareTo(java.lang.Object)";
  "java.util.Calendar#<clinit()" -> "org.jfree.chart$axis.DateTickUnit#rollDate(java.util.Date)";
  "java.util.Calendar#<clinit()" -> "org.jfree.chart$axis.DateTickUnit#addToDate(java.util.Date)";
  "java.util.Calendar#<clinit()" -> "org.jfree.chart$axis.DateTickUnit#rollDate(java.util.Date,java.util.TimeZone)";
  "java.util.Calendar#<clinit()" -> "org.jfree.chart$axis.DateTickUnit#addToDate(java.util.Date,java.util.TimeZone)";
  "org.jfree.data$KeyedObject#getKey()" -> "KeyedObjects#getKeys()";
  "org.jfree.data$KeyedObject#getKey()" -> "KeyedObjects#getKey(int)";
  "java.awt.RenderingHints#get(java.lang.Object)" -> "org.jfree.chart$JFreeChart#getTextAntiAlias()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "DefaultTableXYDataset#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "org.jfree.data$xy.CategoryTableXYDataset#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "xy.XYSeriesCollection#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "xy.CategoryTableXYDataset#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "org.jfree.data$xy.XYSeriesCollection#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "org.jfree.data$xy.DefaultTableXYDataset#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "xy.DefaultTableXYDataset#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "CategoryTableXYDataset#getIntervalPositionFactor()";
  "org.jfree.data$xy.IntervalXYDelegate#getIntervalPositionFactor()" -> "XYSeriesCollection#getIntervalPositionFactor()";
  "java.lang.Long#doubleValue()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getDomainLowerBound(boolean)";
  "java.lang.Long#doubleValue()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getDomainUpperBound(boolean)";
  "java.text.NumberFormat#getNumberInstance()" -> "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.table$JTableHeader$AccessibleJTableHeader#getAccessibleAt(java.awt.Point)";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.JTable#prepareRenderer(javax.swing.table.TableCellRenderer,int,int)";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.table$JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry#getCurrentComponent()";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.table$JTableHeader$AccessibleJTableHeader$AccessibleJTableHeaderEntry#getCurrentAccessibleContext()";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.JTable$AccessibleJTable$AccessibleJTableCell#getCurrentAccessibleContext()";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.table$JTableHeader$AccessibleJTableHeader#getAccessibleChild(int)";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.JTable$AccessibleJTable$AccessibleTableHeader#getAccessibleAt(int,int)";
  "org.jfree.chart$util.NumberCellRenderer#getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" -> "javax.swing.JTable$AccessibleJTable$AccessibleJTableCell#getCurrentComponent()";
  "java.lang.Float#doubleValue()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getRangeLowerBound(boolean)";
  "java.lang.Float#doubleValue()" -> "org.jfree.data$time.DynamicTimeSeriesCollection#getRangeUpperBound(boolean)";
  "DefaultKeyedValueDataset#getValue()" -> "org.jfree.data$general.DefaultKeyedValueDataset#getValue()";
  "org.jfree.data$general.DefaultKeyedValueDataset#getValue()" -> "general.DefaultKeyedValueDataset#getValue()";
  "org.jfree.chart$plot.Plot#getParent()" -> "Plot#isSubplot()";
  "org.jfree.chart$plot.Plot#getParent()" -> "org.jfree.chart$plot.Plot#getRootPlot()";
  "org.jfree.chart$plot.Plot#getParent()" -> "Plot#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getParent()" -> "org.jfree.chart$plot.Plot#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getParent()" -> "plot.Plot#isSubplot()";
  "org.jfree.chart$plot.Plot#getParent()" -> "org.jfree.chart$plot.Plot#isSubplot()";
  "org.jfree.chart$plot.Plot#getRootPlot()" -> "Plot#getRootPlot()";
  "org.jfree.chart$plot.Plot#getRootPlot()" -> "plot.Plot#getRootPlot()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "org.jfree.chart$renderer.xy.AbstractXYItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "DefaultPolarItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "renderer.WaferMapRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "renderer.xy.AbstractXYItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "renderer.DefaultPolarItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "WaferMapRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "AbstractXYItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "xy.AbstractXYItemRenderer#getDrawingSupplier()";
  "org.jfree.chart$plot.Plot#getDrawingSupplier()" -> "plot.Plot#getDrawingSupplier()";
  "org.jfree.data$xy.XYDataItem#getX()" -> "xy.XYDataItem#compareTo(java.lang.Object)";
  "org.jfree.chart$axis.AxisLocation#toString()" -> "AxisLocation#equals(java.lang.Object)";
  "org.jfree.chart$axis.AxisLocation#toString()" -> "axis.AxisLocation#equals(java.lang.Object)";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "XYSeriesCollection#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "CategoryTableXYDataset#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "xy.IntervalXYDelegate#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "org.jfree.data$xy.CategoryTableXYDataset#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "org.jfree.data$xy.DefaultTableXYDataset#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "org.jfree.data$xy.XYSeriesCollection#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "IntervalXYDelegate#getIntervalWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "DefaultTableXYDataset#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "xy.XYSeriesCollection#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "xy.CategoryTableXYDataset#isAutoWidth()";
  "org.jfree.data$xy.IntervalXYDelegate#isAutoWidth()" -> "xy.DefaultTableXYDataset#isAutoWidth()";
  "java.lang.System#<clinit()" -> "org.jfree.data$xml.DatasetReader#readPieDatasetFromXML(java.io.InputStream)";
  "java.lang.System#<clinit()" -> "org.jfree.data$jdbc.JDBCPieDataset#close()";
  "java.lang.System#<clinit()" -> "org.jfree.chart$util.StringUtilities#getLineSeparator()";
  "java.lang.System#<clinit()" -> "org.jfree.chart$util.ArrayUtilities#clone(float[][])";
  "java.lang.System#<clinit()" -> "org.jfree.data$general.CombinedDataset#joinMap(int[],int[])";
  "java.lang.System#<clinit()" -> "org.jfree.data$jdbc.JDBCXYDataset#close()";
  "java.lang.System#<clinit()" -> "org.jfree.data$xml.DatasetReader#readCategoryDatasetFromXML(java.io.InputStream)";
  "org.jfree.data$xml.DatasetReader#readPieDatasetFromXML(java.io.InputStream)" -> "DatasetReader#readPieDatasetFromXML(java.io.File)";
  "org.jfree.data$xml.DatasetReader#readPieDatasetFromXML(java.io.InputStream)" -> "xml.DatasetReader#readPieDatasetFromXML(java.io.File)";
  "org.jfree.data$xml.DatasetReader#readPieDatasetFromXML(java.io.InputStream)" -> "org.jfree.data$xml.DatasetReader#readPieDatasetFromXML(java.io.File)";
  "org.jfree.data$xml.DatasetReader#readCategoryDatasetFromXML(java.io.InputStream)" -> "DatasetReader#readCategoryDatasetFromXML(java.io.File)";
  "org.jfree.data$xml.DatasetReader#readCategoryDatasetFromXML(java.io.InputStream)" -> "org.jfree.data$xml.DatasetReader#readCategoryDatasetFromXML(java.io.File)";
  "org.jfree.data$xml.DatasetReader#readCategoryDatasetFromXML(java.io.InputStream)" -> "xml.DatasetReader#readCategoryDatasetFromXML(java.io.File)";
  "javax.swing.JList#getSelectedValue()" -> "org.jfree.chart$ui.FontChooserPanel#getSelectedName()";
  "java.lang.StringBuffer#toString()" -> "org.jfree.data$xml.KeyHandler#getCurrentText()";
  "java.lang.StringBuffer#toString()" -> "org.jfree.data$xml.ValueHandler#getCurrentText()";
  "org.jfree.data$time.Day#getYear()" -> "org.jfree.data$time.Hour#getYear()";
  "org.jfree.data$time.Day#getYear()" -> "time.Hour#getYear()";
  "org.jfree.data$time.Day#getYear()" -> "Hour#getYear()";
  "org.jfree.data$xy.DefaultHighLowDataset#getClose(int,int)" -> "DefaultHighLowDataset#getCloseValue(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getClose(int,int)" -> "xy.DefaultHighLowDataset#getCloseValue(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getClose(int,int)" -> "DefaultHighLowDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getClose(int,int)" -> "org.jfree.data$xy.DefaultHighLowDataset#getY(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getClose(int,int)" -> "xy.DefaultHighLowDataset#getY(int,int)";
  "org.jfree.chart$renderer.category.BarRenderer#getLowerClip()" -> "BarRenderer#calculateBarL0L1(double)";
  "org.jfree.chart$renderer.category.BarRenderer#getLowerClip()" -> "renderer.category.BarRenderer#calculateBarL0L1(double)";
  "org.jfree.chart$renderer.category.BarRenderer#getLowerClip()" -> "category.BarRenderer#calculateBarL0L1(double)";
  "org.jfree.data$xy.OHLCDataItem#getHigh()" -> "xy.DefaultOHLCDataset#getHigh(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getHigh()" -> "org.jfree.data$xy.DefaultOHLCDataset#getHigh(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getHigh()" -> "DefaultOHLCDataset#getHigh(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getHigh(int,int)" -> "DefaultOHLCDataset#getHighValue(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getHigh(int,int)" -> "xy.DefaultOHLCDataset#getHighValue(int,int)";
  "org.jfree.data$resources.DataPackageResources_es#<clinit()" -> "DataPackageResources_es#getContents()";
  "org.jfree.data$resources.DataPackageResources_es#<clinit()" -> "DataPackageResources_es#<clinit()";
  "org.jfree.data$resources.DataPackageResources_es#<clinit()" -> "org.jfree.data$resources.DataPackageResources_es#getContents()";
  "org.jfree.data$resources.DataPackageResources_es#<clinit()" -> "resources.DataPackageResources_es#getContents()";
  "org.jfree.data$resources.DataPackageResources_es#<clinit()" -> "resources.DataPackageResources_es#<clinit()";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconWidth()" -> "sun.swing.table$DefaultTableCellHeaderRenderer#computeIconPosition(java.awt.Graphics)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconWidth()" -> "sun.swing.DefaultLayoutStyle#getIndent(javax.swing.JComponent,int)";
  "org.jfree.chart$renderer.category.MinMaxCategoryRenderer$1#getIconWidth()" -> "javax.swing.plaf$IconUIResource#getIconWidth()";
  "org.jfree.chart$util.AbstractObjectList#indexOf(java.lang.Object)" -> "util.ObjectList#indexOf(java.lang.Object)";
  "org.jfree.chart$util.AbstractObjectList#indexOf(java.lang.Object)" -> "ObjectList#indexOf(java.lang.Object)";
  "org.jfree.chart$renderer.OutlierList#setAveragedOutlier(org.jfree.chart.renderer.Outlier)" -> "renderer.OutlierList#<init(org.jfree.chart.renderer.Outlier)";
  "org.jfree.chart$renderer.OutlierList#setAveragedOutlier(org.jfree.chart.renderer.Outlier)" -> "OutlierList#<init(org.jfree.chart.renderer.Outlier)";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources#getContents()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources_fr#<clinit()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources_pl#getContents()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.chart$resources.JFreeChartResources#getContents()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources#<clinit()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.chart$resources.JFreeChartResources#<clinit()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources_pl#<clinit()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources_de#getContents()";
  "java.util.ResourceBundle#<clinit()" -> "org.jfree.data$resources.DataPackageResources_de#<clinit()";
  "org.jfree.data$resources.DataPackageResources_fr#<clinit()" -> "resources.DataPackageResources_fr#getContents()";
  "org.jfree.data$resources.DataPackageResources_fr#<clinit()" -> "DataPackageResources_fr#getContents()";
  "org.jfree.data$resources.DataPackageResources_fr#<clinit()" -> "resources.DataPackageResources_fr#<clinit()";
  "org.jfree.data$resources.DataPackageResources_fr#<clinit()" -> "org.jfree.data$resources.DataPackageResources_fr#getContents()";
  "org.jfree.data$resources.DataPackageResources_fr#<clinit()" -> "DataPackageResources_fr#<clinit()";
  "org.jfree.data$resources.DataPackageResources#<clinit()" -> "DataPackageResources#<clinit()";
  "org.jfree.data$resources.DataPackageResources#<clinit()" -> "DataPackageResources#getContents()";
  "org.jfree.data$resources.DataPackageResources#<clinit()" -> "resources.DataPackageResources#getContents()";
  "org.jfree.data$resources.DataPackageResources#<clinit()" -> "resources.DataPackageResources#<clinit()";
  "org.jfree.chart$resources.JFreeChartResources#<clinit()" -> "JFreeChartResources#getContents()";
  "org.jfree.chart$resources.JFreeChartResources#<clinit()" -> "resources.JFreeChartResources#<clinit()";
  "org.jfree.chart$resources.JFreeChartResources#<clinit()" -> "JFreeChartResources#<clinit()";
  "org.jfree.chart$resources.JFreeChartResources#<clinit()" -> "resources.JFreeChartResources#getContents()";
  "org.jfree.data$resources.DataPackageResources_pl#<clinit()" -> "resources.DataPackageResources_pl#getContents()";
  "org.jfree.data$resources.DataPackageResources_pl#<clinit()" -> "DataPackageResources_pl#getContents()";
  "org.jfree.data$resources.DataPackageResources_pl#<clinit()" -> "resources.DataPackageResources_pl#<clinit()";
  "org.jfree.data$resources.DataPackageResources_pl#<clinit()" -> "DataPackageResources_pl#<clinit()";
  "org.jfree.data$resources.DataPackageResources_de#<clinit()" -> "resources.DataPackageResources_de#getContents()";
  "org.jfree.data$resources.DataPackageResources_de#<clinit()" -> "DataPackageResources_de#getContents()";
  "org.jfree.data$resources.DataPackageResources_de#<clinit()" -> "resources.DataPackageResources_de#<clinit()";
  "org.jfree.data$resources.DataPackageResources_de#<clinit()" -> "DataPackageResources_de#<clinit()";
  "org.jfree.data$xy.XYDataItem#setY(java.lang.Number)" -> "xy.XYDataItem#setY(double)";
  "org.jfree.data$xy.XYDataItem#setY(java.lang.Number)" -> "XYDataItem#setY(double)";
  "org.jfree.data$xy.OHLCDataItem#getLow()" -> "xy.DefaultOHLCDataset#getLow(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getLow()" -> "org.jfree.data$xy.DefaultOHLCDataset#getLow(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getLow(int,int)" -> "DefaultOHLCDataset#getLowValue(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getLow(int,int)" -> "xy.DefaultOHLCDataset#getLowValue(int,int)";
  "org.jfree.chart$plot.Plot#getOutlineStroke()" -> "category.LineRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#getOutlineStroke()" -> "category.BarRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#getOutlineStroke()" -> "renderer.category.BarRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#getOutlineStroke()" -> "renderer.category.LineRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#getOutlineStroke()" -> "BarRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.chart$plot.Plot#getOutlineStroke()" -> "LineRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)";
  "org.jfree.data$time.Day#getMonth()" -> "Hour#getMonth()";
  "org.jfree.data$time.Day#getMonth()" -> "time.Hour#getMonth()";
  "org.jfree.data$time.Day#getMonth()" -> "org.jfree.data$time.Hour#getMonth()";
  "java.lang.StringBuffer#length()" -> "org.jfree.data$xml.KeyHandler#clearCurrentText()";
  "java.lang.StringBuffer#length()" -> "org.jfree.data$xml.ValueHandler#clearCurrentText()";
  "org.jfree.data$xml.KeyHandler#clearCurrentText()" -> "KeyHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ValueHandler#clearCurrentText()" -> "xml.ValueHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "org.jfree.data$xml.ValueHandler#clearCurrentText()" -> "ValueHandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)";
  "java.awt.Color#<init(int,int,int)" -> "org.jfree.chart$ChartColor#<init(int,int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelPaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemLabelPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelPaint(int)" -> "AbstractRenderer#getItemLabelPaint(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelPaint(int)" -> "renderer.AbstractRenderer#getItemLabelPaint(int,int)";
  "org.jfree.chart$entity.ChartEntity#getURLText()" -> "entity.CategoryLabelEntity#toString()";
  "org.jfree.chart$entity.ChartEntity#getURLText()" -> "CategoryLabelEntity#toString()";
  "org.jfree.data$xy.DefaultHighLowDataset#getVolume(int,int)" -> "xy.DefaultHighLowDataset#getVolumeValue(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getVolume(int,int)" -> "DefaultHighLowDataset#getVolumeValue(int,int)";
  "java.lang.String#<clinit()" -> "org.jfree.chart$LegendItem#characterIteratorToString(java.text.CharacterIterator)";
  "java.lang.String#<clinit()" -> "org.jfree.chart$axis.TickUnit#valueToString(double)";
  "java.lang.String#<clinit()" -> "org.jfree.chart$axis.DateTickUnit#<clinit()";
  "org.jfree.chart$axis.DateTickUnit#<clinit()" -> "axis.DateTickUnit#<clinit()";
  "org.jfree.chart$axis.DateTickUnit#<clinit()" -> "DateTickUnit#<clinit()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryCount()" -> "category.DefaultIntervalCategoryDataset#getEndValue(int,int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryCount()" -> "category.DefaultIntervalCategoryDataset#getStartValue(int,int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getCategoryCount()" -> "DefaultIntervalCategoryDataset#getStartValue(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getOpen(int,int)" -> "DefaultOHLCDataset#getOpenValue(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getOpen(int,int)" -> "xy.DefaultOHLCDataset#getOpenValue(int,int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesCount()" -> "DefaultIntervalCategoryDataset#getCategoryCount()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesCount()" -> "category.DefaultIntervalCategoryDataset#getSeriesKey(int)";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesCount()" -> "category.DefaultIntervalCategoryDataset#getCategoryCount()";
  "org.jfree.data$category.DefaultIntervalCategoryDataset#getSeriesCount()" -> "DefaultIntervalCategoryDataset#getSeriesKey(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "renderer.AbstractRenderer#getSeriesOutlineStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "org.jfree.chart$plot.SpiderWebPlot#getSeriesOutlineStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "SpiderWebPlot#getSeriesOutlineStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "renderer.AbstractRenderer#getSeriesStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "AbstractRenderer#getSeriesStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "AbstractRenderer#getSeriesOutlineStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "plot.SpiderWebPlot#getSeriesOutlineStroke(int)";
  "org.jfree.chart$util.StrokeList#getStroke(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesOutlineStroke(int)";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.data$resources.DataPackageResources_es#<init()";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.data$resources.DataPackageResources#<init()";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.chart$resources.JFreeChartResources#<init()";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.data$resources.DataPackageResources_ru#<init()";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.data$resources.DataPackageResources_pl#<init()";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.data$resources.DataPackageResources_de#<init()";
  "java.util.ListResourceBundle#<init()" -> "org.jfree.data$resources.DataPackageResources_fr#<init()";
  "javax.swing.JPasswordField#getText()" -> "org.jfree.chart$editor.DefaultAxisEditor#getLabel()";
  "javax.swing.JPasswordField#getText()" -> "org.jfree.chart$editor.DefaultTitleEditor#getTitleText()";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getY(int,int)" -> "CyclicXYItemRenderer$OverwriteDataSet#getYValue(int,int)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getY(int,int)" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#getYValue(int,int)";
  "java.awt.geom$Point2D$Double#<init(double,double)" -> "org.jfree.experimental$chart.renderer.xy.XYSmoothLineAndShapeRenderer#getControlPoints(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double)";
  "java.lang.reflect$Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.jfree.data$KeyToGroupMap#clone(java.lang.Object)";
  "org.jfree.data$KeyToGroupMap#clone(java.lang.Object)" -> "KeyToGroupMap#clone(java.util.Collection)";
  "org.jfree.chart$axis.Axis#getTickLabelPaint()" -> "CategoryAxis#getTickLabelPaint(java.lang.Comparable)";
  "org.jfree.chart$axis.Axis#getTickLabelPaint()" -> "axis.CategoryAxis#getTickLabelPaint(java.lang.Comparable)";
  "java.awt.BasicStroke#hashCode()" -> "org.jfree.chart$util.HashUtilities#hashCode(int,java.awt.Stroke)";
  "org.jfree.chart$ui.StrokeSample#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)" -> "javax.swing.plaf$basic.BasicComboBoxUI#getDefaultSize()";
  "org.jfree.chart$ui.StrokeSample#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)" -> "javax.swing.JList$AccessibleJList$AccessibleJListChild#getComponentAtIndex(int)";
  "org.jfree.chart$ui.StrokeSample#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)" -> "javax.swing.plaf$basic.BasicComboBoxUI#getBaselineResizeBehavior(javax.swing.JComponent)";
  "org.jfree.chart$ui.StrokeSample#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)" -> "javax.swing.plaf$basic.BasicComboBoxUI#getBaseline(javax.swing.JComponent,int,int)";
  "org.jfree.data$gantt.Task#getDescription()" -> "gantt.TaskSeries#get(java.lang.String)";
  "org.jfree.data$gantt.Task#getDescription()" -> "TaskSeries#get(java.lang.String)";
  "org.jfree.chart$ui.StrokeSample#setStroke(java.awt.Stroke)" -> "ui.StrokeSample#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)";
  "org.jfree.chart$ui.StrokeSample#setStroke(java.awt.Stroke)" -> "StrokeSample#getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)";
  "java.lang.Boolean#valueOf(boolean)" -> "org.jfree.chart$editor.DefaultPlotEditor#attemptDrawShapesSelection()";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getX(int,int)" -> "CyclicXYItemRenderer$OverwriteDataSet#getXValue(int,int)";
  "org.jfree.chart$renderer.xy.CyclicXYItemRenderer$OverwriteDataSet#getX(int,int)" -> "xy.CyclicXYItemRenderer$OverwriteDataSet#getXValue(int,int)";
  "org.jfree.chart$needle.MeterNeedle#setOutlineStroke(java.awt.Stroke)" -> "plot.CompassPlot#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$needle.MeterNeedle#setOutlineStroke(java.awt.Stroke)" -> "CompassPlot#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$needle.MeterNeedle#setOutlineStroke(java.awt.Stroke)" -> "org.jfree.chart$plot.CompassPlot#setSeriesOutlineStroke(int,java.awt.Stroke)";
  "org.jfree.chart$axis.LogarithmicAxis#setupNumberFmtObj()" -> "org.jfree.chart$axis.LogarithmicAxis#setExpTickLabelsFlag(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#setupNumberFmtObj()" -> "LogarithmicAxis#setExpTickLabelsFlag(boolean)";
  "org.jfree.chart$axis.LogarithmicAxis#setupNumberFmtObj()" -> "axis.LogarithmicAxis#setExpTickLabelsFlag(boolean)";
  "org.jfree.chart$plot.ThermometerPlot#getColumnRadius()" -> "plot.ThermometerPlot#getColumnDiameter()";
  "org.jfree.chart$plot.ThermometerPlot#getColumnRadius()" -> "org.jfree.chart$plot.ThermometerPlot#getColumnDiameter()";
  "org.jfree.chart$plot.ThermometerPlot#getColumnRadius()" -> "ThermometerPlot#getColumnDiameter()";
  "sun.awt.util$IdentityLinkedList#addAll(java.util.Collection)" -> "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)";
  "org.jfree.chart$util.RelativeDateFormat#<clinit()" -> "RelativeDateFormat#<clinit()";
  "org.jfree.chart$util.RelativeDateFormat#<clinit()" -> "util.RelativeDateFormat#<clinit()";
  "org.jfree.chart$util.RelativeDateFormat#<clinit()" -> "RelativeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$util.RelativeDateFormat#<clinit()" -> "util.RelativeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.jfree.chart$needle.MeterNeedle#setFillPaint(java.awt.Paint)" -> "CompassPlot#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$needle.MeterNeedle#setFillPaint(java.awt.Paint)" -> "plot.CompassPlot#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.chart$needle.MeterNeedle#setFillPaint(java.awt.Paint)" -> "org.jfree.chart$plot.CompassPlot#setSeriesPaint(int,java.awt.Paint)";
  "org.jfree.data$xy.OHLCDataItem#getDate()" -> "DefaultOHLCDataset#getX(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getDate()" -> "xy.DefaultOHLCDataset#getXDate(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getDate()" -> "xy.DefaultOHLCDataset#getX(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getDate()" -> "org.jfree.data$xy.DefaultOHLCDataset#getXDate(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getDate()" -> "DefaultOHLCDataset#getXDate(int,int)";
  "org.jfree.data$xml.CategoryDatasetHandler#getDataset()" -> "DatasetReader#readCategoryDatasetFromXML(java.io.InputStream)";
  "org.jfree.data$xml.CategoryDatasetHandler#getDataset()" -> "xml.DatasetReader#readCategoryDatasetFromXML(java.io.InputStream)";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "ServletUtilities#setTempOneTimeFilePrefix(java.lang.String)";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "servlet.ServletUtilities#getTempFilePrefix()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "servlet.ServletUtilities#setTempOneTimeFilePrefix(java.lang.String)";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "servlet.ServletUtilities#setTempFilePrefix(java.lang.String)";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "ServletUtilities#getTempFilePrefix()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "ServletUtilities#setTempFilePrefix(java.lang.String)";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "servlet.ServletUtilities#<clinit()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "servlet.ServletUtilities#getTempOneTimeFilePrefix()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "ServletUtilities#getTempOneTimeFilePrefix()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "ServletUtilities#<clinit()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "org.jfree.chart$servlet.ServletUtilities#getTempFilePrefix()";
  "org.jfree.chart$servlet.ServletUtilities#<clinit()" -> "org.jfree.chart$servlet.ServletUtilities#getTempOneTimeFilePrefix()";
  "org.jfree.data$xy.DefaultOHLCDataset#getClose(int,int)" -> "xy.DefaultOHLCDataset#getCloseValue(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getClose(int,int)" -> "DefaultOHLCDataset#getCloseValue(int,int)";
  "org.jfree.data$xy.DefaultOHLCDataset#getClose(int,int)" -> "DefaultOHLCDataset#getY(int,int)";
  "org.jfree.data$time.Quarter#getQuarter()" -> "Quarter#compareTo(java.lang.Object)";
  "org.jfree.data$xy.DefaultHighLowDataset#getOpen(int,int)" -> "xy.DefaultHighLowDataset#getOpenValue(int,int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "category.LineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "LineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#isSeriesVisibleInLegend(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "xy.StandardXYItemRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#getSeriesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#getSeriesVisibleInLegend(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "XYLineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "XYLineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#isSeriesItemLabelsVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.xy.StandardXYItemRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "ScatterRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#isSeriesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.DefaultPolarItemRenderer#isSeriesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "xy.XYLineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#isSeriesVisibleInLegend(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#getSeriesCreateEntities(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#isSeriesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.category.LineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesItemLabelsVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.category.ScatterRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.xy.XYLineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "xy.XYLineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.xy.XYLineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.category.LineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.category.ScatterRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.xy.StandardXYItemRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "category.LineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesVisibleInLegend(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "LineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "category.LineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "XYLineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "StandardXYItemRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.AbstractRenderer#isSeriesItemLabelsVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "category.ScatterRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.DefaultPolarItemRenderer#isSeriesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "LineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#getSeriesItemLabelsVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "DefaultPolarItemRenderer#isSeriesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesCreateEntities(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#getSeriesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#getSeriesItemLabelsVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#getSeriesCreateEntities(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.AbstractRenderer#isSeriesItemLabelsVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "AbstractRenderer#getSeriesVisibleInLegend(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.category.LineAndShapeRenderer#getSeriesLinesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesVisible(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "StandardXYItemRenderer#getSeriesShapesFilled(int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "renderer.xy.StandardXYItemRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$util.BooleanList#getBoolean(int)" -> "xy.StandardXYItemRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)" -> "XYLineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)" -> "renderer.xy.XYLineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)" -> "xy.XYLineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesFilled(int)" -> "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesLinesVisible(int)" -> "category.LineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesLinesVisible(int)" -> "LineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesLinesVisible(int)" -> "org.jfree.chart$renderer.category.LineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesLinesVisible(int)" -> "renderer.category.LineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.category.ScatterRenderer#getSeriesShapesFilled(int)" -> "category.ScatterRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.category.ScatterRenderer#getSeriesShapesFilled(int)" -> "org.jfree.chart$renderer.category.ScatterRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.category.ScatterRenderer#getSeriesShapesFilled(int)" -> "ScatterRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.category.ScatterRenderer#getSeriesShapesFilled(int)" -> "renderer.category.ScatterRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#isSeriesItemLabelsVisible(int)" -> "AbstractRenderer#isItemLabelVisible(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#isSeriesItemLabelsVisible(int)" -> "renderer.AbstractRenderer#isItemLabelVisible(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesVisible(int)" -> "renderer.xy.XYLineAndShapeRenderer#getItemShapeVisible(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesVisible(int)" -> "xy.XYLineAndShapeRenderer#getItemShapeVisible(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesShapesVisible(int)" -> "XYLineAndShapeRenderer#getItemShapeVisible(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesFilled(int)" -> "LineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesFilled(int)" -> "renderer.category.LineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesFilled(int)" -> "category.LineAndShapeRenderer#getItemShapeFilled(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesLinesVisible(int)" -> "xy.XYLineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesLinesVisible(int)" -> "XYLineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.xy.XYLineAndShapeRenderer#getSeriesLinesVisible(int)" -> "renderer.xy.XYLineAndShapeRenderer#getItemLineVisible(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesCreateEntities(int)" -> "AbstractRenderer#getItemCreateEntity(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesCreateEntities(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getItemCreateEntity(int,int)";
  "org.jfree.chart$renderer.AbstractRenderer#getSeriesCreateEntities(int)" -> "renderer.AbstractRenderer#getItemCreateEntity(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesVisible(int)" -> "category.LineAndShapeRenderer#getItemShapeVisible(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesVisible(int)" -> "renderer.category.LineAndShapeRenderer#getItemShapeVisible(int,int)";
  "org.jfree.chart$renderer.category.LineAndShapeRenderer#getSeriesShapesVisible(int)" -> "LineAndShapeRenderer#getItemShapeVisible(int,int)";
  "org.jfree.chart$ui.ProjectInfo#getLogo()" -> "JFreeChartInfo#getLogo()";
  "org.jfree.chart$ui.ProjectInfo#getLogo()" -> "org.jfree.chart$JFreeChartInfo#getLogo()";
  "org.jfree.data$xml.RootHandler#<init()" -> "xml.PieDatasetHandler#<init()";
  "org.jfree.data$xml.RootHandler#<init()" -> "CategoryDatasetHandler#<init()";
  "org.jfree.data$xml.RootHandler#<init()" -> "org.jfree.data$xml.PieDatasetHandler#<init()";
  "org.jfree.data$xml.RootHandler#<init()" -> "PieDatasetHandler#<init()";
  "org.jfree.data$xml.RootHandler#<init()" -> "xml.CategoryDatasetHandler#<init()";
  "org.jfree.data$xml.RootHandler#<init()" -> "org.jfree.data$xml.CategoryDatasetHandler#<init()";
  "org.jfree.data$xml.PieDatasetHandler#<init()" -> "xml.DatasetReader#readPieDatasetFromXML(java.io.InputStream)";
  "org.jfree.data$xml.PieDatasetHandler#<init()" -> "DatasetReader#readPieDatasetFromXML(java.io.InputStream)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMedian()" -> "statistics.DefaultBoxAndWhiskerXYDataset#getMedianValue(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMedian()" -> "DefaultBoxAndWhiskerXYDataset#getMedianValue(int,int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "ShapeList#getShape(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "PaintList#getPaint(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "org.jfree.chart$util.ShapeList#getShape(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "util.ShapeList#getShape(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "util.ObjectList#get(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "org.jfree.chart$util.PaintList#getPaint(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "util.BooleanList#getBoolean(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "util.PaintList#getPaint(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "ObjectList#get(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "util.StrokeList#getStroke(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "StrokeList#getStroke(int)";
  "org.jfree.chart$util.AbstractObjectList#get(int)" -> "BooleanList#getBoolean(int)";
  "org.jfree.chart$util.ShapeList#getShape(int)" -> "AbstractRenderer#getSeriesShape(int)";
  "org.jfree.chart$util.ShapeList#getShape(int)" -> "renderer.AbstractRenderer#getSeriesShape(int)";
  "org.jfree.chart$util.ShapeList#getShape(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesShape(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "AbstractRenderer#getSeriesItemLabelPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "renderer.AbstractRenderer#getSeriesFillPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "SpiderWebPlot#getSeriesOutlinePaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesFillPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "renderer.AbstractRenderer#getSeriesItemLabelPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "renderer.AbstractRenderer#getSeriesPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "AbstractRenderer#getSeriesFillPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "AbstractRenderer#getSeriesOutlinePaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "AbstractRenderer#getSeriesPaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "renderer.AbstractRenderer#getSeriesOutlinePaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "plot.SpiderWebPlot#getSeriesOutlinePaint(int)";
  "org.jfree.chart$util.PaintList#getPaint(int)" -> "org.jfree.chart$renderer.AbstractRenderer#getSeriesOutlinePaint(int)";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "time.Day#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "Day#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "time.SpreadsheetDate#toDate()";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "Day#getYear()";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "time.Day#getLastMillisecond(java.util.Calendar)";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "Day#getFirstMillisecond(java.util.Calendar)";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "SpreadsheetDate#toDate()";
  "org.jfree.data$time.SpreadsheetDate#getYYYY()" -> "time.Day#getYear()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getQ3()" -> "statistics.DefaultBoxAndWhiskerXYDataset#getQ3Value(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getQ3()" -> "DefaultBoxAndWhiskerXYDataset#getQ3Value(int,int)";
  "org.jfree.chart$entity.ChartEntity#getArea()" -> "StandardEntityCollection#getEntity(double,double)";
  "org.jfree.chart$entity.ChartEntity#getArea()" -> "entity.StandardEntityCollection#getEntity(double,double)";
  "java.util.ArrayList#clone()" -> "org.jfree.data$DefaultKeyedValues#getKeys()";
  "org.jfree.data$DefaultKeyedValues#getKeys()" -> "DefaultPieDataset#getKeys()";
  "org.jfree.data$DefaultKeyedValues#getKeys()" -> "general.DefaultPieDataset#getKeys()";
  "org.jfree.data$xy.WindDataItem#getWindDirection()" -> "xy.DefaultWindDataset#getWindDirection(int,int)";
  "org.jfree.data$xy.WindDataItem#getWindDirection()" -> "DefaultWindDataset#getWindDirection(int,int)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond()" -> "time.Millisecond#compareTo(java.lang.Object)";
  "org.jfree.data$time.Millisecond#getFirstMillisecond()" -> "Millisecond#compareTo(java.lang.Object)";
  "org.jfree.chart$util.ApplicationFrame#windowOpened(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowOpened(java.awt.event.WindowEvent)";
  "java.lang.String#length()" -> "org.jfree.chart$util.StringUtilities#startsWithIgnoreCase(java.lang.String,java.lang.String)";
  "java.lang.String#length()" -> "org.jfree.chart$util.StringUtilities#endsWithIgnoreCase(java.lang.String,java.lang.String)";
  "org.jfree.chart$ui.StrokeChooserPanel#getSelector()" -> "StrokeChooserPanel$1#actionPerformed(java.awt.event.ActionEvent)";
  "org.jfree.chart$ui.StrokeChooserPanel#getSelector()" -> "ui.StrokeChooserPanel$1#actionPerformed(java.awt.event.ActionEvent)";
  "java.lang.String#indexOf(int)" -> "org.jfree.data$time.Month#findSeparator(java.lang.String)";
  "java.lang.String#indexOf(int)" -> "org.jfree.data$time.Week#findSeparator(java.lang.String)";
  "org.jfree.data$xy.DefaultHighLowDataset#getHigh(int,int)" -> "DefaultHighLowDataset#getHighValue(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getHigh(int,int)" -> "xy.DefaultHighLowDataset#getHighValue(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getLow(int,int)" -> "xy.DefaultHighLowDataset#getLowValue(int,int)";
  "org.jfree.data$xy.DefaultHighLowDataset#getLow(int,int)" -> "DefaultHighLowDataset#getLowValue(int,int)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "DateTickUnit#addToDate(java.util.Date)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "DateTickUnit#getCalendarField()";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "DateTickUnit#rollDate(java.util.Date)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "axis.DateTickUnit#rollDate(java.util.Date)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "DateTickUnit#addToDate(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "DateTickUnit#rollDate(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "axis.DateTickUnit#addToDate(java.util.Date)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "axis.DateTickUnit#rollDate(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "axis.DateTickUnit#getCalendarField()";
  "org.jfree.chart$axis.DateTickUnit#getCalendarField(int)" -> "axis.DateTickUnit#addToDate(java.util.Date,java.util.TimeZone)";
  "org.jfree.chart$ui.StrokeSample#getStroke()" -> "StrokeChooserPanel#getSelectedStroke()";
  "org.jfree.chart$ui.StrokeSample#getStroke()" -> "org.jfree.chart$editor.DefaultPlotEditor#getOutlineStroke()";
  "org.jfree.chart$ui.StrokeSample#getStroke()" -> "ui.StrokeChooserPanel#getSelectedStroke()";
  "org.jfree.chart$ui.StrokeSample#getStroke()" -> "editor.DefaultPlotEditor#getOutlineStroke()";
  "org.jfree.chart$ui.StrokeSample#getStroke()" -> "DefaultPlotEditor#getOutlineStroke()";
  "org.jfree.data$xy.OHLCDataItem#getOpen()" -> "DefaultOHLCDataset#getOpen(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getOpen()" -> "xy.DefaultOHLCDataset#getOpen(int,int)";
  "org.jfree.chart$block.CenterArrangement#clear()" -> "block.BlockContainer#clear()";
  "org.jfree.chart$block.CenterArrangement#clear()" -> "BlockContainer#clear()";
  "org.jfree.data$xy.OHLCDataItem#getClose()" -> "xy.DefaultOHLCDataset#getClose(int,int)";
  "org.jfree.data$xy.OHLCDataItem#getClose()" -> "DefaultOHLCDataset#getClose(int,int)";
  "org.jfree.chart$ui.LCBLayout#addLayoutComponent(java.lang.String,java.awt.Component)" -> "java.awt.Container#addDelicately(java.awt.Component,java.awt.Container,int)";
  "org.jfree.chart$ui.LCBLayout#addLayoutComponent(java.lang.String,java.awt.Component)" -> "java.awt.Container#addImpl(java.awt.Component,java.lang.Object,int)";
  "org.jfree.data$time.SpreadsheetDate#getMonth()" -> "Day#getMonth()";
  "org.jfree.data$time.SpreadsheetDate#getMonth()" -> "time.Day#getMonth()";
  "javax.swing.AbstractButton#isSelected()" -> "org.jfree.chart$editor.DefaultAxisEditor#isTickMarksVisible()";
  "javax.swing.AbstractButton#isSelected()" -> "org.jfree.chart$editor.DefaultChartEditor#getAntiAlias()";
  "javax.swing.AbstractButton#isSelected()" -> "org.jfree.chart$ui.FontChooserPanel#getSelectedStyle()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "XYIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "XIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "xy.YIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "VectorDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "xy.XIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "YIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "xy.VectorDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "ohlc.OHLCItem#getPeriod()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "time.ohlc.OHLCItem#getPeriod()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "xy.XYIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$xy.VectorDataItem#getYValue()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "OHLCItem#getPeriod()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$xy.XIntervalDataItem#getX()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$xy.YIntervalDataItem#getX()";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMinRegularValue()" -> "DefaultBoxAndWhiskerXYDataset#getMinRegularValue(int,int)";
  "org.jfree.data$time.SpreadsheetDate#getDayOfMonth()" -> "Day#getDayOfMonth()";
  "org.jfree.data$time.SpreadsheetDate#getDayOfMonth()" -> "time.Day#getDayOfMonth()";
  "org.jfree.data$gantt.Task#setPercentComplete(java.lang.Double)" -> "Task#setPercentComplete(double)";
  "org.jfree.data$gantt.Task#setPercentComplete(java.lang.Double)" -> "gantt.Task#setPercentComplete(double)";
  "org.jfree.chart$editor.DefaultTitleEditor#enableOrDisableControls()" -> "DefaultTitleEditor#attemptModifyShowTitle()";
  "org.jfree.chart$editor.DefaultTitleEditor#enableOrDisableControls()" -> "editor.DefaultTitleEditor#attemptModifyShowTitle()";
  "org.jfree.chart$util.ApplicationFrame#windowIconified(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowIconified(java.awt.event.WindowEvent)";
  "org.jfree.data$xy.XYDatasetTableModel#isCellEditable(int,int)" -> "javax.swing.JTable#isCellEditable(int,int)";
  "org.jfree.data$xy.XYDatasetTableModel#isCellEditable(int,int)" -> "XYDatasetTableModel#setValueAt(java.lang.Object,int,int)";
  "org.jfree.data$xy.XYDatasetTableModel#isCellEditable(int,int)" -> "org.jfree.data$xy.XYDatasetTableModel#setValueAt(java.lang.Object,int,int)";
  "org.jfree.data$xy.XYDatasetTableModel#isCellEditable(int,int)" -> "xy.XYDatasetTableModel#setValueAt(java.lang.Object,int,int)";
  "org.jfree.chart$ChartPanel#getScaleY()" -> "ChartPanel#scale(java.awt.geom.Rectangle2D)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getOutlierCoefficient()" -> "statistics.DefaultBoxAndWhiskerXYDataset#setFaroutCoefficient(double)";
  "org.jfree.data$statistics.DefaultBoxAndWhiskerXYDataset#getOutlierCoefficient()" -> "DefaultBoxAndWhiskerXYDataset#setFaroutCoefficient(double)";
  "javax.swing.table$AbstractTableModel#fireTableDataChanged()" -> "org.jfree.data$xy.XYDatasetTableModel#datasetChanged(org.jfree.data.general.DatasetChangeEvent)";
  "org.jfree.chart$util.ApplicationFrame#windowDeiconified(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowDeiconified(java.awt.event.WindowEvent)";
  "org.jfree.data$statistics.SimpleHistogramBin#overlapsWith(org.jfree.data.statistics.SimpleHistogramBin)" -> "SimpleHistogramDataset#addBin(org.jfree.data.statistics.SimpleHistogramBin)";
  "org.jfree.data$statistics.SimpleHistogramBin#overlapsWith(org.jfree.data.statistics.SimpleHistogramBin)" -> "statistics.SimpleHistogramDataset#addBin(org.jfree.data.statistics.SimpleHistogramBin)";
  "org.jfree.chart$ChartPanel#updateUI()" -> "javax.swing.plaf$basic.BasicToolBarUI#installNonRolloverBorders(javax.swing.JComponent)";
  "org.jfree.chart$ChartPanel#updateUI()" -> "javax.swing.plaf$basic.BasicToolBarUI#installRolloverBorders(javax.swing.JComponent)";
  "org.jfree.chart$ChartPanel#updateUI()" -> "javax.swing.JPanel#<init(java.awt.LayoutManager,boolean)";
  "org.jfree.chart$ChartPanel#updateUI()" -> "javax.swing.SwingUtilities#updateComponentTreeUI0(java.awt.Component)";
  "org.jfree.chart$util.ApplicationFrame#windowClosed(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowClosed(java.awt.event.WindowEvent)";
  "org.jfree.chart$ui.Library#setLicenceName(java.lang.String)" -> "BasicProjectInfo#setLicenceName(java.lang.String)";
  "org.jfree.chart$ui.Library#setLicenceName(java.lang.String)" -> "ui.BasicProjectInfo#setLicenceName(java.lang.String)";
  "org.jfree.chart$ui.Library#setInfo(java.lang.String)" -> "ui.BasicProjectInfo#setInfo(java.lang.String)";
  "org.jfree.chart$ui.Library#setInfo(java.lang.String)" -> "org.jfree.chart$ui.BasicProjectInfo#setInfo(java.lang.String)";
  "org.jfree.chart$ui.Library#setInfo(java.lang.String)" -> "BasicProjectInfo#setInfo(java.lang.String)";
  "java.text.NumberFormat#<init()" -> "org.jfree.chart$axis.CompassFormat#<init()";
  "java.text.NumberFormat#<init()" -> "org.jfree.chart$util.HexNumberFormat#<init(int)";
  "org.jfree.chart$util.HexNumberFormat#<init(int)" -> "org.jfree.chart$util.HexNumberFormat#<init()";
  "org.jfree.chart$util.HexNumberFormat#<init(int)" -> "HexNumberFormat#<init()";
  "org.jfree.chart$util.HexNumberFormat#<init(int)" -> "util.HexNumberFormat#<init()";
  "java.awt.Toolkit$DesktopPropertyChangeSupport#removePropertyChangeListener(java.beans.PropertyChangeListener)" -> "org.jfree.data$general.Series#removePropertyChangeListener(java.beans.PropertyChangeListener)";
  "org.jfree.data$xy.WindDataItem#getWindForce()" -> "xy.DefaultWindDataset#getWindForce(int,int)";
  "org.jfree.data$statistics.BoxAndWhiskerItem#getMean()" -> "DefaultBoxAndWhiskerXYDataset#getMeanValue(int,int)";
  "org.jfree.chart$ui.Library#setVersion(java.lang.String)" -> "BasicProjectInfo#setVersion(java.lang.String)";
  "org.jfree.chart$ui.Library#setVersion(java.lang.String)" -> "ui.BasicProjectInfo#setVersion(java.lang.String)";
  "javax.swing.JFrame#<init(java.lang.String)" -> "org.jfree.chart$util.ApplicationFrame#<init(java.lang.String)";
  "org.jfree.chart$axis.QuarterDateFormat#parse(java.lang.String,java.text.ParsePosition)" -> "java.text.DateFormat#parse(java.lang.String)";
  "org.jfree.chart$axis.QuarterDateFormat#parse(java.lang.String,java.text.ParsePosition)" -> "java.text.DateFormat#parseObject(java.lang.String,java.text.ParsePosition)";
  "org.jfree.chart$plot.dial.DialPointer#getDatasetIndex()" -> "plot.dial.DialPlot#getPointerForDataset(int)";
  "org.jfree.chart$plot.dial.DialPointer#getDatasetIndex()" -> "DialPlot#getPointerForDataset(int)";
  "org.jfree.chart$plot.dial.DialPointer#getDatasetIndex()" -> "dial.DialPlot#getPointerForDataset(int)";
  "org.jfree.chart$ui.Library#setName(java.lang.String)" -> "BasicProjectInfo#setName(java.lang.String)";
  "org.jfree.chart$ui.Library#setName(java.lang.String)" -> "ui.BasicProjectInfo#setName(java.lang.String)";
  "org.jfree.chart$ui.Library#setName(java.lang.String)" -> "org.jfree.chart$ui.BasicProjectInfo#setName(java.lang.String)";
  "javax.swing.event$EventListenerList#getListeners(java.lang.Class)" -> "org.jfree.chart$plot.Marker#getListeners(java.lang.Class)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#wrapOffset(int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#offsetFromNewest(int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#wrapOffset(int)" -> "org.jfree.data$time.DynamicTimeSeriesCollection#offsetFromOldest(int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#wrapOffset(int)" -> "time.DynamicTimeSeriesCollection#offsetFromOldest(int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#wrapOffset(int)" -> "time.DynamicTimeSeriesCollection#offsetFromNewest(int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#wrapOffset(int)" -> "DynamicTimeSeriesCollection#offsetFromOldest(int)";
  "org.jfree.data$time.DynamicTimeSeriesCollection#wrapOffset(int)" -> "DynamicTimeSeriesCollection#offsetFromNewest(int)";
  "org.jfree.chart$ui.LCBLayout#removeLayoutComponent(java.awt.Component)" -> "java.awt.Container#removeAll()";
  "org.jfree.chart$ui.LCBLayout#removeLayoutComponent(java.awt.Component)" -> "java.awt.Container#remove(int)";
  "org.jfree.chart$ui.LCBLayout#removeLayoutComponent(java.awt.Component)" -> "java.awt.Container#removeDelicately(java.awt.Component,java.awt.Container,int)";
  "org.jfree.data$xy.OHLCDataItem#getVolume()" -> "DefaultOHLCDataset#getVolume(int,int)";
  "org.jfree.chart$util.ApplicationFrame#windowDeactivated(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowDeactivated(java.awt.event.WindowEvent)";
  "java.beans.PropertyChangeSupport#addPropertyChangeListener(java.beans.PropertyChangeListener)" -> "org.jfree.data$general.Series#addPropertyChangeListener(java.beans.PropertyChangeListener)";
  "org.jfree.data$KeyedObject#getObject()" -> "KeyedObjects#getObject(int)";
  "org.jfree.chart$plot.ThermometerPlot#getAxisLocation()" -> "plot.JThermometer#getShowAxisLocation()";
  "org.jfree.chart$plot.ThermometerPlot#getAxisLocation()" -> "org.jfree.chart$plot.JThermometer#getShowAxisLocation()";
  "org.jfree.chart$plot.ThermometerPlot#getAxisLocation()" -> "JThermometer#getShowAxisLocation()";
  "org.jfree.chart$editor.DefaultNumberAxisEditor#focusGained(java.awt.event.FocusEvent)" -> "java.awt.AWTEventMulticaster#focusGained(java.awt.event.FocusEvent)";
  "org.jfree.chart$util.ApplicationFrame#windowActivated(java.awt.event.WindowEvent)" -> "java.awt.AWTEventMulticaster#windowActivated(java.awt.event.WindowEvent)";
}
