digraph G {
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)" -> "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#round(double,int,int)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$2#<clinit>()" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.util$Incrementor#incrementCount()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)" -> "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getValue()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization$GoalType#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)" -> "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization$GoalType#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Precision#equals(double,double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#round(float,int,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMaxEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getMaximalCount()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization$GoalType#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis.function$StepFunction#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$FastMath#ulp(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$Incrementor$1#trigger(int)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)" -> "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
}
