digraph G {
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$MersenneTwister#next(int)" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#ceil()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#align(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#getZero()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#round(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#round(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#round(int)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#round(int)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#round(int)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#negate()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#getOne()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(int)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp$1#<clinit>()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#divide(int)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#sqrt()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#divide(int)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiply(int)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#divide(int)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#strictlyPositive()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#multiply(int)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#power10(int)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#reciprocal()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#rint()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(double)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#floor()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(long)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#getTwo()" -> "org.apache.commons.math3.dfp$DfpField#getTwo()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#dfp2sci()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#sqrt()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#divide(int)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#dfp2string()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#toString()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#sqrt()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#divide(int)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#toString()" -> "org.apache.commons.math3.dfp$Dfp#dfp2sci()";
  "org.apache.commons.math3.dfp$Dfp#toString()" -> "org.apache.commons.math3.dfp$Dfp#dfp2string()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#isZero()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)" -> "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#dfp2sci()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#multiply(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#rint()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField#getTwo()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#dfp2string()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(long)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#getTwo()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#log10()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#toString()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#toDouble()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(long)" -> "org.apache.commons.math3.random$MersenneTwister#setSeed(int)";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(long)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(long)" -> "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(long)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])" -> "org.apache.commons.math3.random$MersenneTwister#setSeed(int)";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])" -> "org.apache.commons.math3.random$MersenneTwister#setSeed(long)";
  "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#power10K(int)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.dfp$Dfp#newInstance(byte)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#rint()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#newInstance()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#rint()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#intValue()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#classify()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.random$MersenneTwister#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.random$MersenneTwister#next(int)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#positiveOrNull()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#strictlyNegative()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#abs()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#getRadixDigits()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#dfp2sci()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#align(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#multiply(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#rint()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(double)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField#getTwo()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#dfp2string()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(long)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#round(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#getTwo()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#shiftRight()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField#getOne()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#negate()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#toDouble()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#getOne()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#log10()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#shiftLeft()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#complement(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(int)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#toString()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp#getField()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$Dfp$1#<clinit>()";
  "org.apache.commons.math3.dfp$Dfp#toSplitDouble()" -> "org.apache.commons.math3.dfp$DfpField#getRoundingMode()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$Dfp#isNaN()";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$Dfp#getZero()";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$DfpField#getZero()";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$DfpField#getRadixDigits()";
  "org.apache.commons.math3.dfp$Dfp#negativeOrNull()" -> "org.apache.commons.math3.dfp$Dfp#isInfinite()";
}
