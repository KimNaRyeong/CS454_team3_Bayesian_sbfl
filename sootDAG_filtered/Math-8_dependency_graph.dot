digraph G {
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#getRan()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#probability(double)" -> "org.apache.commons.math3.util$Pair#equals(java.lang.Object)";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#probability(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#probability(java.lang.Object)";
  "org.apache.commons.math3.distribution$DiscreteDistribution#probability(java.lang.Object)" -> "org.apache.commons.math3.util$Pair#equals(java.lang.Object)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$DiscreteDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.distribution$DiscreteDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.distribution$DiscreteDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$2#<clinit>()" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#sample()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#sample()" -> "org.apache.commons.math3.distribution$DiscreteDistribution#sample()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$DiscreteDistribution#sample()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$DiscreteDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#density(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#probability(double)";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#density(double)" -> "org.apache.commons.math3.util$Pair#equals(java.lang.Object)";
  "org.apache.commons.math3.distribution$DiscreteRealDistribution#density(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#probability(java.lang.Object)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.distribution$DiscreteDistribution#sample(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$DiscreteDistribution#sample(int)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#sample()";
  "org.apache.commons.math3.distribution$DiscreteDistribution#sample(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)" -> "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$2#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
}
