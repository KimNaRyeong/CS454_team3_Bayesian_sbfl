digraph G {
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy()" -> "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.stat.descriptive.summary$Sum#copy(org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.summary.Sum)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#equals(java.lang.Object)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getN()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#getN()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[])";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate()" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#clear()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy(org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.SecondMoment)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#increment(double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#increment(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#increment(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#clear()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()";
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[])" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#getResult()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$Mean#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.summary$Sum#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getN()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#hashCode()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#getResult()";
  "org.apache.commons.math.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy()" -> "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.stat.descriptive.moment$Variance#copy(org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.moment.Variance)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.stat.descriptive.summary$Sum#evaluate(double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#test(double[],int,int,boolean)";
  "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy(org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.SecondMoment)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy(org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.FirstMoment)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#clear()" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#clear()" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#clear()";
  "org.apache.commons.math.stat.descriptive.moment$Variance#increment(double)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#increment(double)";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[])" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double[],double,int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[])" -> "org.apache.commons.math.stat.descriptive.moment$Mean#evaluate(double[],double[],int,int)";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#setData(double[])";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive.moment$FirstMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive.moment$SecondMoment#copy()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)" -> "org.apache.commons.math.stat.descriptive$AbstractUnivariateStatistic#getDataRef()";
  "org.apache.commons.math.stat.descriptive.moment$Mean#copy()" -> "org.apache.commons.math.stat.descriptive.moment$Mean#copy(org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.Mean)";
  "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double)" -> "org.apache.commons.math.stat.descriptive.moment$Variance#evaluate(double[],double,int,int)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[])" -> "org.apache.commons.math.stat.descriptive$AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)";
}
