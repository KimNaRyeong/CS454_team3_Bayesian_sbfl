digraph G {
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#scale(org.jfree.data.Range,double)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#intersects(org.jfree.data.Range)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#getUpperBound()" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)";
  "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double)";
  "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#scale(org.jfree.data.Range,double)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#intersects(org.jfree.data.Range)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#getLowerBound()" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)";
  "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)" -> "org.jfree.data$Range#shift(org.jfree.data.Range,double)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#toString()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectItem#hashCode()";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectSeries#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#hashCode()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectItem#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#hashCode()";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectItem#hashCode()";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectSeries#getItemCount()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#hashCode()";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectItem#hashCode()";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectSeries#getDataItem(int)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#hashCode()";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectItem#hashCode()";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#hashCode()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$Range#constrain(double)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#contains(double)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#remove(int)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectItem#getObject()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectItem#clone()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#remove(int)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#clear()";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#delete(int,int)";
  "org.jfree.data$ComparableObjectItem#getComparable()" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#setObject(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#setObject(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)";
  "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
  "org.jfree.data$Range#intersects(double,double)" -> "org.jfree.data$Range#intersects(org.jfree.data.Range)";
  "org.jfree.data$Range#getLength()" -> "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)";
  "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)" -> "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)";
}
