digraph G {
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.exception$NoDataException#NoDataException()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.exception$NoDataException#NoDataException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#equals(float[],float[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#hypot(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#hypot(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#hypot(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#hypot(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()" -> "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException()";
  "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(double,double,double,double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#hypot(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#equals(double,double)";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#equals(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#round(double,int,int)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#round(float,int,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()" -> "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)";
}
