digraph G {
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)" -> "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
}
