digraph G {
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#toDegrees(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#tanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#acosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#acosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#asinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#asinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#expm1(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#toRadians(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#signum(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#atanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#tan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log10(double)";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log10(double)";
}
