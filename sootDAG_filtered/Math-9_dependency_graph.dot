digraph G {
  "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#atan2(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#distance(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkOrder(double[])" -> "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()" -> "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathArrays#checkPositive(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$MathArrays#distance(double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)";
  "org.apache.commons.math3.util$MathArrays#copyOf(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
}
