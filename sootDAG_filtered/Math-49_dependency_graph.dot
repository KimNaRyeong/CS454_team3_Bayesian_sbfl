digraph G {
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#add(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expint(int,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#<clinit>()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowCos(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowLog(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#buildSinCosTables()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#add(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#slowSin(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector$1#next()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#slowexp(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$2#end()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toRadians(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#atan2(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfNorm()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#add(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#subtract(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$AbstractRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#toArray()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#toArray()" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#iterator()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#sinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#exp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#asinh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivide(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeMultiply(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#getNorm()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getNorm()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#getNorm()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitize()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyOut()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#copyOut()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#unitize()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#getNorm()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#nextPowerOfTwo(int)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#ceil(double)";
  "org.apache.commons.math.util$OpenIntToDoubleHashMap#computeCapacity(int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ceil(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#getData()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#getData()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#getData()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#acos(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSparsity()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSparsity()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cbrt(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#expm1(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#append(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMaxIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atan(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getDistance(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#outerProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#dotProduct(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#acosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#add(org.apache.commons.math.linear.OpenMapRealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#isInfinite()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#isInfinite()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#isInfinite()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#isInfinite()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#add(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Norm()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#isSquare()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#nextUp(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#copySign(double,double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#asin(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#add(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#add(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#add(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#log(double)";
  "org.apache.commons.math.util$FastMath#atanh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#rint(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log1p(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#round(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#cos(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#add(org.apache.commons.math.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#add(org.apache.commons.math.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#unitize()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#unitize()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#getNorm()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$AbstractRealVector#mapDivideToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#unitVector()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$AbstractRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.RealMatrix)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#multiply(org.apache.commons.math.linear.OpenMapRealMatrix)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtract(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getNorm()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#preMultiply(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#mapMultiply(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#projection(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#projection(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math.util$FastMath#toDegrees(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#combineToSelf(double,double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#combine(double,double,double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#append(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#floor(double)";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#round(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#sin(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#log10(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#getNorm()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#size()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#cosine(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#dotProduct(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#cosine(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#set(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#ebeDivide(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getLInfDistance(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#exp(double)";
  "org.apache.commons.math.util$FastMath#cosh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$3#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getL1Distance(double[])" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#log(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#pow(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.OpenMapRealMatrix)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#subtract(org.apache.commons.math.linear.RealMatrix)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#isNaN()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#isNaN()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#isNaN()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#isNaN()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector#getMinIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#getMinValue()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#ulp(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector#mapAddToSelf(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#mapAdd(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#getRow(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#abs(float)";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#ulp(float)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.linear$AbstractRealMatrix#getColumn(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$AbstractRealMatrix#operate(org.apache.commons.math.linear.RealVector)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$RealLinearOperator#operate(double[])" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntries()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#equals(java.lang.Object)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#end()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$5#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$2#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$AbstractRealMatrix$4#visit(int,int,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#max(double,double)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tanh(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$OpenMapRealVector#getSubVector(int,int)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#toArray()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$AbstractRealVector#getData()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#setSubVector(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#toArray()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.linear$OpenMapRealVector#getData()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#setSubVector(int,org.apache.commons.math.linear.RealVector)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#getExponent(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#sqrt(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#scalb(double,int)";
  "org.apache.commons.math.util$FastMath#hypot(double,double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#key()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#setEntry(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#value()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$1#next()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#isDefaultValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#checkIndex(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#sparseIterator()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#getValue()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#getDimension()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$1#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$EntryImpl#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector$SparseEntryIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$AbstractRealVector#iterator()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#getEntry(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap$Iterator#advance()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#abs(double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapEntry#setValue(double)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector$OpenMapSparseIterator#next()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.linear$OpenMapRealVector#copy()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.linear$AbstractRealVector#map(org.apache.commons.math.analysis.UnivariateRealFunction)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#probe(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#hashOf(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#containsKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#remove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#put(int,double)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#doRemove(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#shouldGrowTable()";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#get(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#changeIndexSign(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#perturb(int)";
  "org.apache.commons.math.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math.util$OpenIntToDoubleHashMap#growTable()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#expint(int,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#<clinit>()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowCos(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowLog(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#buildSinCosTables()";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitAdd(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#split(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowSin(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#polySine(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#quadMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitReciprocal(double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#splitMult(double[],double[],double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#slowexp(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#polyCosine(double)";
  "org.apache.commons.math.util$FastMath#tan(double)" -> "org.apache.commons.math.util$FastMath#resplit(double[])";
}
